<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>E.K TechThinking</title>
  <subtitle>Tech &amp; Thinking &amp; DevOps &amp; Azure &amp; VSTS</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://edwardkuo.imas.tw/"/>
  <updated>2017-12-13T08:20:41.116Z</updated>
  <id>http://edwardkuo.imas.tw/</id>
  
  <author>
    <name>Edward kuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>查詢Microsoft Teams群組中儲存檔案的容量</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/12/13/Devops/TeamsFileSize/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/12/13/Devops/TeamsFileSize/</id>
    <published>2017-12-12T16:00:00.000Z</published>
    <updated>2017-12-13T08:20:41.116Z</updated>
    
    <content type="html"><![CDATA[<img src="https://docs.microsoft.com/zh-tw/media/hubs/microsoftteamshome/teams-skype-to-teams.svg">
<blockquote>
<blockquote>
<p>首先感謝微軟技術團隊提供支援，協同解決</p>
</blockquote>
</blockquote>
<p>當大家開始習慣使用<code>Microsoft Teams</code>時候，就會開始把習慣透過群組方式分享檔案給團隊成員，　Office 365雖然有提供每個帳號1TB的Onedrive空間，但是，對於公用的空間卻是有限制的，其計算方式<code>1TB+Account個數x0.5G</code>，換句話說如果公司人數1000人，共用的空間大小則是<code>1.5G</code>。而這<code>1.5G</code>會被SharePoint和Microsoft Teams所儲存的檔案大小給瓜分。所以，感覺很多，但其實也不太夠用。</p>
<p>此外，Microsoft Teams是一個很獨特的工具，因為前端看見是Teams，但其實背後隱藏技術卻是被架構在SharePoint、Skype for Buinsess…等Office 365內的服務之上，所以，Microsoft Teams的檔案管理背後其實是被SharePoint管理，所以，當我們建立一個新的群組，等於是在Office 365上面建立一個SharePoint Web Site，只是在SharePoint Admin管理介面中看不到這些群組<br><img src="/blogimage/MicrosoftTeamsFile/B1.jpg" width="800"></p>
<p>這時候，就必須Teams的管理上真的還不夠人性化，在SharePoint Admin看不到，且在Office 365後台也沒有相關資訊，對於管理者來說真的不夠方便，不過，目前最差狀況就是還可以透過<code>PowerShell</code>管理，至少是還是有解決方式</p>
<h2 id="安裝SharePoint-Powershell模組"><a href="#安裝SharePoint-Powershell模組" class="headerlink" title="安裝SharePoint Powershell模組"></a>安裝SharePoint Powershell模組</h2><hr>
<p>既然要透過<code>PowerShell</code>管理，就必須先安裝相關管理模組，才能與Office 365連線溝通，首先必須下載<code>SharePoint Online 管理命令介面</code>，下載套件網址<br><a href="https://www.microsoft.com/zh-tw/download/details.aspx?id=35588" target="_blank" rel="external">https://www.microsoft.com/zh-tw/download/details.aspx?id=35588</a></p>
<h2 id="查詢Teams空間使用狀況"><a href="#查詢Teams空間使用狀況" class="headerlink" title="查詢Teams空間使用狀況"></a>查詢Teams空間使用狀況</h2><hr>
<p>這邊使用的<code>PowerShell</code>語法，基本上就是管理Office 365用的語法，如前面所說，Teams群組其實背後是SharePoint，所以，語法上等同於查詢SharePoint使用檔案空間狀況，下面逐步撰寫相關查詢語法</p>
<ol>
<li>建立Office 365連線，執行後會跳出帳號密碼輸入框，輸入密碼即可<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Format :XXXXXX@BBB.onmicrosoft.com"</span></div><div class="line"><span class="variable">$AdminName</span> =<span class="string">"Office 365管理者帳號"</span></div><div class="line"><span class="variable">$O365Connection</span> = Get-Credential -UserName <span class="variable">$AdminName</span> -Message <span class="string">"Enter Office 365 Admin Credentials"</span></div><div class="line"><span class="variable">$O365Session</span> = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential <span class="variable">$O365Connection</span> -Authentication Basic -AllowRedirection</div><div class="line">Import-PSSession <span class="variable">$o365Session</span></div></pre></td></tr></table></figure>
</li>
</ol>
<img src="/blogimage/MicrosoftTeamsFile/B2.jpg" width="800">
<p>2.連線到SharePoint Admin Portal<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$SPAdminUrl</span> =<span class="string">"https://BBB-admin.sharepoint.com/"</span></div><div class="line">Connect-SPOService -Url <span class="variable">$SPAdminUrl</span> -Credential <span class="variable">$O365Connection</span></div><div class="line"><span class="variable">$TeamsGroups</span> = Get-UnifiedGroup -ResultSize Unlimited</div></pre></td></tr></table></figure></p>
<p><code>Get-UnifiedGroup</code>主要是列出所有群組列表，可以再放其他參數了解該群組的細節</p>
<p>3.列出群組使用的檔案大小<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$TeamsResult</span>=@() </div><div class="line">ForEach (<span class="variable">$TeamsGroups</span> <span class="keyword">in</span> <span class="variable">$TeamsGroups</span>)</div><div class="line">&#123;</div><div class="line">    If(<span class="variable">$TeamsGroups</span>.SharePointSiteUrl <span class="_">-ne</span> <span class="variable">$null</span>) </div><div class="line">    &#123;</div><div class="line">       <span class="variable">$TeamsGroupSite</span>=Get-SPOSite -Identity <span class="variable">$TeamsGroups</span>.SharePointSiteUrl </div><div class="line">       <span class="variable">$TeamsResult</span> += [PSCustomObject] @&#123; </div><div class="line">         GroupName =  <span class="variable">$TeamsGroups</span>.DisplayName</div><div class="line">         SiteUrl = <span class="variable">$TeamsGroupSite</span>.Url </div><div class="line">         StorageUsed_inMB = <span class="variable">$TeamsGroupSite</span>.StorageUsageCurrent</div><div class="line">         StorageUsed_inGB=<span class="variable">$TeamsGroupSite</span>.StorageUsageCurrent/1024</div><div class="line">         StorageQuota_inGB = <span class="variable">$TeamsGroupSite</span>.StorageQuota/1024</div><div class="line">         WarningSize_inGB =  <span class="variable">$TeamsGroupSite</span>.StorageQuotaWarningLevel/1024</div><div class="line">      &#125;</div><div class="line">       <span class="variable">$Sum</span> +=<span class="variable">$TeamsGroupSite</span>.StorageUsageCurrent    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>群組的SharePoint網址格式都會是<code>https://BBB.sharepoint.com/sites/Name</code><br><img src="/blogimage/MicrosoftTeamsFile/B3.jpg" width="800"></p>
<h2 id="限制Teams群組空間大小"><a href="#限制Teams群組空間大小" class="headerlink" title="限制Teams群組空間大小"></a>限制Teams群組空間大小</h2><hr>
<p>限制群組空間大小，是採用<code>MB</code>計算，空間計量設定有兩個地方，一個是警示容量大小，一個是可用容量大小，警示容量顧名思義就是當使用到警示容量會有提示功用，所以，設定容量限制時候，可用容量不可以小於警示容量，不然會出現錯誤，如果要自行設定容量大小，必須先在SharePoint的設定功能去變更<code>網站集合儲存空間管理</code>，必須改為手動<br><img src="/blogimage/MicrosoftTeamsFile/B4.jpg" width="800"></p>
<p>1.變更警示容量大小<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-SPOSite -Identity https://BBB.sharepoint.com/sites/groupname -StorageQuotaWarningLevel 5120</div></pre></td></tr></table></figure></p>
<p>2.變更容量大小<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-SPOSite -Identity https://BBB.sharepoint.com/sites/groupname -StorageQuota 6000</div></pre></td></tr></table></figure></p>
<p>使用上面兩行指令就可以變更容量大小了，如果想知道每個群組的設定值，也可以使用下面方式<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Get-SPOSite -Identity https://BBB.sharepoint.com/sites/groupname |fl StorageUsageCurrent, StorageQuota,StorageQuotaWarningLevel</div></pre></td></tr></table></figure></p>
<p>以上方式是<strong>目前</strong>唯一可以去管理Teams方式，希望之後可以把這些指令併入到原本O365平台內管理，此外，這邊另一個不好地方，就是用戶如果自行建立群組，是會被設定預設大小，所以，管理者必須定期掃描哪些是新建立群組，那些群組還沒有被限制空間大小，不然，哪邊某一個群組放上大量檔案，把共用空間用光，就會讓其他群組無法上傳檔案了</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><hr>
<p>1.<a href="https://support.office.com/zh-tw/article/管理網站集合的儲存限制-77389c2c-8e7e-4b16-ab97-1c7103784b08" target="_blank" rel="external">管理網站集合的儲存限制</a><br>2.<a href="https://goo.gl/MgYf65" target="_blank" rel="external">https://technet.microsoft.com/zh-tw/library/mt238272(v=exchg.160).aspx</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://docs.microsoft.com/zh-tw/media/hubs/microsoftteamshome/teams-skype-to-teams.svg&quot;&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;首先感謝微軟技術團隊提
    
    </summary>
    
      <category term="Microsoft Teams" scheme="http://edwardkuo.imas.tw/categories/Microsoft-Teams/"/>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>VSTS整合資安工具Fortify達成自動化</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/12/04/Devops/VSTSFority/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/12/04/Devops/VSTSFority/</id>
    <published>2017-12-03T16:00:00.000Z</published>
    <updated>2017-12-05T16:17:20.681Z</updated>
    
    <content type="html"><![CDATA[<img src="https://bright-side-of-life.com/wp-content/uploads/2017/05/post-fortify-fb.jpg">
<p>在資安逐步被重視的年代，企業會導入更多資安相關工具，除了本身伺服器或網路層的工具外，近年也針對程式碼進行安全性的掃瞄，目前其中市面上比較熱門的工具之一就是HPE Fortify，他本身可掃描的程式碼種類很多。在開發者端，可以透過Visual Studio的Plug in方式，安裝在Visual Studio，如果你又有Fortify Center的登入權限，便可以從Center將資安團隊設定好的規則下載下來，透過企業訂好的資安政策去掃描自己的程式碼，完畢之後，可以選擇把報告上傳到Center或是在本地自己觀看，掃描後的結果，不過，這邊我建議是上傳到Center中，可讀性會比較高，報表內容比較好看得懂</p>
<p>既然要走<code>DevOps</code>，當然除了在開發工具安裝外，也會希望在<code>CI</code>時候，也可以把資訊安全檢測的這一段給自動化，目前，VSTS可以透過外掛套件將Fortify整合進來，其套件名稱為<strong>Micro Focus Fortify</strong>，在 <a href="&#39;https://marketplace.visualstudio.com/items?itemName=fortifyvsts.hpe-security-fortify-vsts&#39;">點我</a> 來下載安裝</p>
<img src="/blogimage/VSTS/fority.jpg" width="700">
<h2 id="安裝Fortify"><a href="#安裝Fortify" class="headerlink" title="安裝Fortify"></a>安裝Fortify</h2><hr>
<p>這邊為什麼要多安裝Fortify這步驟，因為，雖然說套件可以幫忙做到自動化，但是它底層其實是必須先有Fortify核心，然後再透過PowerShell指令驅動它，然後進行程式碼的靜態掃描。今天如果是透過地端VSTS Agent來建置，建議是手動先把它安裝好，雖然，這個Plug in有提供<code>Fortify Static Code Analyzer Installation</code>，其中有些設定必須要有Admin權限，所以為了省掉這中間的麻煩，還是先手動安裝好</p>
<p>安裝HPE Fortify SCA其實不難，主要在於必須設定裡面的資訊。</p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>找到<code>HPE_Security_Fortify_SCA_and_Apps_17.10_windows_x64.exe</code>進行安裝，有買這產品的人，因該都會有這一個檔案，不過，這一個版本目前不支援掃描ASP.NET Core，必須等到<code>HPE_Security_Fortify_SCA_and_Apps_17.20_windows_x64.exe</code>才可以針對ASP.NET Core掃描。另外，會自動幫你安裝IDE的Plug in，不過，目前似乎不支援Visual Studio 2017版本，2017必須額外安裝Plug in。</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>安裝過程到了一半，會請你輸入Software Security Center的URL，就看自己企業內部架設的Software Security Center網址填入進去就可以，SSC網址會類似這樣: <a href="https://XXX.XX.XX.XX/SSC，到這邊看似已經完成，不過，會建議先用Command方式測試是否可以上傳fpr檔案，如果，無法上傳檔案，就必須找出哪邊出問題，不然，到時候VSTS也沒有辦法自動化完成上傳檔案，當然，如果不需要上傳檔案到SSC，就可以不用管它" target="_blank" rel="external">https://XXX.XX.XX.XX/SSC，到這邊看似已經完成，不過，會建議先用Command方式測試是否可以上傳fpr檔案，如果，無法上傳檔案，就必須找出哪邊出問題，不然，到時候VSTS也沒有辦法自動化完成上傳檔案，當然，如果不需要上傳檔案到SSC，就可以不用管它</a></p>
<p>如果遇到憑證問題，必須執行下面指令，必須先跟SSC管理員取得<code>.cer</code>檔案，並匯入到環境中，才不會發生憑證問題，造成無法連線<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set &quot;FORTIFY_HOME=C:\Program Files\HPE_Security\Fortify_SCA_and_Apps_17.10&quot;</div><div class="line">set &quot;JAVA_HOME=%FORTIFY_HOME%\jre&quot;</div><div class="line">&quot;%JAVA_HOME%\bin\keytool&quot; -importcert -trustcacerts -alias ussca -file &quot;C:\yourSCAInstallLocation\ussca.cer&quot; -keystore &quot;%JAVA_HOME%\lib\security\cacerts&quot; -storetype JKS -storepass changeit</div></pre></td></tr></table></figure></p>
<p>如果單機上測試都沒有問題，接下來就可以進行自動化部分，另外，在fortify中有一個<code>fortify.license</code>的SCA檔案，也要一併放到可以被VSTS Agent讀到的位置，因為在設定後續的Fortify Task會使用到這個檔案</p>
<p>在fortify安裝資料夾中找到<code>fortifyclient.bat</code>，用這個測試上傳fpr是否有問題</p>
<h2 id="設定VSTS內Fortify-Task"><a href="#設定VSTS內Fortify-Task" class="headerlink" title="設定VSTS內Fortify Task"></a>設定VSTS內Fortify Task</h2><hr>
<p>安裝完畢Micro Focus Fortify套件後，可以看到這些相關的TASK<br><img src="/blogimage/VSTS/fority2.jpg" width="600"></p>
<p>要掃描程式碼，選<code>Fortify Static Code Analyzer Assessment</code>這個來用就可以，主要設定可以分三大塊</p>
<h5 id="基本參數設定"><a href="#基本參數設定" class="headerlink" title="基本參數設定"></a>基本參數設定</h5><img src="/blogimage/VSTS/fority3.jpg" width="700">
<p>主要設定SCA License檔案位置，和每次產生fpr檔案的命名規則</p>
<h5 id="Build設定"><a href="#Build設定" class="headerlink" title="Build設定"></a>Build設定</h5><img src="/blogimage/VSTS/fority4.jpg" width="700">
<p>這邊設定是要編譯程式的類型，在17.1版只有分<code>.NET</code> &amp; ‘Java’版本兩種，且還不能編譯.NET Core，不過，據說下一個版本會擴充更多可編譯的類型，然後，在選擇專案位置，這邊有一個比較奇怪地方，就是如果上面有一個TASK已經做過Build，在這裡把<code>Run Build</code>取消，就會發生失敗狀況，所以，這邊還是必須把<code>Run Build</code>打勾，才可以順利進行下去。在17.1版如果是.NET程式，還是仰賴<code>MSBuild</code>進行，所以，編譯那一台機器上必須可以執行<code>MSBuild</code></p>
<h5 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h5><img src="/blogimage/VSTS/fority5.jpg" width="700">
<p>掃描類型可以分成Cloud和Local，在企業端大部分都是選擇<code>Local</code> Scan，就可以開始進行掃描的動作，這部分會執行時間相當長，所以，建議可以用定時執行Definitons方式</p>
<h5 id="上傳fpr設定"><a href="#上傳fpr設定" class="headerlink" title="上傳fpr設定"></a>上傳fpr設定</h5><img src="/blogimage/VSTS/fority6.jpg" width="700">
<p>當掃描完畢之後，就會產生<code>.fpr</code>檔案，這時候就必須上傳到SSC Server。此時必須先設定SSC的End Point位置，設定主機屬性如下</p>
<ul>
<li>Connection Name : 給定這服務一個名稱</li>
<li>Server URL : 格式會是<a href="https://XXXX.XXX.XXX.XXX/ssc" target="_blank" rel="external">https://XXXX.XXX.XXX.XXX/ssc</a></li>
<li>User Name : 登入SSC的帳號</li>
<li>Password : 登入SSC的密碼<br>再來設定對應到SSC的Application Name和Version，這邊的<code>Application Name</code>和<code>Version</code>必須和SSC上面註冊是一致的才可以，換句話說，必須在SSC註冊一個Application和它的版本</li>
</ul>
<p>完成以上步驟，就可以自動化的SCAN，同時上傳掃描後的檔案了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://bright-side-of-life.com/wp-content/uploads/2017/05/post-fortify-fb.jpg&quot;&gt;
&lt;p&gt;在資安逐步被重視的年代，企業會導入更多資安相關工具，除了本身伺服器或網路層的工具外，近年也針
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>Study4.TW Study4Love - 與大師對談 活動</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/11/21/Other/StudyLove/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/11/21/Other/StudyLove/</id>
    <published>2017-11-21T14:59:31.000Z</published>
    <updated>2017-11-21T16:48:02.087Z</updated>
    
    <content type="html"><![CDATA[<img src="https://distudio.blob.core.windows.net/study4tw/1510761314.63796.png">
<p>活動時間： 1/06/2018 9:00:00 AM<br>活動地點： 台大管理學院1號館/台北市大安區基隆路四段144巷 No. 52 </p>
<p>邀請了高達 15 位講師，分享他們的專業知識和經驗，在一整天的議程中，您將可以盡情地享受 IT Infrastructure、Dev、Agile、DevOps、Azure、Database、AI…等相關的議題，無論您是初學者、轉換跑道者還是資深的技術人員，這裡皆有適合您的議程。共同學習，提出問題與講師交流，藉此精進您的開發技能。</p>
<p>技能範圍從容器開發、DevOps到MR都有，重量級講師盡出，不來太可惜了</p>
<p>活動頁面 <a href="&#39;http://study4.tw/Activity/Details/12&#39;">http://study4.tw/Activity/Details/12</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://distudio.blob.core.windows.net/study4tw/1510761314.63796.png&quot;&gt;
&lt;p&gt;活動時間： 1/06/2018 9:00:00 AM&lt;br&gt;活動地點： 台大管理學院1號館/台北市大安區基隆路四
    
    </summary>
    
    
      <category term="LifeStyle" scheme="http://edwardkuo.imas.tw/tags/LifeStyle/"/>
    
  </entry>
  
  <entry>
    <title>有參照外部元件如何在VSTS建立.Net Core Package</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/11/10/Devops/VSTSCore/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/11/10/Devops/VSTSCore/</id>
    <published>2017-11-09T16:00:00.000Z</published>
    <updated>2017-11-10T03:16:48.067Z</updated>
    
    <content type="html"><![CDATA[<img src="https://core.ac.uk/resources/corelogo_hires.png">
<p>在先前一篇的[<a href="&#39;http://edwardkuo.imas.tw/paper/2017/10/12/Devops/donetVSTS/&#39;">用VSTS建立.Net Core的Package</a>]，建立屬於.Net Core的Nuget Package，其中在<code>Path to csproj or nuspec file(s) to pack</code>是沒有辦法放<code>.nuspec</code>檔案的，但是，原本在<code>.nuspec</code>有一個標籤可以把外部dll包進Package<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">files</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">file</span> <span class="attr">src</span>=<span class="string">"lib\XXX.dll"</span> <span class="attr">target</span>=<span class="string">"lib\netstandard2.0"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">files</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>不過，目前VSTS上面那個Dotnet Task無法讀取<code>.nuspec</code>檔案，就導致無法把外部參考的dll一起打包，而在介面上也找不到可以加入的地方。其實，在頁簽上面設定，都會被記錄到<code>csproj</code>檔案中<br><img src="/blogimage/VSTS/15.jpg" width="700"><br>在<code>csproj</code>有下面tag包住的資訊就跟在Package頁簽上面看到是相同的資訊<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;PropertyGroup&gt;</div><div class="line">....</div><div class="line">&lt;/PropertyGroup&gt;</div></pre></td></tr></table></figure></p>
<p>既然這樣，那樣也是因該可以在這邊加入我想要的打包外部dll設定才對，畢竟，在這裏面的屬性其實是對應到<code>.nuspec</code>的標籤的，找了半天，最後可以下面語法加入到<code>csproj</code>中<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ItemGroup&gt;</div><div class="line">    &lt;_PackageFiles Include=<span class="string">"lib\XXX.dll"</span>&gt;</div><div class="line">      &lt;BuildAction&gt;None&lt;/BuildAction&gt;</div><div class="line">      &lt;PackagePath&gt;lib\netstandard2<span class="number">.0</span>\&lt;/PackagePath&gt;</div><div class="line">    &lt;/_PackageFiles&gt;</div><div class="line">&lt;/ItemGroup&gt;</div></pre></td></tr></table></figure></p>
<p>第一行<code>_PackageFiles</code>是說在專案資料夾中，你把外部的dll放在那個地方，需要去那邊抓到這個dll，第三行<code>PackagePath</code>是把dll放到package內那個地方，就.Net Core來說目前必須放到<code>netstandard2.0</code>資料夾內，所以，就必須設定把dll搬移到這邊</p>
<p>這樣設定好之後，再重新跑一次CI，就可以完美的把外部dll也打包進去了，雖然可以解決目前這問題，最好方法還是可以正常讀取<code>.nuspec</code>檔案</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://core.ac.uk/resources/corelogo_hires.png&quot;&gt;
&lt;p&gt;在先前一篇的[&lt;a href=&quot;&amp;#39;http://edwardkuo.imas.tw/paper/2017/10/12/Devops/donetVS
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>Application Insights + Logic App + Microsoft Teams 整合</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/10/16/Azure/AIappTeams/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/10/16/Azure/AIappTeams/</id>
    <published>2017-10-15T16:00:00.000Z</published>
    <updated>2017-10-16T14:04:01.949Z</updated>
    
    <content type="html"><![CDATA[<img src="https://datadog-prod.imgix.net/img/blog/monitor-azure-logic-app-workflows-datadog/azure-logic-apps-hero.png?ch=Width&fit=max&fm=png&auto=format&lossless=1">
<p>Application Insights可以讓我們去設定監控某些指標，當這些指標有發生異常時候，就會發送Alert通知，讓我們隨時知道發生的狀況或是是否有異常發生<br><img src="/blogimage/Azure/31.jpg" width="400"></p>
<p>我們通常會設定是屬於Exception類的訊息，且這對於開發或是維運人員來說才可以立即進行處理，同時也是屬於DevOps環節的一塊，不過，透過Mail方式收到資訊內容就會像下圖這樣呈現方式，就這樣內容來說只知道有發生問題，但是無法知道問題點是甚麼，是否要做立即性的的處理，且若想要知道更細節的資訊，還必須回到Azure內查詢，才可以知道是到底是發生甚麼錯誤<br><img src="/blogimage/Azure/29.jpg" width="500"></p>
<p>若是使用手機去查看時候，更就會感到不方便。先前有實作一篇<strong><a href="http://edwardkuo.imas.tw/paper/2016/09/25/Azure/2016-09-26/">Azure Application Insights發Alert訊息到Slack</a></strong>，可以透過Logice App利用Application Insights的Webhook作為發送管道，雖然，可以放入比”Mail”還多的資訊，但明顯還是不夠，這時候就可以利用Logice App屬於Application insights的功能，這目前還在<strong>Preview</strong>版本，透過這個的Application insights Task就可以在訂定更多細節的資訊</p>
<h2 id="Logic-App流程設計"><a href="#Logic-App流程設計" class="headerlink" title="Logic App流程設計"></a>Logic App流程設計</h2><hr>
<p>在這次設計上，只需要三個步驟就可以讓Application Insights蒐集到Exception送到Microsoft Teams Channel，算是很簡單了</p>
<h3 id="Recurrence"><a href="#Recurrence" class="headerlink" title="Recurrence"></a>Recurrence</h3><p>Recurrence主要是設定間隔一段時間確認Application Insights內的資料，可以依照需求決定時間點<br><img src="/blogimage/Azure/30.jpg" width="500"></p>
<h3 id="Run-Analytics-Query"><a href="#Run-Analytics-Query" class="headerlink" title="Run Analytics Query"></a>Run Analytics Query</h3><p>在Logice App的Application Insights Task共有兩種<code>Application insights Query</code> &amp; <code>Application insights for Visualize</code><br><img src="/blogimage/Azure/32.jpg" width="500"></p>
<ul>
<li>Application insights Query : 透過分析語法取得想要的資料，呈現方式是表格型態</li>
<li>Application insights for Visualize : 意思如同上面一樣，只是採用圖表方式呈現</li>
</ul>
<p>因為Logice App會與Application Insights做資料串接，所以，我們必須讓Logic App可以與Application Insights溝通，因此，要設定Connection Info<br><img src="/blogimage/Azure/33.jpg" width="600"></p>
<ul>
<li>Connection Name : 定義連線資訊名稱</li>
<li>Application ID : Application Insights的Application Key，可以在下圖找到<img src="/blogimage/Azure/34.jpg" width="600"></li>
<li>API Key：在同一個畫面中，選擇<code>建立API金鑰</code>，就可以得到</li>
</ul>
<p>設定完以上資訊，就可以讀取到Application Insights資料，之後，就採用<code>Application insights Query</code>這個Task，要使用語法可以先在Application Insights Analytics去跑跑看自己寫的語法是否可以運作，下面為這次實作的語法，主要是抓取資訊類型是屬於<code>exception</code>的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">exceptions</div><div class="line">| where timestamp&gt;ago(180s)</div><div class="line">| where (itemType == &apos;exception&apos; )</div><div class="line">| project timestamp=timestamp+8h,</div><div class="line">s=now()+8h,</div><div class="line">client_Type ,</div><div class="line">outerType ,</div><div class="line">outerMethod ,</div><div class="line">outerMessage ,</div><div class="line">outerAssembly,</div><div class="line">operation_Name ,</div><div class="line">details ,</div><div class="line">customDimensions,</div><div class="line">ApplicationName=tostring(customDimensions[&quot;ApplicationName&quot;]),</div><div class="line">user_Id</div></pre></td></tr></table></figure>
<img src="/blogimage/Azure/35.jpg" width="600">
<p>上面查詢語法的每個欄位，之後都可以當作傳送的資訊欄位</p>
<h3 id="Microsoft-Teams"><a href="#Microsoft-Teams" class="headerlink" title="Microsoft Teams"></a>Microsoft Teams</h3><p>設定好取得Application Insights資料後，再來就是設定綁定到Microsoft Teams，在Task中找到Microsoft Teams<br><img src="/blogimage/Azure/36.jpg" width="600"></p>
<p>要將資訊POST到Teams的Channel，所以選擇Post Message<br><img src="/blogimage/Azure/37.jpg" width="600"></p>
<p>前面有提到，透過Application Insights Query的資料欄位，都可以作為傳遞訊息的欄位，所以，可以看見Parameter都是剛剛查詢出來的欄位，然後，就可以在Message組合自己想要收到的資訊，因為是Application Insights Query查詢到的資料，所以，可以完整呈現出Application Insights蒐集的資訊<br><img src="/blogimage/Azure/38.jpg" width="600"></p>
<ul>
<li>Team ID : 就是在Teams上的群組</li>
<li>Channel ID : 就是Teams群組中的頻道<br>基本上只要跟Teams綁定後，這兩個資訊可以用選的，不需要人工Key，希望在Teams中的訊息有html格式，可以用Html的Tag去編排，如下圖<img src="/blogimage/Azure/40.jpg" width="600">
</li>
</ul>
<p>另外，在發送資料時候，Logic App會用迴圈方式一筆一筆將資料推送到Teams<br><img src="/blogimage/Azure/39.jpg" width="600"></p>
<p>整個流程如下<br><img src="/blogimage/Azure/41.jpg" width="600"></p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><hr>
<p>Logic App功能越來越強大，整合越來越Microsoft SaaS的服務，對於企業來說可以省掉整合的成本與時間，但是，採用排程方式並不是最好的，最好的方式還是用觸發會比較好，又因為觸發沒有辦法找到詳細資訊，所以，目前怎樣運用就自行評估，不過，也許後續有可以透過參數方式丟給Application Insights Query，這樣就可以透過觸發方式去運作</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://datadog-prod.imgix.net/img/blog/monitor-azure-logic-app-workflows-datadog/azure-logic-apps-hero.png?ch=Width&amp;fit=max&amp;fm=pn
    
    </summary>
    
      <category term="Azure Application Insights" scheme="http://edwardkuo.imas.tw/categories/Azure-Application-Insights/"/>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>用VSTS建立.Net Core的Package</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/10/13/Devops/donetVSTS/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/10/13/Devops/donetVSTS/</id>
    <published>2017-10-12T16:00:00.000Z</published>
    <updated>2017-10-13T16:19:08.650Z</updated>
    
    <content type="html"><![CDATA[<img src="https://stackify.com/wp-content/uploads/2017/03/dotnetwidowsserv-793x397.jpg">
<p>我們知道使用VSTS中的Packages Manager可以建立企業或是私有的Nuget Server，在一般.Net Framework下，可以用下面幾個步驟建立Nuget的Package，其中使用到的是<code>MSBuild</code>做編譯，再用Nuget指令打包成Package</p>
<img src="/blogimage/VSTS/12.jpg" width="600">
<p>不過，今天若是也這樣對<code>.Net Core</code>專案進行封裝，雖然會成功，但是，當在<code>.Net Core</code>專案下載來用時候，就會出現<strong>你使用了.Net Framework，不能使用在.Net Core專案中，請使用XXXXX</strong>字樣，主要原因是在編譯時候，單純使用MSbuild的Task，會被使用.Net Framework進行編譯封裝所造成的問題，網路上有人說可以採用<code>/t:package</code>方式克服，不過，既然使用了<code>.Net Core</code>，就改用<code>.Net Core</code>方式做CI &amp; CD吧</p>
<h2 id="Net-Core專案檔設定"><a href="#Net-Core專案檔設定" class="headerlink" title=".Net Core專案檔設定"></a>.Net Core專案檔設定</h2><hr>
<p>首先啟用的專案類型是<code>.Net Core Libray</code><br><img src="/blogimage/VSTS/13.jpg" width="600"></p>
<p>之前在<code>.Net Framework</code>時期專案，因為封裝成Nuget Package，必須透過<code>.nuspec</code>檔案把元件資訊填入，這樣別人才可以知道這個元件用途以及相關資訊，在.Net Core專案底下，已經可以省略這個檔案了，因為，要把這些需要填入資訊已經納入專案檔中了，在專案按右鍵找到屬性設定<br><img src="/blogimage/VSTS/14.jpg" width="500"></p>
<p>針對整個專案設定部分，會多出一個<code>Package</code>頁簽，會發現填入的資訊跟<code>.nuspec</code>檔案內容是大同小異，只是這邊已經被限定好欄位了，上面有兩個需要打勾的，基本上是不需要去勾選<br><img src="/blogimage/VSTS/15.jpg" width="700"></p>
<h2 id="VSTS-Build設定"><a href="#VSTS-Build設定" class="headerlink" title="VSTS Build設定"></a>VSTS Build設定</h2><hr>
<p>在Build設定中，基本的完整流程如下:<br><img src="/blogimage/VSTS/16.jpg" width="600"></p>
<h4 id="Nuget-Restore"><a href="#Nuget-Restore" class="headerlink" title="Nuget Restore"></a>Nuget Restore</h4><p>在Nuget Task，要注意的就是它的Task Version，記得一定要選到最新版本，若是有<code>Nuget.config</code>檔案，也記得要放上去</p>
<img src="/blogimage/VSTS/17.jpg" width="500">
<h4 id="donet-Build"><a href="#donet-Build" class="headerlink" title="donet Build"></a>donet Build</h4><p>donet Task這裡如果只是單純Build .Net Core專案倒是不需要注意Task版本，但是，如果要封裝Package，記得選到最新版本，目前版本最新是<code>2 Preview</code>，因為在最新版本才會有<code>Pack</code>的指令，這裡的<code>Path to project</code>專案路徑，不能用選的，必須要用手敲入，記得不能打錯路徑，不然會失敗<br><img src="/blogimage/VSTS/18.jpg" width="500"></p>
<h4 id="donet-pack"><a href="#donet-pack" class="headerlink" title="donet pack"></a>donet pack</h4><p>重頭戲是在這邊，搞定這個搞超久，再提一次，記得選到最新版本，不然會找不到<code>Pack</code>指令</p>
<img src="/blogimage/VSTS/19.jpg" width="500">
<p>此外，這邊有一個小坑，就是在<code>Path to csproj or nuspec file(s) to pack</code>提到可以使用<code>.nuspec</code>檔案作為Package的資訊檔案，但是，當我指定<code>.nuspec</code>檔案時候，就會出現不支援<package>標籤，不知道這是preview造成還是其他問題，唯一可以確定是<code>.nuspec</code>檔案格式是沒問題的，所以，就指定<code>.csproj</code>，前面有提到，在.Net Core已經可以把封裝資訊放入專案檔，用處就是在這裡要被使用的。此外，我喜歡用Buil Number來作為Package版本號，也在<code>Automatic package versioning</code>中選用使用<code>環境變數</code>作為版號，而環境變數就是使用<code>Build.BuildNumber</code></package></p>
<p>另一個要提醒的是這邊先不要把<code>Do Not Build</code>打勾，話說前面不是已經有Build過嗎?因該不需要再Build，這裡的Build主要是要做封裝用，所以還是必須要Build一次。</p>
<p>到這裡基本上就大功告成，後面兩個Task，主要是把封裝檔案上傳到發布區域，等待後面的發行</p>
<h2 id="VSTS-Release"><a href="#VSTS-Release" class="headerlink" title="VSTS Release"></a>VSTS Release</h2><hr>
<p>到這裡只需要用一個Task就可以進行發佈到團隊的Packages中<br><img src="/blogimage/VSTS/20.jpg" width="700"></p>
<p>只要選擇Nuget Publish，把相關資訊田入就可以，唯一要注意是要選擇4.0版本的Nuget指令<br><img src="/blogimage/VSTS/21.jpg" width="600"></p>
<p>以上就能完成在VSTS針對.Net Core的CI / CD 了，有一些眉眉角角必須多踏過，不然還真的跑不出來，所以，不管是.Net Framework或是.Net Core都可以自動化封裝成Nuget Package</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://stackify.com/wp-content/uploads/2017/03/dotnetwidowsserv-793x397.jpg&quot;&gt;
&lt;p&gt;我們知道使用VSTS中的Packages Manager可以建立企業或是私有的Nuget Ser
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>VSTS新版Agent要多.proxy設定檔</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/10/03/Devops/VSTSAgent2/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/10/03/Devops/VSTSAgent2/</id>
    <published>2017-10-02T16:00:00.000Z</published>
    <updated>2017-10-13T15:14:13.982Z</updated>
    
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-um9fpZrF5hA/U4SCkUT1EuI/AAAAAAAAA08/cy9elvop6XY/s1600/Proxy_Logo3.gif">
<p>在使用VSTS Agent 2.115版本時候，在企業內部使用是沒甚麼問題，不過，最近升級到2.123版後，地端與雲端就失聯，就無法進行連線，到<code>_diag</code>資料查看Log，發現會卡在最後連線驗證地端權限時候，一直發生<code>Timeout</code>然後Agent就發生Exception，導致怎樣都無法與雲端溝通，如果再倒回2.115版又可以連線，真是太神奇</p>
<p>仔細研究一下，因為企業內部必須透過<code>Proxy</code>才能連線，在舊版的Agent，因為會自動去吃在<strong>IE</strong>內的Proxy設定值，所以，沒有問題，但是，到新版的Agent，似乎就不是這樣，它在對外連線，基本上就不走Proxy，直接對外連線，就會導致無法連線，就發生了TimeOut，要解決這個辦法，就是在Agent目錄下新增一個<code>.proxy</code>的檔案，用Powershell執行下列指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo http://proxy server name:80 | Out-File .proxy</div></pre></td></tr></table></figure>
<img src="/blogimage/VSTS/12.png" width="700">
<p>這樣Agent在執行時候，就會透過Proxy連線到外面，如果，你的Proxy需要設定帳號密碼，就必須在環境變數中加入下面資訊</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$env:VSTS_HTTP_PROXY_USERNAME = &quot;proxyuser&quot; </div><div class="line">$env:VSTS_HTTP_PROXY_PASSWORD = &quot;proxypassword&quot;</div></pre></td></tr></table></figure>
<p>就可以解決了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://4.bp.blogspot.com/-um9fpZrF5hA/U4SCkUT1EuI/AAAAAAAAA08/cy9elvop6XY/s1600/Proxy_Logo3.gif&quot;&gt;
&lt;p&gt;在使用VSTS Agent 2.115版本時候，在企業內部
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>讓訪客也加入到你的Microsoft Teams團隊中，但...</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/09/12/Devops/TeamsGuest/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/09/12/Devops/TeamsGuest/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2017-09-13T01:31:11.643Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.devicedaily.com/wp-content/uploads/2016/05/3058781-poster-p-1-five-ways-to-keep-small-teams-efficient.jpg">
<p>Microsoft Teams一個值得高興的更新，就是Microsoft Teams可以支援外部訪客加入Teams團隊中了，原先，要使用Teams的成員，必須具備O365帳號且還必須同一個組織或是公司下的O365帳號才可以一起使用Teams，現在這些非原本在同個組織下的O365帳號或，都會被當作訪客登入到Teams，首先，先來看用訪客身分登入後，訪客會具備那些權限<br><img src="/blogimage/MicrosoftTeamsFile/20.jpg" width="600"></p>
<p>不過，雖然可以邀請訪客登入，但是，這邊有一個前提就是邀請者本身必須是O365管理員或是該群組的管理員，可以邀請訪客登入。不然，無法邀請訪客的加入。現在只是讓帳號本身是其他O365才可以，未來據說可以連Windows live ID也可以用</p>
<h2 id="Office-365設定"><a href="#Office-365設定" class="headerlink" title="Office 365設定"></a>Office 365設定</h2><hr>
<p>Microsoft Teams預設沒有開放給訪客使用，如果要啟動這功能，必須到Office 365管理者平台去設定Microsoft Teams的功能</p>
<img src="/blogimage/MicrosoftTeamsFile/21.jpg" width="700">
<p>在Teams設定中找到<strong>Settings by user/license type</strong>，找到選項是<code>來賓</code>，從這邊可以看出來，這設定預設是無法被授權給外來訪客的，所以，我們必須要開啟它<br><img src="/blogimage/MicrosoftTeamsFile/22.jpg" width="400"></p>
<p>一旦打開之後，就可以指定的群組中，加入你想要邀請的人的Email，不過，目前這邊設定有一點奇怪，就是先設定好要被邀請方的Mail，就會送邀請信給被邀請方，但是，有時候會消失，必須等被邀請方認證過後，再去加一次才會成功<br><img src="/blogimage/MicrosoftTeamsFile/23.jpg" width="400"></p>
<p>這時候我們可以在被邀請方的Email看到<em>作為訪客</em>字樣，被邀請方就可以用這Email當作帳號登入Teams了，當然，在O365的使用者管理中，就可以看到這組Mail被歸納到<code>來賓使用者</code>了</p>
<h2 id="被邀請方"><a href="#被邀請方" class="headerlink" title="被邀請方"></a>被邀請方</h2><hr>
<p>訪客部分，不要以為對方把你邀請加入Teams後，就可以直接打開Teams，輸入Email就可以登入唷。這樣會收到你沒有權限登入的畫面，必須先到你收到邀請的那封Email中，點擊裡面的連結<br><img src="/blogimage/MicrosoftTeamsFile/24.jpg" width="500"></p>
<p>就會開啟Teams網頁版，第一次登入時候，會要求你建立你的登入密碼。這些手續完成後，才可以進入到Microsoft Teams。另外，作為訪客身分登入是無法改動自己暱稱的。</p>
<p>現階段測試不知道是哪邊權限整合上問題，基本上無論使用Desktop程式登入或是透過<code>https://teams.microsoft.com</code>網站登入都會收到下面訊息<br><img src="/blogimage/MicrosoftTeamsFile/25.jpg" width="600"></p>
<p>但是透過邀請信的link就可以登入，我想邀請信中連結中的變數因該是會把資訊帶入到登入認證中，但是，目前Desktop程式這部分似乎還有問題，沒有辦法很順利登入</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://www.devicedaily.com/wp-content/uploads/2016/05/3058781-poster-p-1-five-ways-to-keep-small-teams-efficient.jpg&quot;&gt;
&lt;p&gt;Microso
    
    </summary>
    
      <category term="Microsoft Teams" scheme="http://edwardkuo.imas.tw/categories/Microsoft-Teams/"/>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>解決json檔案放在Azure Storage導致發生CORS</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/09/08/Azure/StorageCORS/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/09/08/Azure/StorageCORS/</id>
    <published>2017-09-07T16:00:00.000Z</published>
    <updated>2017-09-08T01:04:04.404Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.visualstudio.com/wp-content/uploads/2017/06/azure_cloud_image.png">
<p>把前端的一些靜態檔案像是<code>css</code>、<code>js</code>…之類的放到Azure Storage，然後，讓網站去參照Storage路徑下載靜態檔案，基本上這樣並無太大問題，不過，做多國語系時候，使用到<code>i18n</code>這個套件，裡面會利用<code>translation.json</code>檔案做多國語系，誰知道這樣使用下卻發生了這個錯誤訊息</p>
<blockquote>
<p> CORS not enabled or no matching rule found for this request</p>
</blockquote>
<p>通常遇到這問題，我們會去<code>web.config</code>去設定CORS的屬性，來避開這錯誤，不過，針對這個檔案似乎無效，它依然出現這樣錯誤資訊</p>
<img src="/blogimage/Azure/25.jpg" width="700">
<p>因此，發現在Storage有一個設定，叫做<code>CORS</code>，看名字就知道顧名思義，因該是針對CORS進行處理，進入這個設定功能後，我們只要設定好CORS規範，基本上就可以解決CORS問題(基本上因該是連Web.config都可以不用設定)<br><img src="/blogimage/Azure/26.jpg" width="400"></p>
<h2 id="設定CORS-Rule"><a href="#設定CORS-Rule" class="headerlink" title="設定CORS Rule"></a>設定CORS Rule</h2><hr>
<p>設定這規範其實很簡單的，它是針對每個Host Name去做設定，只要按下Add，就可以看到旁邊設定畫面<br><img src="/blogimage/Azure/27.jpg" width="700"></p>
<p>看到這畫面要怎樣設定呢，其實最簡單方法就是利用<code>F12</code>取得原本失敗檔案的Header資訊，分別填入就可以，參考資訊如下圖藍色框的欄位<br><img src="/blogimage/Azure/28.jpg" width="500"></p>
<ul>
<li>Allowed Origins=Origin</li>
<li>Allowed Verbs=Access-Control-Request-Method</li>
<li>Allowed Headers=x-requested-with</li>
<li>Exposed Headers=x-requested-with</li>
</ul>
<p>透過以上對應關係，只要把資訊放入就可以，若是要更進階一點，針對<strong>Allowed Header</strong> &amp; <strong>Exposed Headers</strong>，若是要包括更多的資訊，可以用星號省略後面的資訊，只要符合前面字樣就可以，設定會像是這樣<code>x-requested*</code>，只要是<code>x-requested</code>開頭的，都是符合這規則。</p>
<p>這樣設定完畢後，就輕鬆解決CORS問題了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://www.visualstudio.com/wp-content/uploads/2017/06/azure_cloud_image.png&quot;&gt;
&lt;p&gt;把前端的一些靜態檔案像是&lt;code&gt;css&lt;/code&gt;、&lt;code&gt;js&lt;/code&gt;…之類
    
    </summary>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>解決註冊VSTS的npm平台無法下載npmjs.com套件</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/09/02/Devops/VSTSNPM2/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/09/02/Devops/VSTSNPM2/</id>
    <published>2017-09-01T16:00:00.000Z</published>
    <updated>2017-09-02T15:40:55.953Z</updated>
    
    <content type="html"><![CDATA[<img src="https://partners.npmjs.com/weekly/weekly32/weekly-header-grace-hopper.png">
<p>在前一篇的<strong>[<a href="http://edwardkuo.imas.tw/paper/2017/08/09/Devops/VSTSNpm/">在VSTS中建立npm套件管理平台</a>]</strong>介紹說可以在VSTS內建立<code>NPM</code>套件平台，因為，VSTS建立的NPM套件管理平台是屬於私人的，所以，會有註冊憑證的動作，不過，這樣做下去之後，卻發生一個問題，如果今日我們是要從原本NPM官網下載套件，就會發生這樣錯誤<br><img src="/blogimage/VSTSnpm/8.jpg" width="700"></p>
<p>其實這錯誤就是因為在.npmrc設定檔中註冊是VSTS NPM套件路徑，而原本NPM平台上套件又不在VSTS，導致會發生失敗，如果不是上面錯誤，也會發生找不到Package路徑問題。要解決這問題，可以去開啟VSTS Package中的<code>Upstream sources</code>功能，下圖這個要把它Enable起來<br><img src="/blogimage/VSTSnpm/9.jpg" width="700"></p>
<p>它的原理其實就是安裝時候，會先到VSTS Package裡面去找是否有符合你要安裝的Package，如果沒有，就會自動往<code>npmjs.com</code>再去找<br><img src="/blogimage/VSTSnpm/10.jpg" width="500"></p>
<p>這樣就可以安裝好在<code>npmjs.com</code>上面的套件了，這時候，會發現在VSTS的NPM套件平台上可以看到團隊套件有來自<code>npmjs.com</code>的都會被Cache在這上面<br><img src="/blogimage/VSTSnpm/11.jpg" width="700"></p>
<p>如果擔心找不到自己建立的Source，可以透過filter去搜尋<code>this feed</code>，就可以找到自記建立的套件列表</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://partners.npmjs.com/weekly/weekly32/weekly-header-grace-hopper.png&quot;&gt;
&lt;p&gt;在前一篇的&lt;strong&gt;[&lt;a href=&quot;http://edwardkuo.imas.tw/pap
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>用Chocolatey安裝Docker CLI</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/08/11/Docker/DockerCLI/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/08/11/Docker/DockerCLI/</id>
    <published>2017-08-11T14:59:31.000Z</published>
    <updated>2017-08-11T15:26:06.542Z</updated>
    
    <content type="html"><![CDATA[<img src="https://store.docker.com/dist/fde255842a0008cf599d244e3a63a1f7.png">
<p>一般想要在個人電腦或是Windows Server 2016玩Docker，前者可以安裝Docker for Windows，後者啟用Window Server的Container，這樣就可以開始使用Docker指令，不過，今日只是想在某台電腦透過<code>Docker -H</code>去執行Remote具有Container的機器，是否還需要完整安裝上述所提的功能才能使用Docker Command呢?</p>
<p>答案是可以不需要在電腦上安裝Docker for Windows或是啟用Container，就可以執行Docker了，只需要安裝Docker CLI就可以。Docker CLI網路上版本還不少，但我目前使用<strong>Chocolatey</strong> Package Manager來安裝Docker CLI，感覺上還不錯，且安裝又方便簡單</p>
<p>1.首先用PowerShell來安裝Chocolatey，PowerShell需要用Admin執行<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iex ((<span class="built_in">new-object</span> net.webclient).DownloadString(<span class="string">'https://chocolatey.org/install.ps1'</span>))</div></pre></td></tr></table></figure></p>
<p>2.安裝好Chocolatey，就透過它幫我們安裝docker CLI吧，通常這個步驟也是使用Powershell執行，不過，我發現執行後會卡住，改用Command Line就沒問題，如果有問題可以改用<code>cmd</code>試試看<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">choco install docker</div></pre></td></tr></table></figure></p>
<p>因為目的是想要透過本身的機器去操作遠端的Docker，所以，前提必須記得去改遠端Docker的<code>daemon.json</code>檔案，要加入下面這行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hosts"</span>: [<span class="string">"tcp://0.0.0.0:2375"</span>, <span class="string">"npipe://"</span>]</div></pre></td></tr></table></figure></p>
<p>這行目的主要是說我們可以透過Port<code>2375</code>進行連線，當然雙邊的防火牆記得要開啟Port<code>2375</code><br>3.完畢後就下達重啟動指令就可以<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Restart-Service</span> docker</div></pre></td></tr></table></figure></p>
<p>這樣就可以讓這台機器具有Docker指令了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://store.docker.com/dist/fde255842a0008cf599d244e3a63a1f7.png&quot;&gt;
&lt;p&gt;一般想要在個人電腦或是Windows Server 2016玩Docker，前者可以安裝Docker for Win
    
    </summary>
    
    
      <category term="Docker" scheme="http://edwardkuo.imas.tw/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>在VSTS中建立npm套件管理平台</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/08/10/Devops/VSTSNpm/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/08/10/Devops/VSTSNpm/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2017-09-02T12:14:23.279Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cs.fit.edu/code/projects/nothing_works/repository/revisions/b488be127a8cf1e59eb257db3f8eaf6efdb0f275/entry/deps/npm/html/npm-large.png">
<p>在之前有介紹透過VSTS的<code>Packages</code>可以自建團隊的Nuget套件管理平台，在<code>Packages</code>中不只是可以建立Nuget套件的管理平台，如果，今日是前端人員或是非.NET人員，想要用<code>npm</code>指令來裝前端套件，VSTS是否可以做<code>npm</code>套件的管理平台呢?答案是可以，VSTS的Packages同時支援<strong>Nuget</strong>和<strong>npm</strong>套件管理，就讓我們來建立一個npm packages管理平台吧。</p>
<h2 id="自動化建立npm-package"><a href="#自動化建立npm-package" class="headerlink" title="自動化建立npm package"></a>自動化建立npm package</h2><hr>
<p>在VSTS的Feed本身就同時支援Nuget和npm，換句話說可以在同一個Feed URL同時存在兩種套件管理，不過，並不建議這樣混合使用，畢竟這樣使用會造成套件本身管理的混亂。還是建議把兩種不同屬性的Package分別建立不同的Feed。要建立Feed只需要選擇建立就可以，很簡單的<br><img src="/blogimage/VSTSnpm/1.jpg" width="500"></p>
<p>只需要填入Feed名稱就可以建立成功，建立成功後去點選<em>Connect to Feed</em>，可以看到裡面有<strong>Nuget</strong>和<strong>npm</strong>兩種設定方式<br><img src="/blogimage/VSTSnpm/2.jpg" width="600"></p>
<p>透過VSTS自動化建置npm package的流程比建置Nuget package簡單許多了，今日若是要透過VSTS自動化建置，上圖中的設定可以暫時不需要管它，後續如果是在Clinet進行，則必須要做一些相關設定才有辦法，先來說講最簡單的，使用VSTS建置npm package。</p>
<p>因為npm主要是封裝前端的元件，基本上都不太需要做到編譯的動作，當然如果今天是用<code>SCSS</code>需要編譯成<code>CSS</code>才給人家用，這樣就需要增加編譯動作，不然，只要將整個專案進行封裝就可以。在封裝的前提必須在專案檔加入<code>package.json</code>檔案，這檔案主要是針對Package做說明，與<code>Package.config</code>有異曲同工之妙</p>
<p>關於<code>package.json</code>說明</p>
<blockquote>
<p>The most important things in your package.json are the name and version fields. Those are actually required, and your package won’t install without them. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version.</p>
</blockquote>
<p>關於<code>package.json</code>格式，可以透過<code>npm init</code>建立<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"my_package"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"repository"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/ashleygwilliams/my_package.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"bugs"</span>: &#123;</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/ashleygwilliams/my_package/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/ashleygwilliams/my_package"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有了這檔案，只需要去VSTS進行設定就可以，因為，沒有Build的動作，基本上在VSTS Build就等於Release了。所以，這邊只需要添加一個<code>npm</code> Task即可<br><img src="/blogimage/VSTSnpm/3.jpg" width="600"></p>
<h2 id="設定npm-Task"><a href="#設定npm-Task" class="headerlink" title="設定npm Task"></a>設定npm Task</h2><hr>
<p>建立好Task後，就是把相關設定設定完畢就可以<br><img src="/blogimage/VSTSnpm/4.jpg" width="600"></p>
<ul>
<li>Command : 可以選擇<code>install</code>,<code>publish</code>和<code>Custom</code>，這邊選擇<code>publish</code></li>
<li>Working folder with package.json : 如果<code>package.json</code>在Root就不用填寫，不然就選擇該檔案所在的資料夾</li>
<li>Registry location : 註冊你的npm package在哪個地方，如果是在VSTS內，則選用<code>Registry I Select here</code>，一但選用這個，下面的<code>target</code>就可以選擇在你VSTS上面的Feed URL了</li>
</ul>
<p>以上屬性設定完成後，就可以讓她自動化去封裝了，同時也會自動化佈署到我們自己的Feed內，建置完成後就可以看到Feed那邊多出了npm package了<br><img src="/blogimage/VSTSnpm/5.jpg" width="600"><br>另外，如果每次要佈署時候，沒有去更改<code>package.json</code>中的version號碼，會發生佈署失敗，主要原因是它不會去覆蓋原本舊版本，必須要進版才可以，不然會發生錯誤，如果不想這樣麻煩，也可以使用<code>Version Assemblies</code>套件做自動化進版<br><img src="/blogimage/VSTSnpm/6.jpg" width="7" height="00"></p>
<h2 id="安裝VSTS中的npm-package"><a href="#安裝VSTS中的npm-package" class="headerlink" title="安裝VSTS中的npm package"></a>安裝VSTS中的npm package</h2><hr>
<p>既然我們已經可以用npm封裝好了，再來就是要能去使用它，因為，VSTS上的是屬於私人或是團隊的，並不像<code>npm</code>網站一樣是被公開可以用。所以，這邊我們需要增加一些設定才可以抓取VSTS上的npm，不然直接下<code>npm install xxxx</code>是沒有用的，主要是要把VSTS Auth驗證資訊會透過<code>.npmrc</code>內資訊被設定在專案中</p>
<blockquote>
<p>.npmrc : npm gets its config settings from the command line, environment variables, and npmrc files.</p>
</blockquote>
<p>預設你可能沒有<code>vsts-npm-auth</code>套件，所以，需透過npm安裝這個套件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g vsts-npm-auth --registry https://registry.npmjs.com --always-auth false</div></pre></td></tr></table></figure></p>
<p>然後，在專案手動加入空白的<code>.npmrc</code>檔案，目前還不知道怎樣自動加入此檔案，有了這個檔案後，根據本文上面第二張圖，有一段<strong>Add this feed to your project .npmrc</strong>，把裡面的資訊<code>registry=XXX</code>放入.npmrc檔案中。到了這一步完成後，就可以執行下面語法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vsts-npm-auth -config .npmrc</div></pre></td></tr></table></figure></p>
<p>成功後會得到下面訊息</p>
<blockquote>
<p>Getting new credentials for source:<a href="https://XXXXXXregistry/" target="_blank" rel="external">https://XXXXXXregistry/</a>, scope:vso.packaging_write vso.drop_write</p>
</blockquote>
<p>如果在Visual Studio中想要安裝VSTS上面的npm的套件，可以用<em>package manager console</em>工具或是安裝*Flatten Packages`工具，協助我們安裝npm套件，如果使用Visual Studio Code就更簡單了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cs.fit.edu/code/projects/nothing_works/repository/revisions/b488be127a8cf1e59eb257db3f8eaf6efdb0f275/entry/deps/npm/html/n
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>Application Insights自訂過濾收集的訊息內容</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/08/07/Azure/ApplicationInsightsFilter/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/08/07/Azure/ApplicationInsightsFilter/</id>
    <published>2017-08-06T16:00:00.000Z</published>
    <updated>2017-08-07T12:23:13.642Z</updated>
    
    <content type="html"><![CDATA[<img src="https://blogmedia.avanade.com/avanade-insights/2017/04/Mapping-Digital-Workplace-Insights-to-Business-Value-Context.jpg">
<p>Application Insights越做越強大，基本上程式內部怎樣運作，Application Insights都可以蒐集到相關資訊，不過，有時候這樣會帶來一種困惱就是在某些情境下的資訊，並不想被蒐集到Application Insights內進行分析，因為有可能造成分析錯誤或是統計資訊的誤差，舉例來說，目前發現如果在IIS中針對Web Site設定<code>Preload</code>功能，在Application Insights就會多一筆Request，帶出來的資訊是<code>localhost/XXX</code>，這樣資訊對目前數據分析並不重要，但是，又會被多記一筆Request的Count。</p>
<p>因此，像這種資訊就會希望不要被記錄到Application Insights中，目前，在Application Insights的Portal中似乎不能設定過濾訊息，所以，就必須從程式面著手</p>
<h2 id="自訂Filter"><a href="#自訂Filter" class="headerlink" title="自訂Filter"></a>自訂Filter</h2><hr>
<p>從程式面就是需要自己訂定Filter功能，首先自己建立一個叫做<code>TelemetryFilter</code>的Class，並繼承<code>ITelemetryProcessor</code>，從官方解釋<code>ITelemetryProcessor</code>為</p>
<blockquote>
<p>讓您更直接地控制包含在遙測串流中或排除於遙測串流外的內容</p>
</blockquote>
<p>所以，透過它可以獲取要送到Application Insights的檢測資訊，進而做一些篩檢或是變更等動作，繼承<code>ITelemetryProcessor</code>會變成如下<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">ITelemetry item</span>)</span></div><div class="line">&#123;</div><div class="line"> ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在這個Process中，針對遙測資訊進行處理，以剛剛案例來說，希望排除到<code>http://localhost/XXX</code>資訊。就可以在這處理器這樣寫<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">ITelemetry item</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> request = item <span class="keyword">as</span> RequestTelemetry;</div><div class="line">    <span class="keyword">if</span> (request != <span class="literal">null</span> &amp;&amp; request.Url != <span class="literal">null</span> &amp;&amp;</div><div class="line">        request.Url.Host.IndexOf(<span class="string">"localhost"</span>, StringComparison.InvariantCultureIgnoreCase) &gt;= <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>._next.Process(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>把Item轉型為Request Type，並抓取資料中的<code>Url</code>進行過濾。如果，有符合過濾條件的，就拋棄掉這個訊息不做上報的動作，如果不是，則透過<code>Process</code>處理收集的資訊項目。完整的寫法如下<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TelemetryFilter</span> : <span class="title">ITelemetryProcessor</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ITelemetryProcessor _next;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TelemetryFilter</span>(<span class="params">ITelemetryProcessor next</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>._next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">ITelemetry item</span>)</span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> request = item <span class="keyword">as</span> RequestTelemetry;</div><div class="line">        <span class="keyword">if</span> (request != <span class="literal">null</span> &amp;&amp; request.Url != <span class="literal">null</span> &amp;&amp;</div><div class="line">            request.Url.Host.IndexOf(<span class="string">"localhost"</span>, StringComparison.InvariantCultureIgnoreCase) &gt;= <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">this</span>._next.Process(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有這樣方式，想要過濾甚麼就可自己去定義了</p>
<h2 id="註冊過濾器"><a href="#註冊過濾器" class="headerlink" title="註冊過濾器"></a>註冊過濾器</h2><hr>
<p>開發完畢後，還必須把過濾器註冊，這樣才有辦法當Application Insights啟動後，自動掛載這個過濾器。要註冊過濾器，只要在<code>ApplicationInsights.config</code>中設定就可以<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TelemetryProcessors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Add</span> <span class="attr">Type</span>=<span class="string">"WebApplication1.ApplicationInsights.TelemetryFilter, WebApplication1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">TelemetryProcessors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>這樣就可以一個簡單的Application Insights資訊過濾器就可以運作，簡單說，這個就是AP &amp; Application Insights訊息的中繼站，所有資訊都會先到這邊再往Azure送，換句話說要在這邊做置換資訊動作也是可以的</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://blogmedia.avanade.com/avanade-insights/2017/04/Mapping-Digital-Workplace-Insights-to-Business-Value-Context.jpg&quot;&gt;
&lt;p&gt;Appli
    
    </summary>
    
      <category term="Azure Application Insights" scheme="http://edwardkuo.imas.tw/categories/Azure-Application-Insights/"/>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>2017 第12屆 五金杯 中國五金產品工業設計大賽徵集</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/08/06/LifeStyle/Chinadesign/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/08/06/LifeStyle/Chinadesign/</id>
    <published>2017-08-05T16:00:00.000Z</published>
    <updated>2017-08-06T15:16:39.031Z</updated>
    
    <content type="html"><![CDATA[<img src="/blogimage/WeChat.jpg">
<p>2015年有幸到中國參加此大會評審，發現雖然名為五金產品比賽，當時不乏有些不錯的<strong>IoT</strong>產品出線，不過那時候只限於中國內作品參賽，這次也可以有台灣作品參賽，工業設計高手可以去挑戰看看</p>
<h2 id="何謂五金杯大賽"><a href="#何謂五金杯大賽" class="headerlink" title="何謂五金杯大賽"></a>何謂五金杯大賽</h2><hr>
<p>“五金杯”中國五金產品工業設計大賽自2006年創辦以來已成功舉辦11屆，大賽在各主辦單位和協作單位的支持下，歷屆參賽作品的數量和質量都在不斷的進步。大賽以創新和務實的特點和國內外知名的專家評委陣容，吸引了全國幾十所高校、幾十家設計公司以及眾多獨立設計師的參與和支持。為了繼續提高五金產品創新設計能力，展現產品創新的新思路、新概念、新主張</p>
<p>詳細內容網址 :<a href="http://www.ykwjdesign.com/notice/3387.html&#39;" target="_blank" rel="external">http://www.ykwjdesign.com/notice/3387.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blogimage/WeChat.jpg&quot;&gt;
&lt;p&gt;2015年有幸到中國參加此大會評審，發現雖然名為五金產品比賽，當時不乏有些不錯的&lt;strong&gt;IoT&lt;/strong&gt;產品出線，不過那時候只限於中國內作品參賽，這次也可以有台灣作品參賽，工業設計高手可以去
    
    </summary>
    
    
      <category term="LifeStyle" scheme="http://edwardkuo.imas.tw/tags/LifeStyle/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Center讓App有自動更新功能</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/07/25/Devops/MCin-apps/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/07/25/Devops/MCin-apps/</id>
    <published>2017-07-24T16:00:00.000Z</published>
    <updated>2017-07-25T11:35:58.355Z</updated>
    
    <content type="html"><![CDATA[<img src="https://adtmag.com/articles/2017/04/14/~/media/ECG/adtmag/Images/2017/03/mobile_center.png">
<p>微軟在Mobile的解決方案，原先是建構Hockey App上面，不過，從今年五月開始就慢慢轉移到<code>Mobile Center</code>上面，無論是<code>Build</code>還是<code>Test</code>，甚至到發布，都可以透過Mobile Center幫忙完成，先前的一篇文章[<a href="http://edwardkuo.imas.tw/paper/2017/05/23/Devops/MobileCenter/">VSTS 整合Visual Studio Mobile Center </a>]中有介紹把VSTS的Repositories與Mobile Center結合，現在<code>Mobile Center</code>的SDK除了原本的收集Crash Report和Analytics外，還可以讓你的APP自動檢查Mobile Center上面是否有新的版本，如果有新版本則是跳出下載提示，讓使用者可以直接更新App</p>
<p>在先前的Mobile Center有新版本發布時候，只能透過Mail通知用戶，還必須讓用戶點擊Mail中的連結後，再登入Portal去下載新版的App，整個體驗就很不好，也不夠直覺</p>
<h2 id="使用In-app-update前提"><a href="#使用In-app-update前提" class="headerlink" title="使用In-app update前提"></a>使用In-app update前提</h2><hr>
<p>在自己App加入In-app update功能前，有幾個前提必須先知道，不然，就算把Code加入，也不會有動作</p>
<ul>
<li>第一次下載APP，須用通知Mail內的連結下載，不能直接用Group的Public URL下載APP<img src="/blogimage/MobileCenter/15.jpg" width="600"></li>
<li>Build的Configuration必須是<code>Release</code>，不然不會有做用</li>
<li>每次更新必須手動把<code>CFBundleShortVersionString</code>和<code>CFBundleVersion</code>版本號更新</li>
<li>一定要透過Mobile Center的Distribute安裝APP</li>
</ul>
<h2 id="加入In-app-update-SDK"><a href="#加入In-app-update-SDK" class="headerlink" title="加入In-app update SDK"></a>加入In-app update SDK</h2><hr>
<p>加入Mobile Center的Distribution SDK到程式中，以下使用的範例為<code>Xamarin.Form</code>，找到<code>Microsoft.Azure.Mobile.Distribute</code>並安裝<br><img src="/blogimage/MobileCenter/16.jpg" width="600"></p>
<p>安裝好之後，可以在Mobile Center要發布App的<code>Get Started</code>或是<code>Setting</code>地方找到App Secret<br><img src="/blogimage/MobileCenter/17.jpg" width="600"></p>
<p>準備好以上條件後，先到<code>App.Xml.cs</code>的<code>OnStart()</code>加入啟動In-app update，在這邊可以發現，同時有加入<code>typeof(Analytics)</code> &amp; <code>typeof(Crashes)</code>和<code>typeof(Distribute)</code>，表示同時啟用<code>收集Crash</code> &amp; <code>資料分析</code>和<code>In-app update</code>功能，因為這三個功能都是共用同一個App Secret</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> AppRelease</span></div><div class="line">    Distribute.ReleaseAvailable = OnReleaseAvailable;</div><div class="line">    MobileCenter.Start(<span class="string">$"ios=<span class="subst">&#123;ConfigurationManager.AppSettings[<span class="string">"MobileCenterAppSecret"</span>]&#125;</span>;"</span>,</div><div class="line">              <span class="keyword">typeof</span>(Analytics), <span class="keyword">typeof</span>(Crashes), <span class="keyword">typeof</span>(Distribute));</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>裡面有一行是<code>Distribute.ReleaseAvailable</code>，這是自訂當有APP版本更新時候，會跳出的提示訊息，基本上，如果不做，預設因該還是會有提示方塊，不過，測試一陣子似乎還是不會出現提示訊息，導致沒有辦法更新APP，因此，如果是自訂一個提示訊息就可以進行App更新。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">OnReleaseAvailable</span>(<span class="params">ReleaseDetails releaseDetails</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">string</span> versionName = releaseDetails.ShortVersion;</div><div class="line">    <span class="keyword">string</span> versionCodeOrBuildNumber = releaseDetails.Version;</div><div class="line">    <span class="keyword">string</span> releaseNotes = releaseDetails.ReleaseNotes;</div><div class="line">    Uri releaseNotesUrl = releaseDetails.ReleaseNotesUrl;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> title = <span class="string">"Version "</span> + versionName + <span class="string">" available!"</span>;</div><div class="line">    Task answer;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (releaseDetails.MandatoryUpdate)</div><div class="line">    &#123;</div><div class="line">        answer = Current.MainPage.DisplayAlert(title, releaseNotes, <span class="string">"Update Version"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        answer = Current.MainPage.DisplayAlert(title, releaseNotes, <span class="string">"Update Version"</span>, <span class="string">"Next Time"</span>);</div><div class="line">    &#125;</div><div class="line">    answer.ContinueWith((task) =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (releaseDetails.MandatoryUpdate || (task <span class="keyword">as</span> Task&lt;<span class="keyword">bool</span>&gt;).Result)</div><div class="line">        &#123;</div><div class="line">            Distribute.NotifyUpdateAction(UpdateAction.Update);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            Distribute.NotifyUpdateAction(UpdateAction.Postpone);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改好這邊後，還必須到Xamarin.app.ios的<code>AppDelegate.cs</code>加入app啟動時候就檢查版本功能，不管程式怎樣寫檢查更新的程式一定不能在<code>LoadApplication(new App())</code>之前，不過呢，又經過一番測試後，發現把這一行放在<code>Xamarin.Forms.Forms.Init()</code>之後是最穩的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public override bool FinishedLaunching(UIApplication app, NSDictionary options)</div><div class="line">&#123;</div><div class="line">  global::Xamarin.Forms.Forms.Init();</div><div class="line">#if AppRelease</div><div class="line">   //檢查有無更新版本</div><div class="line">   Distribute.DontCheckForUpdatesInDebug();</div><div class="line">#endif</div><div class="line">  LoadApplication(new App());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，還必須到<code>info.plist</code>加入一個屬性，不過，因為在iOS中，測試App和Release的App是無法共用同一個<code>Bundle Identifier</code>，就如之前所說，Mobile Center中的Build Task是Mobile Center做好的，我們並無法在裡面做其他更改設定，這也導致無法在自動化時候去更新Bundle Identifier Name，所以，必須額外做一個Release用的plist檔案，讓在Release Build時候，置換原本的<code>info.plist</code>。因此，加入一個叫做<code>InfoRelease.plist</code>的檔案，並在這檔案中加入CFBundleURLTypes，這邊須至換掉裡面的<code>{App secret}</code>，其值是跟<code>ConfigurationManager.AppSettings[&quot;MobileCenterAppSecret&quot;]}</code>相同的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>1.1.4<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">//加入下面內容</div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>mobilecenter-&#123;App Secret&#125;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>到這一步，基本上就已經讓App有了In-app update功能，剩下就是要把InfoRelease.plist置換成info.plist。</p>
<h2 id="置換info-plist"><a href="#置換info-plist" class="headerlink" title="置換info.plist"></a>置換info.plist</h2><hr>
<p>做到這一點，就只能在專案檔中加入以下設定，先在Xamarin.App.ios的專案檔找到<code>Info.plist</code>關鍵字，基本上未修改前是這樣<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">None</span> <span class="attr">Include</span>=<span class="string">"Info.plist"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改後為這樣<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">None</span> <span class="attr">Include</span>=<span class="string">"Info.plist"</span> <span class="attr">Condition</span>=<span class="string">"'$(Configuration)' != 'Release'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">SubType</span>&gt;</span>Designer<span class="tag">&lt;/<span class="name">SubType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">None</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">None</span> <span class="attr">Include</span>=<span class="string">"InfoRelease.plist"</span> <span class="attr">Condition</span>=<span class="string">"'$(Configuration)' == 'Release'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">LogicalName</span>&gt;</span>Info.plist<span class="tag">&lt;/<span class="name">LogicalName</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">SubType</span>&gt;</span>Designer<span class="tag">&lt;/<span class="name">SubType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">None</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>這樣就可以在Release時候，將Release階段需要的資訊轉換成Info.plist給iOS App用了</p>
<p>確定功能沒問題話，在第一次安裝App後，會跳出一個網頁畫面，內容會有一段是<code>Enable in-app Update</code>，有這一段話，基本這個App就具有自動更新的機制了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://adtmag.com/articles/2017/04/14/~/media/ECG/adtmag/Images/2017/03/mobile_center.png&quot;&gt;
&lt;p&gt;微軟在Mobile的解決方案，原先是建構Hockey App上面，不
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Windows Server 2016 Containers初體驗</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/07/21/Docker/DockerCon/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/07/21/Docker/DockerCon/</id>
    <published>2017-07-21T14:59:31.000Z</published>
    <updated>2017-08-21T03:31:03.296Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.docker.com/sites/default/files/group_5622_0.png">
<p>當Windows Server 2016開始有支援Containers後，認為只要把Windows Server 2016內的Container服務啟動後，就可以立馬來使用Docker這項技術，殊不知這是錯誤的，因為，這樣做法只是讓Windows Server 2016有了Container功能，但是，要讓它可以用Docker，還必須額外安裝<code>Docker</code>模組才可以有辦法開始使用Docker的技術，而在Windows Server 2016支援的Containers有分成<strong>Windows Server Containers</strong>和<strong>Hyper-V Containers</strong>，下面採用的是<strong>Windows Server Containers</strong>。</p>
<h2 id="安裝Docker"><a href="#安裝Docker" class="headerlink" title="安裝Docker"></a>安裝Docker</h2><hr>
<p>建議在安裝Docker之前，要把Windows Server 2016所有更新檔都必須要更新，才不會有問題，然後，用Admin權限啟動<code>PowerShell</code>，而第一個必須先安裝<code>Docker-Microsoft PackageManagement</code>套件，有了這個套件，才能去安裝Docker的Package</p>
<p>安裝<code>Docker-Microsoft PackageManagement</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Install-Module -Name DockerMsftProvider -Repository PSGallery -Force</div></pre></td></tr></table></figure></p>
<p>安裝Docker Package<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Install-Package -Name docker -ProviderName DockerMsftProvidere</div></pre></td></tr></table></figure></p>
<p>都安裝完畢後，必須重新啟動電腦，讓Docker服務啟動，若是後續想要更新Docker，只要輸入更新指令就可以<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Install-Package -Name Docker -ProviderName DockerMsftProvider -Update -Force</div></pre></td></tr></table></figure></p>
<p>以上三步驟就可以在Windows Server 2016用Docker功能，若不確定是否可以用，只要輸入<code>docker info</code>能查看Docker相關訊息就沒問題了</p>
<h2 id="安裝Docker-Compose"><a href="#安裝Docker-Compose" class="headerlink" title="安裝Docker-Compose"></a>安裝Docker-Compose</h2><hr>
<p>Docker-Compose是讓你可以快速佈署或是啟動Container的設定檔，如果是透過<code>VS.Code</code>去編輯Docker-Compose的yml檔案，必須先在VS.Code內安裝相關Docker-Compose套件，才可以開始編輯，但按照先前作法，已經可以在Windows Server 2016使用Docker，不過，卻沒有Docker-Compose指令，因為，必須額外安裝Docker-Compose套件，才有辦法使用Docker-Compose指令，安裝套件位置[<a href="&#39;https://github.com/docker/compose/releases&#39;">https://github.com/docker/compose/releases</a>]，下載的檔案名稱是會是這樣<code>docker-compose-Windows-x86_64.exe</code>，也可以直接用PowserShell的指令安裝套件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Invoke-WebRequest <span class="string">"https://github.com/docker/compose/releases/download/1.14.0/docker-compose-Windows-x86_64.exe"</span> -UseBasicParsing -OutFile <span class="variable">$Env</span>:ProgramFiles\docker\docker-compose.exe</div></pre></td></tr></table></figure></p>
<p>不過，若公司防火牆關係無法安裝化，就是必須先把檔案下載下來，並且，透過上面指令取代掉原本URL位置改成<code>docker-compose-Windows-x86_64.exe</code>檔案的路徑，就可以安裝了，或是更改檔名為<code>docker-compose</code>後放自訂一個目錄中，只是必須設定系統的Path指定到這個目錄中</p>
<h2 id="製作自己的Docekr-Image"><a href="#製作自己的Docekr-Image" class="headerlink" title="製作自己的Docekr Image"></a>製作自己的Docekr Image</h2><hr>
<p>我們會從Docker Store下載自己所需要的image建立Container，不過，從Store下載來的image只是原始的Source，有時候並不能符合我們實際需求，所以，還會額外把設定加入進去，但是，若是每次從Image建立Container，都還要重複設定一次，也很費工。如果這時候想要每次都直接用自己加工過的image，而不是原始的Source，必須花一點小方法來製作屬於自己的image，在原本Docker指令中，是有支援Export功能，但是，在Windows Server 2016 Containers目前沒有辦法用這個指令。所以，我們必須利用Commit方式進行。</p>
<p>以SQL Server Container為例，我們可以先把Containers建立起來後，並放入自己系統的DB<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it --name SQLTest <span class="_">-d</span> -p 14331:1433 <span class="_">-e</span> sa_password=XXXXX <span class="_">-e</span> ACCEPT_EULA=Y -v c:\DB\:C:\DB\ microsoft/mssql-server-windows-express:2016-sp1</div></pre></td></tr></table></figure></p>
<p>這時候建立的DB Container就不會是原始的Source，且每次啟動DB Container也不想要再還原一次DB到新的Container，這時候要把這個Container變成自己的image，以後只要啟動自己的image就可以</p>
<p>第一就是要先停掉Container，這個Container已經加入自己的DB<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop SQLTest</div></pre></td></tr></table></figure></p>
<p>停掉Container後，用Commit方式建立新的image，這步驟通常會一點點時間<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit Container_ID microsoft/mssql-server-windows-express:SQLTest</div></pre></td></tr></table></figure></p>
<p>如下圖，這樣在image List中，就多出剛剛建立的<em>客製化</em>image source了<br><img src="/blogimage/Docker/5.jpg" width="800"></p>
<p>如果想要把這image搬到其他地方使用呢?一種就是放入registry中，若現實不允許，就只能自己把image匯出檔案囉<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker save -o <span class="string">"c:\image\SQLTest.tar"</span> microsoft/mssql-server-windows-express:SQLTest</div></pre></td></tr></table></figure></p>
<p>通常這一步又要花費更久時間，反之要把檔案匯入，則使用<code>docker load</code>，就可以建立一個自己情境的docker image</p>
<h2 id="讓Remote-Container執行Docker-Compose"><a href="#讓Remote-Container執行Docker-Compose" class="headerlink" title="讓Remote Container執行Docker-Compose"></a>讓Remote Container執行Docker-Compose</h2><hr>
<p>上面執行Docker方式，都是在Windows Server中下達Docker指令，但是，如果要透過另一台VM或是機器去呼叫遠端的VM的Container，必須先做幾個設定，首先，要更改遠端機器的<code>daemon.json</code>檔案，加入下面參數，並重啟Docker(<strong>Restart-Service docker</strong>)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"hosts": ["tcp://0.0.0.0:2375", "npipe://"]</div></pre></td></tr></table></figure></p>
<p>須注意就是遠端機器的防火牆必須要開啟<code>2375</code> Port，然後執行<code>docker -H Remote IP:2375 info</code>，就可以確認是否有通了，到了這部表示遠端機器已經開放Port讓你可以遠距執行Docker指令，接下來就是執行<code>.yml</code>檔案去建立Container，這次案例是建立好一個要啟動SQL Container，在<code>yaml</code>的描述檔的內容如下:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  SQLDB:</span></div><div class="line"><span class="attr">    container_name:</span> SQLTest2016</div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      ACCEPT_EULA:</span> <span class="string">"Y"</span></div><div class="line"><span class="attr">      SA_PASSWORD:</span> <span class="string">"XXXX"</span></div><div class="line"><span class="attr">    image:</span> microsoft/mssql-server-windows-express:SQLTest</div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">14331</span>:<span class="number">1433</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="attr">    - C:</span>\DB\:C:\DB\</div><div class="line"></div><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  default:</span></div><div class="line"><span class="attr">    external:</span></div><div class="line"><span class="attr">      name:</span> nat</div></pre></td></tr></table></figure></p>
<p>通常要執行這個<code>yaml</code>檔案會是放在要執行Container機器上，而這次是要透過自己電腦去啟動遠端的Container，所以，必須把<code>yaml</code>檔案放在自己電腦端，然後透過下面指令執行它<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose -H Remote_IP <span class="_">-f</span> docker-compose.yml up</div></pre></td></tr></table></figure></p>
<p>就可以讓啟動遠端的Container了</p>
<h3 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h3><hr>
<p><a href="https://blog.yowko.com/2017/05/docker-command-in-windows.html" target="_blank" rel="external">https://blog.yowko.com/2017/05/docker-command-in-windows.html</a><br><a href="https://philipzheng.gitbooks.io/docker_practice/content/introduction/what.html" target="_blank" rel="external">https://philipzheng.gitbooks.io/docker_practice/content/introduction/what.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://www.docker.com/sites/default/files/group_5622_0.png&quot;&gt;
&lt;p&gt;當Windows Server 2016開始有支援Containers後，認為只要把Windows Server 2016內的Co
    
    </summary>
    
    
      <category term="Docker" scheme="http://edwardkuo.imas.tw/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>用Azure Conditional Access限制公司以外地區不可以連入VSTS</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/07/14/Devops/VSTSSE/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/07/14/Devops/VSTSSE/</id>
    <published>2017-07-13T16:00:00.000Z</published>
    <updated>2017-07-14T07:04:16.950Z</updated>
    
    <content type="html"><![CDATA[<img src="http://sierraws.com/wp-content/uploads/2013/11/Sierra-Workforce-Solutions-Workplance-Security-AccessControl-e1389048310112.jpg">
<p>就目前微軟以雲端服務為優先情況，VSTS的功能是越來越強大，再加上本身VSTS也可以與地端整合，所以，使用VSTS來做為版控工具是一個不錯選擇，不過，很多人知道好處，但畢竟是雲端服務又會很擔心，如果在公司外部讓公司有心人進入後，把所有程式碼都拿走就慘了，安全性的管理一直想用VSTS的一個。</p>
<p>其實只要透過Azure Conditional Access就可以解決這問題。畢竟，在整個微軟雲端服務中，無論是Office 365或是VSTS都是在Azure上面的一個SaaS服務，換句話說其帳號是在Azure AD中被管理，透過下圖可以知道就可以知道</p>
<img src="/blogimage/Azure/VS1.png" width="700"> 
<p>因此，就來看看Conditional Access機制可以幫忙做到那些事情</p>
<h2 id="進入Azure-Conditional-Access"><a href="#進入Azure-Conditional-Access" class="headerlink" title="進入Azure Conditional Access"></a>進入Azure Conditional Access</h2><hr>
<p>使用VSTS時候，記得要讓Azure與VSTS綁定，可以到<code>Team Services accounts</code>看是否有被綁定進來，此外，還必須注意就是Azure AD的<code>Subscription</code>與VSTS被指定的<code>Subscription</code>是否有相同，如果是沒有多個<code>Subscription</code>基本就不會有問題，不然會發生怎樣設定都無法成功，因為被設定在不同的<code>Subscription</code>上面，如果是從<code>Team Services accounts</code>建立的VSTS問題是最少的</p>
<p>前置作業都確定差不多，就可以去Azure AD的Conditional Access功能<br><img src="/blogimage/Azure/VS2.png" width="500"> </p>
<p>一進去就可以看到Conditional Access說明<br><img src="/blogimage/Azure/VS3.png" width="500"> </p>
<h2 id="開始新增規則"><a href="#開始新增規則" class="headerlink" title="開始新增規則"></a>開始新增規則</h2><hr>
<p>這裡可以設定多個規則，我們來設定一組規則試試看，按下新增規則，可以看到有下面幾點可以設定<br><img src="/blogimage/Azure/VS4.png" width="300"> </p>
<p>分成<em>工作指派</em>和<em>存取控制</em>，前者是設定相對應的條件，後者是規範在前者條件下是否可以有存取權限，看似似乎不太難設定</p>
<h3 id="使用者和群組"><a href="#使用者和群組" class="headerlink" title="使用者和群組"></a>使用者和群組</h3><p>有哪些人員要被規範，原則上都是全部人員，可以設定要包括人員或是排除那些人員不被限制</p>
<img src="/blogimage/Azure/VS5.png" width="500"> 
<h3 id="雲端應用程式"><a href="#雲端應用程式" class="headerlink" title="雲端應用程式"></a>雲端應用程式</h3><p>這裡則是設定有被Azure AD管理的服務，就這組測試用的案例來說，只有VSTS有被Azure AD管理，只會出現VSTS，當然如果想要所有雲端應用程式都套用，就直接選定全部吧</p>
<img src="/blogimage/Azure/VS6.png" width="600"> 
<p>像是正式環境，又有使用O365，所以，這邊列表的APP又多了Office 365，且基本上有用到微軟雲端服務的產品，都會被歸納進來，如Hockeyapp</p>
<img src="/blogimage/Azure/VS7.png" width="600"> 
<h3 id="條件設定"><a href="#條件設定" class="headerlink" title="條件設定"></a>條件設定</h3><p>在條件設定可以設定分別有</p>
<ul>
<li>登入風險</li>
<li>裝置平台 : 可以套用那些平台上面</li>
<li>位置 : 主要設定白名單，有列在名單中才可以存取，這是最重要設定選項之一</li>
<li>用戶端應用程式</li>
</ul>
<img src="/blogimage/Azure/VS8.png" width="600"> 
<p>其中位置設定，若是公司網路，可以把公司網路範圍區域設定為白名單，這邊必須採用<code>CIDR</code>標示法，如果不知道要怎樣標示，也可以透過工具<a href="&#39;http://www.ipaddressguide.com/cidr">www.ipaddressguide.com/cidr</a>幫忙</p>
<img src="/blogimage/Azure/VS9.png" width="500"> 
<p>這邊情境我們設定如下<br><img src="/blogimage/Azure/VS10.png" width="500"> </p>
<h3 id="存取控制"><a href="#存取控制" class="headerlink" title="存取控制"></a>存取控制</h3><p>上面條件設定完成後，就是設定若是符合這些條件，需要進行那些動作，可以設定鎖定或是有條件的進入，先來設定全部<code>封鎖存取</code><br><img src="/blogimage/Azure/VS11.png" width="500"> </p>
<p>設定完成後，就可以多一個條件原則，這時候我們再去VSTS測試看看<br><img src="/blogimage/Azure/VS12.png" width="500"> </p>
<p>用網頁登入後，就會出現這提示，表示你現在可能不在公司或是已經你現在網路位置是不被允許登入的，當然用Visual Studio也沒辦法連入了<br><img src="/blogimage/Azure/VS13.png" width="500"> </p>
<p>如果這時候想要某些IP可以連入情況，就去排除選項把信任IP放入就可以，除了IP還可以設定被授予裝置，只是這部分需要與Intune整合就是</p>
<hr>
<p>透過這樣條件組合，就可以在增強VSTS使用上的安全性，也可以符合每家企業對於安全性的不同定義。</p>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="`https://docs.microsoft.com/en-us/azure/active-directory/active-directory-conditional-access`">https://docs.microsoft.com/en-us/azure/active-directory/active-directory-conditional-access</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://sierraws.com/wp-content/uploads/2013/11/Sierra-Workforce-Solutions-Workplance-Security-AccessControl-e1389048310112.jpg&quot;&gt;
&lt;
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>自動化建置取得不同VSTS平台內的Packages Manager套件</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/07/07/Devops/VSTSPackage/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/07/07/Devops/VSTSPackage/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2017-07-07T00:23:53.726Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.geekhive.com/wp-content/uploads/2017/05/ship-1920x1080.jpg">
<p>自從VSTS有了<strong>Packages</strong>的功能，可以讓我們自建團隊私有的Nuget後，就習慣把大量可以Re-Use套件放上去，可以讓整個團隊共同使用這些套件。不過，如果給自己團隊是沒有甚麼問題，今天要跨團隊使用呢?就是給在不同專案成員也用你開發的Package，在同一個VSTS URL下，只要去設定Feed權限也就可以，如下圖，在<code>BestFeed</code>下設定給予要讀取此Package的人員那些權限<br><img src="/blogimage/VSTS/11.jpg" width="700"></p>
<p>但是，如果今天是不同VSTS呢，例如 <code>BBB.visualstud.com</code> 要去讀取 <code>AAA.visualstud.com</code> Packages內的套件，又或是其他版控平台要來讀取<code>AAA.visualstud.com</code> Packages內的套件。當然第一前提依舊必須本身你有在AAA.visualstud.com內有帳號，如果沒有帳號一切就別談囉</p>
<p>以為有帳號就可以嗎?如果在Visual Studio內是沒問題，是可以正常把套件裝起來，不過，這時候你會發現必須先輸入<code>AAA.visualstud.com</code>帳號密碼，一旦做了自動化建置，並不會跳出這樣需求視窗，這時候就會發生找不到這個在<code>AAA.visualstud.com</code>內套件問題，想當然而就會build失敗了。要解決這問題採用一個最簡單方式，就是把驗證資訊設定在<code>Nuget.config</code>中</p>
<p>假設原本的<code>Nuget.config</code>是這樣設定<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">apikeys</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">apikeys</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packageSources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">clear</span> /&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"AAA"</span> <span class="attr">value</span>=<span class="string">"https://AAA.pkgs.visualstudio.com/_packaging/BestFeed/nuget/v3/index.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"nuget.org"</span> <span class="attr">value</span>=<span class="string">"https://www.nuget.org/api/v2/"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">packageSources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">activePackageSource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"All"</span> <span class="attr">value</span>=<span class="string">"(Aggregate source)"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">activePackageSource</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>這時候需要加入<code>&lt;packageSourceCredentials&gt;</code>屬性，剛剛提到需要可以驗證通過除了帳號還需要密碼，但密碼不是使用這組帳號的密碼，而是必須產生一組PAT密碼，要建立PAT密碼可以參考這篇文章[<a href="&#39;http://edwardkuo.imas.tw/paper/2016/08/10/Devops/2016-08-11/&#39;">打通自動化雲端部署到地端-安裝VSTS Agent 
</a>]</p>
<p>有了PAT密碼就把帳號與密碼資訊放入<code>Nuget.config</code>中，在<code>&lt;packageSourceCredentials&gt;</code>內要加一組跟PackageSources的Key Name一樣名稱的tag<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">packageSourceCredentials</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">AAA</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"Username"</span> <span class="attr">value</span>=<span class="string">"XXX"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"ClearTextPassword"</span> <span class="attr">value</span>=<span class="string">"123123123123123"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">AAA</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">packageSourceCredentials</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>並添加<code>Username</code>和<code>ClearTextPassword</code>，前者就是登入到<code>AAA.visualstud.com</code>，後者就是<code>PAT</code>密碼。完成後，在自動化建置中就可以去抓去對方的Package了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://www.geekhive.com/wp-content/uploads/2017/05/ship-1920x1080.jpg&quot;&gt;
&lt;p&gt;自從VSTS有了&lt;strong&gt;Packages&lt;/strong&gt;的功能，可以讓我們自建團隊私有的Nuget
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Teams整合VSTS Story Board</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/06/23/Devops/TEAMSVSTS/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/06/23/Devops/TEAMSVSTS/</id>
    <published>2017-06-22T16:00:00.000Z</published>
    <updated>2017-06-23T05:32:13.698Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.mindmeister.com/blog/wp-content/uploads/Brainstorming-1024x536.png">
<p>先前在VSTS使用Story Board時候，又用Teams，想說是否可以不要兩邊切換看和討論Story，早期作法就只是把VSTS Story的Link address抓下來，利用Teams的<strong>Tab</strong>內的Web Site功能建立，不過，這個月更新，整合度就更好了，只需要透過幾個步驟，就可以把兩邊給串起來，且比我之前用link來做好多了</p>
<h2 id="選VSTS-Tab"><a href="#選VSTS-Tab" class="headerlink" title="選VSTS Tab"></a>選VSTS Tab</h2><hr>
<p>到Teams的Tab功能列表中，找到VSTS的Function，並點選啟動它</p>
<img src="/blogimage/MicrosoftTeamsFile/A.jpg" width="500">
<h2 id="開始設定連接參數"><a href="#開始設定連接參數" class="headerlink" title="開始設定連接參數"></a>開始設定連接參數</h2><hr>
<p>點選Function後，就可以開始設定，目前Teams帳號與VSTS帳號並沒有統一，所以，這邊會要你輸入VSTS的登入帳號</p>
<img src="/blogimage/MicrosoftTeamsFile/A1.jpg" width="500">
<p>登入之後，就可以選訂要連結的VSTS位置，如果你有多個，就只能選擇一個來做綁定</p>
<img src="/blogimage/MicrosoftTeamsFile/A2.jpg" width="500">
<p>就Teams是以團隊為主，所以，套用到VSTS時候，也必須選定<em>團隊專案</em>和<em>團隊名稱</em>，如果今日有一個團隊是跨多個專案，就必須設定多次了，沒有辦法在一次就可以全部看到的<br><img src="/blogimage/MicrosoftTeamsFile/A3.jpg" width="500"></p>
<p>在Backlog level中，只能選定<code>Features</code>,<code>Stories</code> 和<code>Epics</code>三種，設定好之後就按確定，就可以囉<br><img src="/blogimage/MicrosoftTeamsFile/A4.jpg" width="500"></p>
<h2 id="開始使用"><a href="#開始使用" class="headerlink" title="開始使用"></a>開始使用</h2><hr>
<p>設定完成後，就可以在Teams的Tab上面就會出VSTS Story，也可以透過Teams聊天功能去討論Story了<br><img src="/blogimage/MicrosoftTeamsFile/A5.jpg" width="500"></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://www.mindmeister.com/blog/wp-content/uploads/Brainstorming-1024x536.png&quot;&gt;
&lt;p&gt;先前在VSTS使用Story Board時候，又用Teams，想說是否可以不要兩邊切換看和討
    
    </summary>
    
      <category term="Microsoft Teams" scheme="http://edwardkuo.imas.tw/categories/Microsoft-Teams/"/>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>還原DB發生Cannot execute as the database principal because the principal &quot;dbo&quot; does not exist...</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/06/03/SQL/SQLAA/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/06/03/SQL/SQLAA/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2017-06-03T09:53:26.569Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.conceptinfoway.net/wp-content/uploads/2010/03/SQL-1.png">
<p>今天把某台的DB Server中的資料庫還原到另一台DB Server時候，發生這樣的訊息</p>
<blockquote>
<p>Cannot execute as the database principal because the principal “dbo” does not exist, this type of principal cannot be impersonated, or you do not have permission</p>
</blockquote>
<p>想說平常做備份還原都沒有遇到這問題，怎這次會遇到這樣問題，查了一下還原DB Log，並未發現甚麼錯誤，那樣到底是哪邊出問題<br><img src="/blogimage/DB1.jpg"></p>
<p>原來是DB Owner不見了，會發生這問題我猜想因該是因為不同台的DB Server內的帳號是不一致，導致還原DB到這台主機時候，找不到原先DB Owner，這時候只要重新給一個DB Owner帳號就可以囉<br><img src="/blogimage/DB2.jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://www.conceptinfoway.net/wp-content/uploads/2010/03/SQL-1.png&quot;&gt;
&lt;p&gt;今天把某台的DB Server中的資料庫還原到另一台DB Server時候，發生這樣的訊息&lt;/p&gt;
&lt;blockqu
    
    </summary>
    
    
      <category term="T-SQL" scheme="http://edwardkuo.imas.tw/tags/T-SQL/"/>
    
  </entry>
  
  <entry>
    <title>用Excel產生Json格式的資料</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/05/25/Other/EXCELJson/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/05/25/Other/EXCELJson/</id>
    <published>2017-05-24T16:00:00.000Z</published>
    <updated>2017-06-03T01:56:35.270Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn1.pcadvisor.co.uk/cmsdata/features/3656625/how-to-create-pivottables-main_thumb800.png">
<p><code>Json</code>做為資料傳遞格式傳遞是越來越普遍，就連把SQL也支援JSON資料傳入做<code>Insert</code>資料用。不過，雖然JSON資料普遍使用，但是，有一個比較大缺點，就是要產生JSON格式的資料並不容易，尤其要多筆資料時候，往往不是缺了<code>[</code>就是少了甚麼，造成格式錯誤。</p>
<p>尤其最近是把Json資料當作參數傳入SQL中，每每要組合這些資料，就快被搞死，因此，找到一個套件叫做<code>Office with Excel to JSON</code>，可以讓你把資料透過EXCEL設計好，然後轉成JSON字串，這樣就方便多。</p>
<p>使用這個套件必須是EXCEL 2016或是O365上的EXCEL版本才可以，<code>Office with Excel to JSON</code>下載點:<br><a href="https://store.office.com/addinstemplateinstallpage.aspx?rs=en-ZA&amp;assetid=WA104380263" target="_blank" rel="external">https://store.office.com/addinstemplateinstallpage.aspx?rs=en-ZA&amp;assetid=WA104380263</a></p>
<p>會彈出這個視窗，但是點下去就對<br><img src="/blogimage/Excel/1.jpg" width="500"></p>
<p>在Excel上要啟用編輯，就可以啟用這個增益集<br><img src="/blogimage/Excel/2.jpg" width="700"></p>
<p>啟用後的畫面如下<br><img src="/blogimage/Excel/3.jpg" width="300"></p>
<p>在這邊可以透過上傳EXCEL檔案產生Json，也可以直接在EXCEL表格上設計好數據，然後去產生<code>Json</code>資料，例如我們設計下面這樣數據格式<br><img src="/blogimage/Excel/4.jpg" width="400"></p>
<p>然後，在剛剛增益集上直接選擇<code>Row</code>，然後，按下<code>Go</code>，下面就會把資料Convert為Json囉<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;<span class="attr">"Name"</span>:<span class="string">"AAAA"</span>,<span class="attr">"TEL"</span>:<span class="string">"0933932"</span>,<span class="attr">"Status"</span>:<span class="string">"A"</span>,<span class="attr">"Value"</span>:<span class="number">1</span>&#125;,</div><div class="line">    &#123;<span class="attr">"Name"</span>:<span class="string">"BBBB"</span>,<span class="attr">"TEL"</span>:<span class="string">"9012312"</span>,<span class="attr">"Status"</span>:<span class="string">"B"</span>,<span class="attr">"Value"</span>:<span class="number">2</span>&#125;,</div><div class="line">    &#123;<span class="attr">"Name"</span>:<span class="string">"CCCC"</span>,<span class="attr">"TEL"</span>:<span class="string">"123123"</span>,<span class="attr">"Status"</span>:<span class="string">"V"</span>,<span class="attr">"Value"</span>:<span class="number">3</span>&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>這樣是不是很方便呢?不然，每次要搞定這些資料就讓人頭痛了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn1.pcadvisor.co.uk/cmsdata/features/3656625/how-to-create-pivottables-main_thumb800.png&quot;&gt;
&lt;p&gt;&lt;code&gt;Json&lt;/code&gt;做為資料傳遞格式傳遞
    
    </summary>
    
    
      <category term="Other" scheme="http://edwardkuo.imas.tw/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>VSTS 整合Visual Studio Mobile Center</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/05/24/Devops/MobileCenter/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/05/24/Devops/MobileCenter/</id>
    <published>2017-05-23T16:00:00.000Z</published>
    <updated>2017-07-20T16:17:30.516Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.visualstudio.com/wp-content/uploads/2016/11/roadmap@2x.png">
<p>要在VSTS建置一個Xamarin開發出來的App，只要在Build Process將相關要建置的Task設定好基本上就可以產生出一個APP，若是要建置出iOS用的APP，就必須要在建置的Agent下一番功夫，例如使用Local agent或是第三方的Agent像是MacinCloud幫忙建置Xamarin專案，用Local agent則還是必須準備一台MAC在上面安裝Build Agent，似乎也不是很方便，第三方服務在付費方式上會有些”麻煩”。</p>
<p>去年就在關注Visual Studio Mobile Center發展(雖然現在依舊是Preview)，當時它只能綁定Github或是其他開源的版控平台上面的程式，對於愛用VSTS的人來會是一個遺憾，不過，在2017 Build大會前一個月，Mobile Center宣布可以綁定VSTS上Repositories，讓建置直接透過Mobile Center做建置APP，讓整個CI又更方便了，因此，來把VSTS + Mobile Center串起來吧</p>
<h2 id="準備事項"><a href="#準備事項" class="headerlink" title="準備事項"></a>準備事項</h2><hr>
<p>使用Mobile Center前，須注意下面幾點事項，這樣才會會讓整個<code>Build</code>流程順暢一點</p>
<ul>
<li>安裝<code>Mobile Center Analytics</code> 和 <code>Mobile Center Crashes</code></li>
<li>更新<code>Xamarin</code>套件到最新版本</li>
<li>移除Hockeyapp套件</li>
<li>Nuget.config要放在專案的Root位置，就是跟<code>.sln</code>同一層<br>另外一個重要事情，就是記住要自己先在Local端可以Build成功阿，不然放上去也不會成功的</li>
</ul>
<h2 id="Visual-Studio-Mobile-Center-Build"><a href="#Visual-Studio-Mobile-Center-Build" class="headerlink" title="Visual Studio Mobile Center Build"></a>Visual Studio Mobile Center Build</h2><hr>
<p>話說在前頭，因為在VSTS中習慣自己在Build時候，去組合自己想要的<code>Task</code>流程和設定，但是，若是使用Mobile Center時候，這一部分是完全被省掉，講好聽一點就是省掉設定的麻煩，不好聽就是沒有控制權，若是中間有甚麼意外或是非標準化流程，我們自己也無法做更改。所以，目前建議還是依照自己情境來決定，是否要透過Mobile Center座建置這件事情</p>
<h4 id="建立一個平台的APP專案"><a href="#建立一個平台的APP專案" class="headerlink" title="建立一個平台的APP專案"></a>建立一個平台的APP專案</h4><p>進入Mobile Center時候，選擇<code>Add New app</code>，建立一個新的App，這部分感覺有點類似VSTS的Repositories，一開始會要你設定要產生哪一個平台的App，和你開發App用的語言，這裡就選擇<code>iOS</code>和<code>Xamarin</code>，所以說，如果你要產生不同平台的App，就要建立多個APP，這部分還算合理，畢竟不是所有人都是用Xamarin開發，可以跨平台的<br><img src="/blogimage/MobileCenter/1.jpg" width="400"></p>
<p>建立完成之後，就會進入下面的管理介面<br><img src="/blogimage/MobileCenter/2.jpg" width="600"></p>
<p>一進入後，會請你在Xamarin Project安裝相關套件，官網說是找到<code>Mobile Center Analytics</code>和<code>Mobile Center Crashes</code>這兩個套件，不過，實際上卻是找到是這兩名稱的套件<br><img src="/blogimage/MobileCenter/3.jpg" width="600"></p>
<p>找到後安裝起來，說明文件上面有分<code>Xamarin</code>和<code>Xamarin.Form</code>兩種設定SDK用法，不過，雖然本身是使用<code>Xamarin.Form</code>開發，但是，還是可以使用<code>Xamarin</code>方式在Xamarin.ios中加入SDK，而這樣做法只是針對單一平台加入SDK，相關程式碼加入之後，就是開始設定Mobile Center的Build，因為要讓Mobile Center和VSTS的Repositories結合，所以，這裡當然只能選VSTS囉<br><img src="/blogimage/MobileCenter/4.jpg" width="700"></p>
<p>一般來說會希望你Mobile Center的帳號與登入VSTS帳號的登入帳號是相同，這樣會比較單純，如果是這樣情境，會看到下面資訊，Mobile Center會要VSTS授權給它讀取VSTS的Repositories<br><img src="/blogimage/MobileCenter/5.jpg" width="700"></p>
<p>綁定之後，就可以看到VSTS所有的Repositories，此時，只要選定你要的Build的Repositorie進行綁定就可以，而且一旦綁定後，就可以看到Repositorie內所有的Branch，在Mobile Center設定Definition方式是選定你要Build的Branch，然後，再做下一步的設定<br><img src="/blogimage/MobileCenter/6.jpg" width="700"></p>
<h4 id="來Build一個Branch"><a href="#來Build一個Branch" class="headerlink" title="來Build一個Branch"></a>來Build一個Branch</h4><p>這邊設定我只能說，真是走極簡風格阿，跟VSTS比較起來，Mobile Center所需要的設定基本都是<strong>可辨識的</strong><br><img src="/blogimage/MobileCenter/7.jpg" width="700"></p>
<p>如果要設定<code>Device Build</code>就必須上傳該App的<code>Provisioning Profile</code>和<code>.P12 File</code>，當然這是要建置iOS APP的憑證，若是沒有上傳這些憑證，只能使用<code>Simulator build</code>建置APP，而使用此模式，就不能發布到手機上使用</p>
<p>設定好之後或是每次修改設定後，只要一儲存，它就會開始Build了，除非這邊選擇手動觸發，另外，若是選定自動Build，當Code被Check in到VSTS後，也會開始自動建置。這介面上則是列出每次Build的狀況，以及要手動觸發建置的按鈕<br><img src="/blogimage/MobileCenter/8.jpg" width="700"></p>
<p>每個狀態內，會顯示詳細的build資訊，還有每次Build的時間，不過，這邊有一點就是關於Build時間，Mobile Center背後其實是會啟動一個VM去做建置，所以，如果今天碰到是資源比較<strong>缺乏</strong>的，就會向下圖一樣，發生非常長的建置時間<br><img src="/blogimage/MobileCenter/9.jpg" width="700"></p>
<p>當建置完成時候，會出現<code>Download</code>按鈕，若是建置失敗，只能建置過程的Log<br><img src="/blogimage/MobileCenter/10.jpg" width="700"></p>
<p>如果建置失敗是不會有<code>Distribute</code>功能的<br><img src="/blogimage/MobileCenter/11.jpg" width="700"></p>
<p>建置成功則在下載地方，還可以下載三種類型分別是<code>build</code>、<code>symbols</code>和<code>logs</code>的檔案，其中，Build裡面就是編譯好的<code>ipa</code>檔案<br><img src="/blogimage/MobileCenter/12.jpg" width="300"></p>
<p>另外，從下載的Log還可以看得出來，Mobile Center在簡單的背後它設定了那些Task流程，如果想要知道Mobile Center背後怎樣建置你的APP，可以直接看log就可以清楚了解<br><img src="/blogimage/MobileCenter/13.jpg" width="500"></p>
<h2 id="Distribute-APP"><a href="#Distribute-APP" class="headerlink" title="Distribute APP"></a>Distribute APP</h2><hr>
<p>當你Build好之後，到<code>Distribute</code>就看到你剛剛Build的APP，還有建置版本號，也可以在這邊下載APP使用<br><img src="/blogimage/MobileCenter/14.jpg" width="700"></p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><hr>
<p>Mobile Center把Build程序簡單化，也讓微軟開發人員不一定要有MAC才可以建置iOS APP，不過，不知道是不是還在Preview，所以，很多機制都尚未完善，要真正導入到企業上用可能還有一段路要走，就拿現在還在運行的HockeyApp來說(未來可能就消失)，個人覺得不足地方有幾點:</p>
<ul>
<li>沒有類似HockeyApp一樣的Store，列出可以下載的APP，這樣可以減省企業自行建置Store的時間</li>
<li>因為是自動設定好Task，如果要切換Bundle Identifier Name，沒有辦法透過Merage Branch方式進行</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://www.visualstudio.com/wp-content/uploads/2016/11/roadmap@2x.png&quot;&gt;
&lt;p&gt;要在VSTS建置一個Xamarin開發出來的App，只要在Build Process將相關要建置的Task設
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>修復RansomWin32WannaCrypt勒索病毒方式</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/05/15/LifeStyle/SaveRansomWin32WannaCrypt/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/05/15/LifeStyle/SaveRansomWin32WannaCrypt/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2017-05-28T15:40:28.174Z</updated>
    
    <content type="html"><![CDATA[<img src="https://pcsolution99.files.wordpress.com/2017/03/wp-1489212561284.jpg">
<p>這一波病毒我想最累因該是企業內部MIS人員，有些朋友公司又有遇到遭情，整個節日就泡湯，這次大部分都是微軟作業系統(聽說MAC也會有)遭殃，但不可避免就是，已經不只是從原本被動模式中毒，就算放著連上網也會中毒，雖然，微軟早在之前就有發布更新，我相信很多人也是沒更新的 XD</p>
<blockquote>
<p>根據微軟的安全報告指出，這個勒索軟體是屬於WannaCryptor病毒的其中一隻變種。為了協助Windows用戶共同面對這個大規模<br>的惡意勒索病毒的威脅，MSRC已公布相關的建議措施，請參閱連結，<a href="&#39;https://blogs.technet.microsoft.com/MSRC/2017/05/12/CUSTOMER-GUIDANCE-FOR-WANNACRYPT-ATTACKS/&#39;">MSRC blog - Customer Guidance for WannaCrypt Attacks</a></p>
</blockquote>
<p>關於修復RansomWin32WannaCrypt勒索病毒，可以透過微軟提供方式來進行</p>
<ul>
<li>安裝微軟於三月釋出的安全性更新中的<a href="&#39;https://technet.microsoft.com/ZH-TW/LIBRARY/SECURITY/MS17-010.ASPX&#39;">MS17-010</a></li>
</ul>
<p>但這次罕見的微軟會替Phase Out產品也做修補</p>
<ul>
<li><a href="&#39;http://catalog.update.microsoft.com/v7/site/ScopedViewInline.aspx?updateid=6e52528b-7754-49ba-b39e-2a2a2b7c8c3a&#39;">Windows Server 2003 SP2 x64</a></li>
<li><a href="&#39;http://catalog.update.microsoft.com/v7/site/ScopedViewInline.aspx?updateid=fdb0df5f-8994-4e43-a37b-82544a1eff68&#39;">Windows Server 2003 SP2 x86</a></li>
<li><a href="&#39;http://catalog.update.microsoft.com/v7/site/ScopedViewInline.aspx?updateid=a679cafc-d8da-4c2a-9709-17a6e6a93f4f&#39;">Windows XP SP2 x64</a></li>
<li><a href="&#39;http://catalog.update.microsoft.com/v7/site/ScopedViewInline.aspx?updateid=9e189800-f354-4dc8-8170-7bd0ad7ca09a&#39;">Windows XP SP3 x86</a></li>
<li><a href="&#39;http://catalog.update.microsoft.com/v7/site/ScopedViewInline.aspx?updateid=d4d15d30-e775-4f6f-b838-d3caca05a5e9&#39;">Windows XP Embedded SP3 x86,Windows 8 x86</a> </li>
<li><a href="&#39;http://catalog.update.microsoft.com/v7/site/ScopedViewInline.aspx?updateid=22699699-94c3-4677-99e5-38cb4fb66401&#39;">Windows 8 x64</a></li>
</ul>
<p>沒中毒也別太高興，還是快點修補吧，畢竟，變種的已經又來了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://pcsolution99.files.wordpress.com/2017/03/wp-1489212561284.jpg&quot;&gt;
&lt;p&gt;這一波病毒我想最累因該是企業內部MIS人員，有些朋友公司又有遇到遭情，整個節日就泡湯，這次大部分都是微軟作業系
    
    </summary>
    
    
      <category term="LifeStyle" scheme="http://edwardkuo.imas.tw/tags/LifeStyle/"/>
    
  </entry>
  
  <entry>
    <title>在Application Insights標註VSTS Release的版本戳記</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/05/15/Devops/VSTSAI/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/05/15/Devops/VSTSAI/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2017-05-15T15:37:27.280Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.merv.io/images/whatis2.gif">
<p>常用Application Insighs的人，可以了解Application Insighs能監控的資訊有多強大，不過，在這些資訊中往往會Miss掉一個訊息，就是現在運行的系統版本所得到資訊，跟之前的資訊是否是同一個版本呢?雖然，我們可以在Application Insights內用客製化屬性標記系統版本，但是，不過在統計圖表中卻無法得知這份資訊。在資料的判讀上就會出現問題</p>
<p>因此，為了解決這問題，其實Application Insights是可以<strong>主動</strong>紀錄每次發布的時間點，並標記在圖表上，尤其對於<code>DevOps</code>的團隊來說是很重要(責怪人亂發錯誤版本 =.=)，可以確認問題點發生原因</p>
<h3 id="取得Application-Insights-ID-和-Key"><a href="#取得Application-Insights-ID-和-Key" class="headerlink" title="取得Application Insights ID 和 Key"></a>取得Application Insights ID 和 Key</h3><hr>
<p>要能做到這點，必須使用Application Insights Enterprice版本，主要是必須使用到Application Insights API的功能，如果定價策略設定好之後，就到<code>API 存取</code>地方，先找到Application Insights API 的ID<br><img src="/blogimage/Azure/18.jpg" width="500"></p>
<p>有了ID之後，就是建立API Key，選擇<code>建立API 金鑰</code><br><img src="/blogimage/Azure/19.jpg" width="500"></p>
<p>有了這兩組資訊，就可以到VSTS去做設定</p>
<h3 id="設定VSTS的Release-Application-Insights"><a href="#設定VSTS的Release-Application-Insights" class="headerlink" title="設定VSTS的Release Application Insights"></a>設定VSTS的Release Application Insights</h3><hr>
<p>預設在VSTS並沒有Application Insights for Release的Task，必須到Marketplace下載安裝，從安裝說明看來，因該是TFS也可以使用，不過，這邊還是採用VSTS作範例<br><img src="/blogimage/Azure/20.jpg" width="500"></p>
<p>下載安裝後，就可以在VSTS的Deploy看到這個Task<br><img src="/blogimage/Azure/21.jpg" width="500"></p>
<p>把這個Task加入在整個流程最後一個，並填入剛剛取得Application ID &amp; Application Key<br><img src="/blogimage/Azure/22.jpg" width="500"></p>
<p>完畢後，跑一次Release，再去Application Insights看發生怎樣變化，圖表上方多了戳記的圖案<br><img src="/blogimage/Azure/23.jpg" width="500"></p>
<p>點開戳記的內容，就可以看到這次Release相關版本資訊<br><img src="/blogimage/Azure/24.jpg" width="300"></p>
<p>藉由這樣方式，讓整個資訊就會更完整，對於監控Application來說又更方便了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://www.merv.io/images/whatis2.gif&quot;&gt;
&lt;p&gt;常用Application Insighs的人，可以了解Application Insighs能監控的資訊有多強大，不過，在這些資訊中往往會Miss掉一個訊息，就是現在運行的
    
    </summary>
    
      <category term="Azure Application Insights" scheme="http://edwardkuo.imas.tw/categories/Azure-Application-Insights/"/>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>(Docker Swarm)Azure Container Service中建立MS SQL Server for linux</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/05/13/Azure/AzurelinuxSQL/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/05/13/Azure/AzurelinuxSQL/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2017-05-28T08:13:36.446Z</updated>
    
    <content type="html"><![CDATA[<img src="http://edumuch.com/wp-content/uploads/2016/01/fe0cb49c-fc42-487f-8e68-e247b4278174_orig.png">
<p>繼上一篇的<strong><a href="&#39;http://edwardkuo.imas.tw/paper/2017/05/06/Azure/AzureDocker/&#39;">Azure Container Service初體驗</a></strong>之後，就在想要如何去應用ACS(Azure Container Service的簡稱)的功能，有什麼場景是在對於系統開發或是企業應用方面有幫助的方案，突然，想到其中一個方式，就是建立開發測試的資料庫，在開發時期拿來使用，所以，用ACS建立一個臨時要用的資料庫來做測試用，或許也是一個不錯的選擇，其實，也是可以做為微服務中的資料庫區塊</p>
<p>不過，說這樣多，還是先在ACS中建立一個可外部連線的資料庫吧</p>
<h2 id="ACS的Docker-Swarm"><a href="#ACS的Docker-Swarm" class="headerlink" title="ACS的Docker Swarm"></a>ACS的Docker Swarm</h2><hr>
<p>如果要使用Docker Swarm模式，就必須先了解這張圖架構圖，這張圖是說明了ACS中的Docker Swarm架構，這是非常重要的，在這之中包含了<code>Master</code> &amp; <code>Agent</code>，與網路結構<br><img src="/blogimage/AzureDocker/acs-swarm2.png" width="700"></p>
<p>不過，有一點不解的是這張圖的<code>Master</code>對應到的<code>NAT</code>，但是實際上建置起來後，是對應到<code>Load Balance</code>，也就是說是跟<code>Agent</code>相同，在Agent的<code>Load Balance</code>是<br><code>80</code>,<code>443</code> &amp; <code>8080</code>的Port有被設定對外開放，如果今日你需要的服務對應的Port沒有被開啟，必須要在Loader Balance控制器做開起設定，就如等下做的SQL Server，必須要去開起<code>1433</code>，不然，外部系統是無法連線的到內部Container，如果是在Master，所有Port預設都是沒有被開放，必須自己去做設定<br>輸入<code>docker info</code>得到的資訊，如下<br><img src="/blogimage/AzureDocker/12.jpg" width="700"></p>
<p>如果是想要知道Master的Docker Host資訊，輸入<code>docker -H 172.16.0.5 info</code>就可以得知此Host的資訊，以及此Host對應的Agent IP<br><img src="/blogimage/AzureDocker/13.jpg" width="700"></p>
<p>如前面所講的，因為是要安裝SQL Server，所以，需要再ACS的Loading Balance控制器設定對外與對內Mapping的Port<br><img src="/blogimage/AzureDocker/14.jpg" width="600"></p>
<p>在<code>狀態探查</code>地方加入SQL的1433 Port，通訊協定選擇<code>TCP</code><br><img src="/blogimage/AzureDocker/15.jpg" width="700"></p>
<p>再到<code>負戴平衡</code>的地方，加入SQL的規則<br><img src="/blogimage/AzureDocker/16.jpg" width="700"></p>
<p>設定內的內容會是下面這樣<br><img src="/blogimage/AzureDocker/17.jpg" width="600"></p>
<p>以上設定完後，後續等安裝完SQL，就可以透過SSMS連線進去</p>
<h2 id="安裝SQL-Server-for-Linux"><a href="#安裝SQL-Server-for-Linux" class="headerlink" title="安裝SQL Server for Linux"></a>安裝SQL Server for Linux</h2><hr>
<p>在<code>Swarm</code>中，所具備的VM是屬於Linux作業系統，所以，用一般的SQL Server是無法安裝的，必須使用SQL Server for Linux，因此，必須先去<code>Docker Store</code>下載，因為主要是在於開發使用，在SQL Server for Linux內的一些管理功能可能無法與一般的SQL Server一樣齊全，不過，這倒是影響不大</p>
<p>下載<code>SQL Server for Linux</code><br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull microsoft/mssql-server-linux</div></pre></td></tr></table></figure></p>
<p>開始安裝SQL Server for Linux，預設登入帳號是SA<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker -H <span class="number">172.16</span>.<span class="number">0.5</span>:<span class="number">2375</span> run --name linuxSQL -d -p <span class="number">1433</span>:<span class="number">1433</span> -e <span class="string">'ACCEPT_EULA=Y'</span> -e <span class="string">'SA_PASSWORD=XXXXXX'</span> -d microsoft/mssql-server-linux</div></pre></td></tr></table></figure></p>
<p>當安裝完畢後，輸入<code>docker -H 172.16.0.5:2375 ps -a</code>就可以下面資訊，表示服務有起來了，其中，會看到Port的對應關係是<code>10.0.0.5</code>，表示是位在Agent VM段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                     NAMES</div><div class="line">2b37e7cdf38d        microsoft/mssql-server-linux   &quot;/bin/sh -c /opt/m...&quot;   24 hours ago        Up 23 hours         10.0.0.5:1433-&gt;1433/tcp   swarm-agent-615DB80F000001/linuxSQL</div></pre></td></tr></table></figure></p>
<blockquote>
<p>docker -H<br>-H, –host=[unix:///var/run/docker.sock]: tcp://[host:port]來綁定或者 unix://[/path/to/socket] 來使用。在 daemon 模式下綁定的 socket，透過一個或多個 tcp://host:port, unix:///path/to/socket, fd://* </p>
</blockquote>
<p>這樣就安裝完畢，看是很簡單，當時要搞定這個，還花了不少時間，最常看到就是Port的資訊是空的，這表示SQL Server並未真正啟動，只是安裝好Container而已，還必須要透過<code>docker run</code>啟動</p>
<h2 id="SSMS連線"><a href="#SSMS連線" class="headerlink" title="SSMS連線"></a>SSMS連線</h2><hr>
<p>設定好Container後，就必須要能進行連線，這邊是透過外部方式連入到ACS內的Container，因為是使用SQL Server，那就用SSMS工具來進行測試吧，要測試前首先要知道ACS對外的FQDN或是IP位置，我們可以去<code>公用IP位址</code>的服務找到Agent對外IP和Host Name<br><img src="/blogimage/AzureDocker/18.jpg" width="600"></p>
<p>在資料庫伺服器位置，需輸入<code>tcp:IP or tcp:hostname</code>，同時，輸入你剛剛安裝SQL Server的Password，如果Container正常啟動，這樣就可以連入進去了，這裡看到名稱剛好會是Container ID<br><img src="/blogimage/AzureDocker/19.jpg" width="600"></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://edumuch.com/wp-content/uploads/2016/01/fe0cb49c-fc42-487f-8e68-e247b4278174_orig.png&quot;&gt;
&lt;p&gt;繼上一篇的&lt;strong&gt;&lt;a href=&quot;&amp;#39;http:/
    
    </summary>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
      <category term="Docker" scheme="http://edwardkuo.imas.tw/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Azure Container Service初體驗</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/05/07/Azure/AzureDocker/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/05/07/Azure/AzureDocker/</id>
    <published>2017-05-06T16:00:00.000Z</published>
    <updated>2017-05-28T15:49:44.442Z</updated>
    
    <content type="html"><![CDATA[<img src="https://s3.amazonaws.com/media-p.slid.es/uploads/413373/images/2525284/docker.png">
<p>研究Docker時候，總是在想為了來使用Docker技術，我必須架設具有Container機制的Server，或是在自己PC上使用Docker for Windows建立Container，然後才可以使用Docker Image，雖然不複雜，但有時候也覺得不方便，尤其在寫程式時候，會需要做到測試部分，會用到Docker建置相關環境，如果這環境會被地域限制住，感覺又那樣不方便，在Azure上看到一個叫做<code>Azure Container Service</code>的東西，感覺這東西就像把<code>Container</code>變成PaaS，可以方便來使用</p>
<h2 id="Azure-Container-Service"><a href="#Azure-Container-Service" class="headerlink" title="Azure Container Service"></a>Azure Container Service</h2><hr>
<p>Azure Container Service是採用標準的Docker容器規範，所以，目前市面上的Docker技術，都是可以被放入這裡面，而在Azure Container Service內有三種模式可以選擇，分別為<code>DC/OS</code>、<code>Docker Swarm</code>和<code>Kubernetes</code></p>
<ul>
<li>Docker Swarm 使用Docker CLI</li>
<li>DC/OS使用DCOS CLI</li>
<li>Kubernetes使用kubectl</li>
</ul>
<p>可以依照個人習慣或是喜好來選擇自己想要的模式，後面範例會採用<code>Docker Swarm</code>模式來做操作，預設Azure中沒有<code>Azure Container Service</code>，必須自己到Marketplace安裝Azure Container Service服務，到Marketplace搜尋<code>Azure Container Service</code>，就可以找到此服務</p>
<p><img src="/blogimage/AzureDocker/1.jpg" width="700"></p>
<p>找到之後，就能進行安裝Azure Container Service，這時候可以自己選擇自己想要的Docker模式</p>
<h2 id="設定Azure-Container-Service"><a href="#設定Azure-Container-Service" class="headerlink" title="設定Azure Container Service"></a>設定Azure Container Service</h2><hr>
<p>進入設定模式，大致上會有四個步驟要進行，首先，要設定你服務的基本配置，如前面所提，這裡選定<code>Swarm</code>作為我的Docker模式</p>
<p><img src="/blogimage/AzureDocker/2.jpg" width="700"></p>
<p>基本設定完後，就設定服務的位置和連線進入的憑證<br><img src="/blogimage/AzureDocker/3.jpg" width="700"></p>
<ul>
<li>DNS︰用來為主要節點網域名稱的前置詞。</li>
<li>使用者名稱︰在叢集中每個 Linux 虛擬機器上帳戶的使用者名稱。</li>
<li>SSH RSA 公開金鑰：新增要用於對 Linux 虛擬機器進行驗證的公開金鑰。</li>
<li>主要主機計數：叢集中主要主機的數目。</li>
</ul>
<p>後續就是要建立Agent，雖然，感覺是在用Container的PaaS，但實際上背後還是透過VM方式建立Container，所以，這邊必須選定啟用多少<code>agent</code>以及要使用的VM大小</p>
<p><img src="/blogimage/AzureDocker/4.jpg" width="350"></p>
<p>完成後，會產生這樣的資訊<br><img src="/blogimage/AzureDocker/5.jpg" width="500"></p>
<p>只要確認無誤後，按下OK，就開始建立了，不過，這樣建立需要一點點時間，建立完畢後，在你剛剛設定的資源群組中會發現被添加了許多的Azure服務</p>
<p><img src="/blogimage/AzureDocker/6.jpg" width="500"></p>
<h2 id="與Azure-Container-Service連線"><a href="#與Azure-Container-Service連線" class="headerlink" title="與Azure Container Service連線"></a>與Azure Container Service連線</h2><hr>
<p>如果要跟Azure Container Service連線，因為先前我們在建立此服務時候，是使用SSH Key，所以，連線時候必須要有可以透過SSH連線的Client軟體，這裡我使用是<code>PuTTY</code>的軟體進行，因此，這邊開啟<code>Putty</code>，進行連線設定，在Host Name部分，在<code>containerservice-XXX</code>內的<code>Master FQDN</code>可以找到，而Port部分就輸入<code>2200</code><br><img src="/blogimage/AzureDocker/7.jpg" width="500"></p>
<p>連線資訊設定完成後，就是設定<code>Auth</code>登入資訊，這邊提供剛剛在Azure Container Service的SSH私鑰，它會是<code>.PPK</code>的檔案<br><img src="/blogimage/AzureDocker/8.jpg" width="500"></p>
<p>最後，就是設定對應的Port資訊，因為，這邊是採用<code>Swarm</code>，所以，對應的Port都使用2375<br><img src="/blogimage/AzureDocker/9.jpg" width="500"></p>
<p>都設定完成後就可以開始連線，進去之後輸入<code>docker info</code>就可以看到關於docker的資訊了<br><img src="/blogimage/AzureDocker/10.jpg" width="500"></p>
<p>以上方式就可以建置屬於Linux的Container，如果今日你要安裝的Docker Image是屬於Windows Container，就不能使用Swarm模式，必須使用<code>Kubernetes</code>模式，透過這樣方式，後續要在VSTS進行DevOps中的測試時候，也可以透過這樣方式進行，就不需要額外自行架設VM進行管理，至於，對於企業來說怎樣比較方便，後續還是要有實際案例再來進行比較，使用哪一種方式會是比較簡潔好用</p>
<p>文中有提到關於SSH相關設定，要知道怎樣設定SSH，可以參考這篇<br><a href="&#39;http://edwardkuo.imas.tw/paper/2017/05/05/Azure/AzureSSH/&#39;">- 建立Azure管理中的SSH金鑰</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://s3.amazonaws.com/media-p.slid.es/uploads/413373/images/2525284/docker.png&quot;&gt;
&lt;p&gt;研究Docker時候，總是在想為了來使用Docker技術，我必須架設具有Contain
    
    </summary>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
      <category term="Docker" scheme="http://edwardkuo.imas.tw/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>建立Azure管理所需要的SSH金鑰</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/05/06/Azure/AzureSSH/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/05/06/Azure/AzureSSH/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2017-05-29T13:02:15.135Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.fedoramagazine.org/wp-content/uploads/2016/06/ssh-clients-945x400.png">
<p>進入Azure之後，我們可以透過很多工具或是方式去管理我們在Azure上面的資源或是VM，不過，可以發現很多管理上，已經不只是使用帳號密碼做登入驗證，部分身分驗證資訊已經改用<code>SSH</code>的金鑰來進行驗證，因此，就必須製作屬於<code>SSH</code>的公鑰與私鑰，當我們在建構服務時候，就需要我們自己產生SSH公鑰資訊填入，做為日後登入資訊的驗證，雖然，這樣方式是相對複雜，但對於安全性又是多一分保障。</p>
<h2 id="準備事項"><a href="#準備事項" class="headerlink" title="準備事項"></a>準備事項</h2><hr>
<p>製作SSH Key前，必須先確認有這些工具，這樣會幫你<strong>比較</strong>簡單製作</p>
<ul>
<li>Git Bash : 需安裝<a href="&#39;https://git-scm.com/download/win&#39;">Git for windows</a>，就會有這指令</li>
<li>PuTTY Tool : 作為Client端SSH連線工具，同時，也可以產生SSH Public key格式，<a href="&#39;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#39;">下載點</a></li>
</ul>
<h2 id="建立SSH私鑰"><a href="#建立SSH私鑰" class="headerlink" title="建立SSH私鑰"></a>建立SSH私鑰</h2><hr>
<p>如果上面工具都安裝好，就可以開始建立SSH金鑰，金鑰有公鑰與私鑰部分，因此，透過<code>Git Bash</code>來產生私鑰，其指令如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -x509 -nodes -days 720 -newkey rsa:2048 -keyout azure.key -out myazure.pem</div></pre></td></tr></table></figure></p>
<img src="/blogimage/SSH/1.jpg" width="700">
<p>指令輸入後，就會產生一些資訊需要你填入，當資訊填完也就產生金鑰完畢了，這時候，可以到Windwos的自己帳戶下，看到<code>azure.key</code> &amp; <code>myazure.pem</code>這兩個檔案<br><img src="/blogimage/SSH/2.jpg" width="700"></p>
<p>私鑰檔案內會有<code>-----BEGIN PRIVATE KEY-----</code>字樣開頭，有了私鑰後，如果也想產生對應的公鑰，可以透過指令產生該檔案的公鑰<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl.exe rsa -pubout -in azure.key -out azurePublicKey.key</div></pre></td></tr></table></figure></p>
<p>公鑰檔案內會有<code>-----BEGIN PUBLIC KEY-----</code>字樣開頭</p>
<h2 id="轉換openSSH的公私鑰"><a href="#轉換openSSH的公私鑰" class="headerlink" title="轉換openSSH的公私鑰"></a>轉換openSSH的公私鑰</h2><hr>
<p>透過<code>OpenSSH</code>的公鑰，格式還不是讓Client端連入驗證的SSH格式，這部分我們需要做轉換，一般Azure SSH公鑰內資訊格式會是如下<br><img src="/blogimage/SSH/3.jpg" width="700"></p>
<p>PuTTY除了本身是SSH連線工具外，也可以透過他產生這方面格式的SSH公鑰。要讓Putty可以把剛剛透過openSSH建立的私鑰做轉換，首先必須讓PuTTY可以讀到這個檔案，所以，必須把<code>.Key</code>轉換成<code>_rsa</code>，這部分還是需要透過<code>OpenSSH</code>工具指令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsa -in azure.key -out azure_rsa</div></pre></td></tr></table></figure></p>
<p>這樣就可以產生<code>_rsa</code>的私鑰</p>
<p>打開PuTTY工具，將剛剛<code>_ras</code>檔案讀入，成功後就會有下面資訊<br><img src="/blogimage/SSH/4.jpg" width="400"></p>
<p>在畫面中的<code>Public Key for pasting into OpenSSH....</code>，可以看到這樣資訊<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0hUrtwvnZOgKnQoFjkoSFyUvZR5nbBe4oZnLCAnNbru1kuyhDyl6zlgipCjMTLUbMxUAaBzlOSrymtQ3p5asC0cCh9otJszCI7L63BiP7nDY8pQsn+sDEOeSxEY6Lw5XezhnTzg9Mt00DXsZTeWX8Bj2c7cw4uB9US2aKR5j2x1iAOcn+RnBI8Dvt6i3QOy2KSS+4fmaSCwgfwZtAdhJrpTiNQIj3o6MHkEJeVZlFKSTt/M/tdRvG324Lw6uT/otQGk</div><div class="line">.....</div></pre></td></tr></table></figure></p>
<p>把這些資訊Copy到Azure有<code>SSH Public Key</code>的地方放入就可以，如果，未來需要透過PuTTY連線，也要在此視窗中，選擇<code>Save private Key</code>，儲存後的附檔名為<code>.ppk</code>，後續必須使用私鑰的Key來跟Azure公鑰Key進行連線認證</p>
<p>透過以上方法就可以產生SSH Key for Azure來使用</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn.fedoramagazine.org/wp-content/uploads/2016/06/ssh-clients-945x400.png&quot;&gt;
&lt;p&gt;進入Azure之後，我們可以透過很多工具或是方式去管理我們在Azure上面的資源或是V
    
    </summary>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>Application Insights 結合OMS擴充監控分析</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/04/25/Azure/ApplicationInsightsOMS/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/04/25/Azure/ApplicationInsightsOMS/</id>
    <published>2017-04-24T16:00:00.000Z</published>
    <updated>2017-05-29T13:01:20.948Z</updated>
    
    <content type="html"><![CDATA[<img src="https://i.ytimg.com/vi/RMYfSJ9GMeM/maxresdefault.jpg">
<p>Application Insights好處在前面幾篇文章就有提到，尤其對於企業內部眾多的Application來說，Application Insights確實有助於我們從資料面去查詢一些蛛絲馬跡，不過，就整體管理而言，Azure Applcation Insights還是相對薄弱，畢竟，在上面要看一些指標或是報表並不是那樣友善，如果，把Application Insights結合<code>OMS</code>效果就不一樣，可以透過OMS的Dashboard強化，把監控數據視覺化或是進行分析，因此，就必須透過一些設定將Application Insights和OMS結合起來</p>
<h2 id="確認Application-Insights定價"><a href="#確認Application-Insights定價" class="headerlink" title="確認Application Insights定價"></a>確認Application Insights定價</h2><hr>
<p>想要啟用這功能，首先必須確定你的Application Insights定價，必須啟用Enterprise，才可以讓Application Insights資料整合到OMS內<br><img src="/blogimage/Azure/10.jpg" width="700"></p>
<h2 id="開始啟用OMS"><a href="#開始啟用OMS" class="headerlink" title="開始啟用OMS"></a>開始啟用OMS</h2><hr>
<p>要啟用OMS，除了在Azure內設定外，也可以到<code>Microsoft Operations Management Suite</code>網站設定OMS的<code>Workplace</code>，只是從這邊進去啟用OMS，必須填寫一些資訊，然後，後續OMS要結合Azure資料，還是會透過<code>Azure</code>的Log Analytics去整合，因此，這邊就是透過Azure來啟動以及建置OMS。</p>
<p>首先，必須找到<code>Log Analytics</code><br><img src="/blogimage/Azure/11.jpg" width="700"></p>
<p>設定相關資訊，在這裡其實就等於在建置OMS的工作區，如果是從<code>Microsoft Operations Management Suite</code>建置的，只需要填入OMS URL進來，如果不是，就取一個新OMS名稱，後續動作Azure都會幫你建置好<br><img src="/blogimage/Azure/12.jpg" width="300"></p>
<p>當建置完畢後，找到<code>Log Analytics</code>資源，進入後如下圖，可以看到<code>OMS入口網站</code>，從這裡就可以進入剛剛Azure幫你建置好的OMS網站<br><img src="/blogimage/Azure/13.jpg" width="700"></p>
<p>到這一步就做好嗎?不，這邊只是讓Azure幫你建置好OMS工作區而已，還沒把Application Insights資料與OMS串接</p>
<h2 id="串接OMS與Application-Insights"><a href="#串接OMS與Application-Insights" class="headerlink" title="串接OMS與Application Insights"></a>串接OMS與Application Insights</h2><hr>
<p>進入到OMS介面後，可以選擇自己想要的語系，然後，可以看到方案庫的選項<br><img src="/blogimage/Azure/14.jpg" width="300"></p>
<p>進入到方案庫後，可以找到<code>Application Insights Connector</code>，這目前還是屬於<code>preview</code>版本，然後，將此方案加入到OMS內，此時，可以看到下圖，表示方案已經加入OMS中，但是，還沒有設定連接器要與哪一個Application Insights整合<br><img src="/blogimage/Azure/15.jpg" width="700"></p>
<p>可以進入Data設定功能，找到Application Insights後，把你想要的Application Insights資源給加入進來，等都設定好之後，必須要等一段時間。讓OMS跟Application Insighs要資料進來<br><img src="/blogimage/Azure/16.jpg" width="700"></p>
<p>有資料後，就可以看到Dashboard的Application Insights方塊變了<br><img src="/blogimage/Azure/17.jpg" width="300"></p>
<p>這邊前提是，OMS只會抓取與Application Insights連接時間後的資料，如果之前的資料，並不會顯示被匯入到OMS中</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://i.ytimg.com/vi/RMYfSJ9GMeM/maxresdefault.jpg&quot;&gt;
&lt;p&gt;Application Insights好處在前面幾篇文章就有提到，尤其對於企業內部眾多的Application來說，Application I
    
    </summary>
    
      <category term="Azure Application Insights" scheme="http://edwardkuo.imas.tw/categories/Azure-Application-Insights/"/>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>讀取客製化Web.config / app.config的element</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/04/25/Net/Customelement/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/04/25/Net/Customelement/</id>
    <published>2017-04-24T16:00:00.000Z</published>
    <updated>2017-05-29T10:46:46.847Z</updated>
    
    <content type="html"><![CDATA[<img src="http://media.rehansaeed.com/rehansaeed/2014/02/NET.png">
<p>通常在<code>app.config</code>都是用原本預設的<code>element</code>，不過，今天為了自己的元件的設定，必須透過客製化的<code>element</code>作為元件的config，好久沒有研究這部分，所以，研究一下，終於被我弄出來，因此，在這紀錄一下，讓有後續想用的人可以參考</p>
<h3 id="自訂-config標籤"><a href="#自訂-config標籤" class="headerlink" title="自訂.config標籤"></a>自訂.config標籤</h3><hr>
<p>這裡自訂標籤如下，主要標籤分為三層，第一層<code>Token</code>為最外面標籤，等同於元件要開始讀取此設定的root位置，第二層<code>TokenTarget</code>，定義為設定值得Group集合，在<code>root</code>下，可以設定多個不同的Group，第三層<code>target</code>就是我們要讀得設定參數<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Token</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">TokenTarget</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">"File"</span> <span class="attr">IgnorePath</span>=<span class="string">""</span> <span class="attr">TokenPath</span>=<span class="string">""</span> <span class="attr">TokenDuration</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">"DB"</span>  <span class="attr">IgnorePath</span>=<span class="string">""</span> <span class="attr">TokenDuration</span>=<span class="string">"10"</span> <span class="attr">connectionString</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">TokenTarget</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Token</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>而<code>target</code>每個屬性都代表要給予的參數值，設定好自訂標籤的config，接下來就是要讀取標籤內的資料，Config內只設定這樣還不夠，還必須設定<code>&lt;configSections&gt;</code>中註冊要讀取這客製化標籤的元件名稱，例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"Token"</span> <span class="attr">type</span>=<span class="string">"CustomeXMLConfig.Token,CustomeXMLConfig"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>在這標籤中的<code>name</code>設定的是自訂標籤的第一層名字也就是<code>Token</code>，在type的設定格式，前者為<code>namespace</code>+第一層的Class名稱，後者為<code>namespace</code>，以這例子，namespace=CustomeXMLConfig，第一層的Class名稱是Token</p>
<h3 id="讀取客製化Config標籤資料"><a href="#讀取客製化Config標籤資料" class="headerlink" title="讀取客製化Config標籤資料"></a>讀取客製化Config標籤資料</h3><hr>
<p>在C#則是把XML的結構進行拆解，每一層其實都是一個物件，所以，先從最裡面的<code>target</code>開始，可以訂定如下的Class，使用之前必須先參考<code>System.Configuration</code>進來<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Target</span> : <span class="title">ConfigurationElement</span></div><div class="line">&#123;</div><div class="line">    [ConfigurationProperty(<span class="string">"type"</span>, IsRequired = <span class="literal">true</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Type =&gt; (<span class="keyword">string</span>)<span class="keyword">this</span>[<span class="string">"type"</span>];</div><div class="line"></div><div class="line">    [ConfigurationProperty(<span class="string">"IgnorePath"</span>, IsRequired = <span class="literal">false</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> IgnorePath =&gt; (<span class="keyword">string</span>)<span class="keyword">this</span>[<span class="string">"IgnorePath"</span>];</div><div class="line"></div><div class="line">    [ConfigurationProperty(<span class="string">"TokenPath"</span>, IsRequired = <span class="literal">false</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> TokenPath =&gt; <span class="keyword">this</span>[<span class="string">"TokenPath"</span>] == <span class="literal">null</span> ? <span class="string">""</span> : (<span class="keyword">string</span>)<span class="keyword">this</span>[<span class="string">"TokenPath"</span>];</div><div class="line"></div><div class="line">    [ConfigurationProperty(<span class="string">"TokenDuration"</span>, IsRequired = <span class="literal">false</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> TokenDuration =&gt; (<span class="keyword">int</span>)<span class="keyword">this</span>[<span class="string">"TokenDuration"</span>];</div><div class="line"></div><div class="line">    [ConfigurationProperty(<span class="string">"connectionString"</span>, IsRequired = <span class="literal">false</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ConnectionString =&gt; <span class="keyword">this</span>[<span class="string">"connectionString"</span>] == <span class="literal">null</span> ? <span class="string">""</span> : (<span class="keyword">string</span>)<span class="keyword">this</span>[<span class="string">"connectionString"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>IsRequired</code>是代表這屬性是為必要，如果是必要，在XML設定中就必須放入值進去，在<code>ConfigurationProperty</code>內定義要抓取在<code>target</code>內的屬性標籤名字，所以，這部分可以稱做是<code>Element</code></p>
<p>再來，就是第二層的<code>TokenTarget</code>，這裡則稱為<code>Collection</code>，在這裡必須告知在Collection裡面要抓的element名稱，必須給定是<code>target</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[ConfigurationCollection(<span class="keyword">typeof</span>(Target))]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TokenTarget</span> : <span class="title">ConfigurationElementCollection</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> PropertyName = <span class="string">"target"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> ConfigurationElementCollectionType CollectionType =&gt; ConfigurationElementCollectionType.BasicMapAlternate;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">string</span> ElementName =&gt; PropertyName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> ConfigurationElement <span class="title">CreateNewElement</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Target();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">GetElementKey</span>(<span class="params">ConfigurationElement element</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> ((Target) element).Type;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> Target <span class="keyword">this</span>[<span class="keyword">int</span> idx] =&gt; (Target)BaseGet(idx);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中，<code>Target this[int idx] =&gt; (Target)BaseGet(idx)</code>這一段可以讓你在後續要使用時候，可以列出<code>target</code>所具有的屬性</p>
<p>最後就是第一層的位置，如果在Collection只有一個<code>TokenTarget</code>時候，這邊就可以直接設定要讀取Property為<code>TokenTarget</code>物件，再由<code>TokenTarget</code>物件帶出<code>target</code>物件<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Token</span> : <span class="title">ConfigurationSection</span></div><div class="line">&#123;</div><div class="line">    [ConfigurationProperty(<span class="string">"TokenTarget"</span>)]</div><div class="line">    <span class="keyword">public</span> TokenTarget TokenTarget</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">get</span> =&gt; ((TokenTarget) (<span class="keyword">this</span>[<span class="string">"TokenTarget"</span>]));</div><div class="line">        <span class="keyword">set</span> =&gt; <span class="keyword">this</span>[<span class="string">"TokenTarget"</span>] = <span class="keyword">value</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上標籤對應的類別定義好之後，就可以去讀取它了，透過<code>GetSection</code>取得root名稱下的標籤，這邊root名稱為<code>Token</code><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> config = System.Configuration.ConfigurationManager.GetSection(<span class="string">"Token"</span>);</div></pre></td></tr></table></figure></p>
<p>抓出第二層的資訊<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> token = (config <span class="keyword">as</span> Token).TokenTarget;</div></pre></td></tr></table></figure></p>
<p>然後，再從第二層物件取得最後一層element的屬性<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; token.Count; i++)</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(token[i].Type);</div><div class="line">    Console.WriteLine(token[i].TokenDuration.ToString());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就這樣就可以把我們想要客製化element中的設定檔讀出來了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://media.rehansaeed.com/rehansaeed/2014/02/NET.png&quot;&gt;
&lt;p&gt;通常在&lt;code&gt;app.config&lt;/code&gt;都是用原本預設的&lt;code&gt;element&lt;/code&gt;，不過，今天為了自己的元件的設定
    
    </summary>
    
    
      <category term="C#" scheme="http://edwardkuo.imas.tw/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>開始建立SQL Server for Windows Containers</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/04/08/Docker/DockerSQL/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/04/08/Docker/DockerSQL/</id>
    <published>2017-04-08T14:59:31.000Z</published>
    <updated>2017-05-28T15:41:36.204Z</updated>
    
    <content type="html"><![CDATA[<img src="https://i.ytimg.com/vi/Q5POuMHxW-0/maxresdefault.jpg">
<p>有了Docker這項技術後，想要把<code>SQL Server</code>也放入到Docker中，自從SSMS 2016開始，管理工具與DB可以分開安裝後，就沒有在自己電腦安裝DB，但是，有時候在開發專案，並不可能隨時與DB連線，如果手邊沒有SQL Server也很不方便，所以，可以用<code>Docker</code>建立SQL Server，如果中間被搞壞了，也不用太害怕。此外，或許可以透過這樣方式解決一些實務上遇到SQL測試的另一種問題</p>
<p>此外，這篇實作環境在<code>Windows10</code>搭配<code>docker for windows</code>，並啟用<code>Windows Container</code></p>
<h2 id="安裝SQL-Server-Containers"><a href="#安裝SQL-Server-Containers" class="headerlink" title="安裝SQL Server Containers"></a>安裝SQL Server Containers</h2><hr>
<p>要安裝SQL Server，可以到Docker Store找到安裝指令，不過，如果在Docker Store開始找，可能只會找到<code>mssql-server-windows-express</code>這個Image，此時，不需要太緊張，因為，在這個<code>image</code>的文件中，有包含到<code>SQL Server for Windows Containers</code>的資訊，只要點擊它就可以找到<code>mssql-server-windows</code>，如果不想要找，也可以執行下面指令就可以開始安裝了<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p <span class="number">1433</span>:<span class="number">1433</span> -e sa_password=&lt;SA_PASSWORD&gt; -e ACCEPT_EULA=Y microsoft/mssql-server-windows</div></pre></td></tr></table></figure></p>
<p>如果是第一次，會需要一段時間下載相關性的image，這段時間會比較久一點，之後就不會了，如果下載完畢，就會開始解壓縮，並啟動Containers，之後每次要建立SQL Server Containers，只要重複執行這段指令就可以，另位，預設是透過SQL帳號進行登入，且帳號是用<code>sa</code>，所以，會透過<code>sa_password</code>設定<code>sa</code>密碼</p>
<h2 id="SSMS連線SQL-Server-Containers"><a href="#SSMS連線SQL-Server-Containers" class="headerlink" title="SSMS連線SQL Server Containers"></a>SSMS連線SQL Server Containers</h2><hr>
<p>使用<code>docker run</code>指令後，可以透過<code>docker ps</code>確認這個Container是否有啟動，若是有啟動成功，就會出現如下圖的資訊<br><img src="/blogimage/Docker/1.jpg" width="800"></p>
<p>但是，這樣不代表就可以讓SSMS連入，我們還必須要知道這台在Containers內的<code>SQL Server</code>的IP位置才行，所以，必須使用下面指令查詢SQL Server IP<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect --format <span class="string">"&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;"</span> ff04d07c4b51</div></pre></td></tr></table></figure></p>
<p>其中，<code>ff04d07c4b51</code>是代表你啟動這個Container的ID，用先前的<code>docker ps</code>就可以找到資訊，有了IP之後，就可以開心用SSMS連入了<br><img src="/blogimage/Docker/2.jpg" width="500"></p>
<p>如果，今天你忘記<code>sa</code>密碼，還可以用<code>docker exec</code>指令加入新的<code>sa</code>密碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it &lt;DOCKER_CONTAINER_ID&gt; sqlcmd -S. -Usa</div></pre></td></tr></table></figure></p>
<h2 id="網路問題"><a href="#網路問題" class="headerlink" title="網路問題?"></a>網路問題?</h2><hr>
<p>如果在SSMS中紀錄這次建立的Container的IP，若是移除這個Container後，重新建立時候，就有可能下次就無法登入，要做這測試很簡單，只要你把剛剛建立的Container移除，移除指令如下<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker stop ff04d07c4b51</div><div class="line">docker rm ff04d07c4b51</div></pre></td></tr></table></figure></p>
<p>然後，再建立一個新的Container，會發現SQL Server網路位置變了，這主要是因為在Windows Container內的網路是透過NAT方式進行對外公開，所以，會導致每次重建後，IP位置會有所變更，想要指定IP給SQL Server，就必須給予這個Container固定IP<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --ip <span class="number">172.20</span>.<span class="number">1.10</span> -d -p <span class="number">1433</span>:<span class="number">1433</span> -e sa_password=&lt;SA_PASSWORD&gt; -e ACCEPT_EULA=Y microsoft/mssql-server-windows</div></pre></td></tr></table></figure></p>
<p>這時候會很好奇，為什麼要給<code>172.20.1.10</code>，主要是Container內是透過<code>NAT</code>方式轉換IP，預設都會啟動<code>NAT</code>，又或是可以透過<code>docker network ls</code>查詢目前網路配置，就可以看到有啟動<code>NAT</code>了，不過，這樣依舊無法知道<code>NAT</code>配置IP範圍，所以， 要知道IP的分配範圍<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker network inspect nat</div></pre></td></tr></table></figure></p>
<img src="/blogimage/Docker/3.jpg" width="700">
<p>這樣就可以知道了IP範圍，就可以啟動Container時候去指定IP，指定的IP必須在NAT範圍內，不然會發生錯誤</p>
<h2 id="匯入資料"><a href="#匯入資料" class="headerlink" title="匯入資料"></a>匯入資料</h2><hr>
<p>到這一步，還不能高興太早，因為，我們還沒有把資料匯入進去，因此，就必須讓Container能讀取外部資料夾或是檔案，才可以把DB還原到Container的SQL Server裡面。把資料匯入SQL Server有兩種方式，一種就是用掛載<code>mdf</code>檔案，另一種就是直接匯入備份檔，我比較習慣用匯入備份檔方式進行，所以，必須把正式區DB備份下來，這裡假設是放到<code>E:\DB</code>下面，然後，我們需要透過資料夾mapping方式，將Container內的資料夾與外部資料夾連結起來，如果有用過VM人大概可以了解這意思。<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it --ip <span class="number">172.20</span>.<span class="number">1.10</span> -d -p <span class="number">1433</span>:<span class="number">1433</span> -e sa_password=&lt;SA_PASSWORD&gt; -e ACCEPT_EULA=Y -v e:/DB/:c:/DB/ microsoft/mssql-server-windows</div></pre></td></tr></table></figure></p>
<p>我們把Container內的<code>c:\DB</code>對應到<code>E:\DB</code>，就可以在SQL Server還原DB時候找到這個備份的DB檔案<br><img src="/blogimage/Docker/4.jpg" width="300"><br>以上就可以把SQL Server Container建立起來，並匯入我們想要的DB，如果想要一氣呵成的話，也是可以，不用每次要建立Container都花這樣多工，整個指令如下，其中有一點不同的是，在這邊我們指定了Container Name，讓後續操作可以直接使用Container Name而不是用Container ID<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run -it --name SQLTest --ip XXX.XXX.XXX.XXX -d -p <span class="number">1433</span>:<span class="number">1433</span> -e sa_password=&lt;SA_PASSWORD&gt; -e ACCEPT_EULA=Y -v e:/DB/:c:/DB/ microsoft/mssql-server-windows</div><div class="line"></div><div class="line">docker exec SQLTest SqlCmd -E -S XXX.XXX.XXX.XXX -Q <span class="string">"RESTORE DATABASE [DEV_EAS] FROM  DISK = N'C:\db\XXX.bak' WITH  FILE = 1,  MOVE N'XXX' TO N'C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\XXX.mdf',  MOVE N'XXX_log' TO N'C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\XXX_log.ldf',  MOVE N'XXX_mod1' TO N'C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\XXX_mod1',  NOUNLOAD,  STATS = 5"</span></div></pre></td></tr></table></figure></p>
<p>第二個步驟主要是透過<code>SqlCmd</code>做還原DB的動作，從<code>&quot;Restore XXXXX&quot;</code>這一段就是SQL中還原DB指令，這樣我們就可以很快啟動一個具有資料的SQL Server Container了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://i.ytimg.com/vi/Q5POuMHxW-0/maxresdefault.jpg&quot;&gt;
&lt;p&gt;有了Docker這項技術後，想要把&lt;code&gt;SQL Server&lt;/code&gt;也放入到Docker中，自從SSMS 2016開始，管理工具與D
    
    </summary>
    
    
      <category term="Docker" scheme="http://edwardkuo.imas.tw/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>用Azure Web App內的Continuous Delivery快速建置VSTS的CI / CD流程</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/04/02/Azure/VSTSWebAPP/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/04/02/Azure/VSTSWebAPP/</id>
    <published>2017-04-01T16:00:00.000Z</published>
    <updated>2017-05-29T06:08:27.889Z</updated>
    
    <content type="html"><![CDATA[<img src="https://ncmedia.azureedge.net/ncmedia/2016/12/ai-58b8577beae92.gif">
<p>如果版控是用VSTS，我們可以在VSTS裡面設定<code>Continuous Build</code>&amp;<code>Continuous Release</code>，讓我們的Web專案可以自動化建置到自動化佈署，且佈署到Azure Web App又有Task可用，基本上只需要把相關屬性設定完成，就可以運作，整體來說並會太困難</p>
<p>但是，對於VSTS不熟的人，可能要花一點時間去了解如何設定這些Task，才能讓<code>Continuous Build</code>&amp;<code>Continuous Release</code>很順利進行，這樣下來也是需要一點時間，尤其是在<code>Release</code>部分，還要需要額外設定<code>Service Endpoint</code>跟Azure做連接。這一點就需要花一點工了。</p>
<p>現在，想要省掉這些步驟，是可以直接在Azure的Web App屬性中，直接使用<code>Continuous Delivery</code>幫忙去完成VSTS上的CI / CD。在這實作有一個前提要注意的，要用Azure Web App的Continuous Delivery，必須確認你登入Azure的Account，和登入VSTS的Account是否相同，如果，今天你登入Azure和登入VSTS的Account是不相同，就不能用這樣的功能。如果，兩者是相同，就順便在Azure中與VSTS做link吧。做法可以參考這篇<strong><a href="&#39;http://edwardkuo.imas.tw/paper/2016/06/14/Azure/2016-06-15/&#39;">從Azure管理Visual Studio Team Services服務</a></strong></p>
<h3 id="開始設定Continuous-Delivery"><a href="#開始設定Continuous-Delivery" class="headerlink" title="開始設定Continuous Delivery"></a>開始設定Continuous Delivery</h3><hr>
<img src="/blogimage/Azure/1.jpg" width="700">
<p>到Web App的<code>Deployment</code>就可以看到<code>Continuous Delivery</code>，一開始還沒有設定前，會如上圖所示，由於，這目前還在<code>Preview</code>階段，所以，部分功能可能有點陽春，不過，我實作後發現，其實基本的設置已經滿足一個.NET的Web了，看到畫面中的<code>Config</code>，我們按下<code>Config</code>，就開始設定相關Build &amp; Release了</p>
<p>整個設定流程中，不外乎是<code>Source</code>,<code>Build</code>,<code>Test</code>和<code>Release</code>循環，這跟在VSTS上的流程是相同的，如果有在VSTS自行設定過的，對這就不會太陌生，如果從未自己設定過這部分流程，這邊也會一步一步指導設定完成，且會比在VSTS上設定簡單許多，很多部分都自動化幫你做完了<br><img src="/blogimage/Azure/2.jpg" width="300"></p>
<h3 id="設定Souce"><a href="#設定Souce" class="headerlink" title="設定Souce"></a>設定Souce</h3><hr>
<img src="/blogimage/Azure/3.jpg" width="300">
<p>前面提到，如果在Azure裡面，你的Visual Studio Team Services account已經與Azure綁定，這邊資訊就會自動帶出來，在VSTS放程式碼的地方叫做<code>Code</code>，這裡是用<code>Source</code>，但是意思是相同，裡面有幾個屬性分別如下</p>
<ul>
<li>Project : VSTS內的專案</li>
<li>Repository : VSTS內Code的位置</li>
<li>Branch : 選擇要部署的Branch</li>
</ul>
<h3 id="設定Build"><a href="#設定Build" class="headerlink" title="設定Build"></a>設定Build</h3><hr>
<img src="/blogimage/Azure/4.jpg" width="500">
<p>設定要Build專案的Framework，目前只有提供<code>ASP.NET</code> &amp; <code>ASP.NET Core</code>，其他Web，我想這邊因該沒有辦法直接Build，如果，設定完成後，會自動在VSTS的<code>Build</code>中，長出這樣的建置流程，而這個流程。基本上就包含所有建置該有的Task了<br><img src="/blogimage/Azure/5.jpg" width="500"></p>
<p>很多人在build Solution的<code>MS Build Arguments</code>可能不會進行設定，而這邊會在<code>build Solution</code>的<code>MS Build Arguments</code>內設定參數，參數內容主要是把專案發行成Package，<code>Release</code>則可以透過Web Deploy方式佈署到Azure<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation=&quot;$(build.artifactstagingdirectory)\\&quot;</div></pre></td></tr></table></figure></p>
<p>雖然，透過這樣方式會幫你在VSTS自動化建置好<code>Build</code>的Task流程，但是，不代表我們不能自行修改，我們也可以在依照自己的特性，去修改<code>Build</code>裡面每個Task屬性<br>或是增加Task，讓整個Build是可以符合本身專案需求。不過，有一點我沒有特別嘗試，就是如果是非.NET專案，例如<code>PHP</code>專案，我在Azure Web App設定Continuous Delivery，這樣的結果會是如何?</p>
<p>我猜想它依舊會建立相同流程的Task，只是這些流程可能不符合PHP特性，造成Build Fail，自己必須手動在修改這裡面所有<code>Task</code>，但是，這樣似乎降低在Web App內使用<code>Continuous Delivery</code>的方便性，畢竟，如果客製化或是手動程度高，這樣想要省工的地方也沒多了，跟自己在VSTS內設定並沒有差太多，而剩下唯一好處就是在Web App內，可以看到VSTS佈署到Web App的相關資訊，不需要再到VSTS內看<br><img src="/blogimage/Azure/6.jpg" width="600"></p>
<h3 id="設定Test-amp-Deploy"><a href="#設定Test-amp-Deploy" class="headerlink" title="設定Test &amp; Deploy"></a>設定Test &amp; Deploy</h3><hr>
<p>設定Test，這邊主要是設定<code>Loading Test</code>，如果本身沒有做這部分，就可以忽略不需要設定，如果有，這邊只需要開起就可以，另外，在<code>Deploy</code>部分，也只要打開就可以，會自動幫你在VSTS的Release設定好Deploy Task<br><img src="/blogimage/Azure/7.jpg" width="600"></p>
<p>其中，連要在<code>Azure App Service Deploy</code>中的<code>Service Endpoint</code>都幫你設定好，也會自動幫你跟之前建立的<code>Build</code>綁定，就可以做到CI &amp; CD</p>
<p>如果要在VSTS做到更細緻化，這樣方式只是幫我們把骨幹建立出來，其餘部分，還是建議到VSTS內去做調整，在管理上也會比較方便點</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://ncmedia.azureedge.net/ncmedia/2016/12/ai-58b8577beae92.gif&quot;&gt;
&lt;p&gt;如果版控是用VSTS，我們可以在VSTS裡面設定&lt;code&gt;Continuous Build&lt;/code&gt;&amp;amp;
    
    </summary>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>透過參考數值設定In Memory Table的Index</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/03/23/SQL/Memorytableindex/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/03/23/SQL/Memorytableindex/</id>
    <published>2017-03-22T16:00:00.000Z</published>
    <updated>2017-05-29T15:44:44.908Z</updated>
    
    <content type="html"><![CDATA[<img src="https://mspoweruser.com/wp-content/uploads/2016/05/Microsoft-SQL-Server-2016.jpg">
<p>自從SQL 2014開始，有了<code>In Memory Table</code>感覺在效能上又多了一道曙光，而到了<code>SQL 2016</code>這部分又更強化了，可用的SQL語句又增加，雖然<code>In Memory Table</code>是可以增加效能，但是，如果沒有設定好index反而會造成效益不彰的狀況，這幾天針對這部分進行一些調教，原本以為跟傳統資料表設定index一樣，最後發其實沒有這樣簡單，反而相對複雜，主要是因為在<code>In Memory Table</code>中的Index多了一個<code>BUCKET_COUNT</code>需要考量，設定太大，則消耗記憶體，設定太小速度反而更慢。在<code>In Memory Table</code>中除了叢集索引外，還可以設定非叢集索引，非叢集索引分為兩類</p>
<ul>
<li>非叢集索索引 : Index…..NONCLUSTERED</li>
<li>雜湊型非叢集索引 : Index…..NONCLUSTERED HASH…..WITH (BUCKET_COUNT = 20)</li>
</ul>
<p>這兩種索引要去設定，還真的會讓人搞昏，所以，藉由一些參考值讓我們至少有一些些依據可以設定，而非盲目的亂設定，尤其是BUCKET_COUNT的大小</p>
<h2 id="BUCKET-COUNT-值參考"><a href="#BUCKET-COUNT-值參考" class="headerlink" title="BUCKET_COUNT 值參考"></a>BUCKET_COUNT 值參考</h2><hr>
<p>如果你設定的索引值，在資料表內的資料重複性相當高的時候，建議採用<strong>非叢集索引</strong>，反之，該索引所造成的資料重複性小的時候，建議採用<strong>雜湊型非叢集索</strong>，造成這兩差異主要在於<code>BUCKET_COUNT</code>的設計，而就官方說法，如果這個索引中你無法很明確設定<code>BUCKET_COUNT</code>值，就要改用<code>非叢集索引</code>。若是，確定要設定NONCLUSTERED HASH index時，不知道怎樣設定<code>BUCKET_COUNT</code>大小時候，可以透過下面語法的值去設定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span>    <span class="keyword">POWER</span>(<span class="number">2</span>, <span class="keyword">CEILING</span>(<span class="keyword">LOG</span>(<span class="keyword">COUNT</span>(<span class="number">0</span>)) / <span class="keyword">LOG</span>(<span class="number">2</span>))) <span class="keyword">AS</span> <span class="string">'BUCKET_COUNT'</span></div><div class="line"><span class="keyword">FROM</span>      ( <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></div><div class="line">                      A,B</div><div class="line">            <span class="keyword">FROM</span>      <span class="keyword">Table</span></div><div class="line">          ) [T];</div></pre></td></tr></table></figure></p>
<p>其中<code>A</code>&amp;<code>B</code>就是要設定索引的欄位，由這樣方式可以計算出BUCKET_COUNT值，再由這個值去設定或是比這個值大兩倍去設定都是可以</p>
<h2 id="調整非叢集索引類型"><a href="#調整非叢集索引類型" class="headerlink" title="調整非叢集索引類型"></a>調整非叢集索引類型</h2><hr>
<p>索引不是一開始建立後就可以不管它，畢竟，當資料流穩定之後，還是必須回頭看看設定的index是否是有確實被用到或是有遺漏的，而在<code>In Memory Table</code>中，也必須確定倒底是要設定雜湊型還是非雜湊型。所以，要在Review一下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> OBJECT_NAME([hs].[object_id]) <span class="keyword">AS</span> <span class="string">'object name'</span></div><div class="line">      ,[i].[<span class="keyword">name</span>] <span class="keyword">AS</span> <span class="string">'index name'</span></div><div class="line">      ,[hs].[total_bucket_count]</div><div class="line">      ,[hs].[empty_bucket_count]</div><div class="line">      ,<span class="keyword">FLOOR</span>(( <span class="keyword">CAST</span>([empty_bucket_count] <span class="keyword">AS</span> <span class="built_in">FLOAT</span>) / [total_bucket_count] )</div><div class="line">             * <span class="number">100</span>) <span class="keyword">AS</span> <span class="string">'empty_bucket_percent'</span></div><div class="line">      ,[hs].[avg_chain_length]</div><div class="line">      ,[hs].[max_chain_length]</div><div class="line"><span class="keyword">FROM</span>   [<span class="keyword">sys</span>].[dm_db_xtp_hash_index_stats] <span class="keyword">AS</span> [hs]</div><div class="line">       <span class="keyword">JOIN</span> [<span class="keyword">sys</span>].[<span class="keyword">indexes</span>] <span class="keyword">AS</span> [i]</div><div class="line">       <span class="keyword">ON</span> [hs].[object_id] = [i].[object_id]</div><div class="line">          <span class="keyword">AND</span> [hs].[index_id] = [i].[index_id];</div></pre></td></tr></table></figure></p>
<p>透過上面語法，透過一些指標去判定設定Index是否合宜。</p>
<ul>
<li>empty_bucket_percent : 小於 10%，表示這個值區計數可能太低，理想的應該是33%或更高</li>
<li>avg_chain_length : 表示是否有重複值，理想的平均鏈結長度為 1</li>
</ul>
<p>因此，在這兩個值中，如果 avg_chain_length 大於 10，且 empty_bucket_percent 大於 10%，則可能有許多重複的索引鍵值，那麼非叢集索引會較為理想，而不是設定雜湊的非叢集索。當發現empty_bucket_percent過小或是趨近於0，就必須看是否要把BUCKET_COUNT值調大了</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><hr>
<p><a href="https://msdn.microsoft.com/zh-tw/library/dn494956(v=sql.120" target="_blank" rel="external">https://msdn.microsoft.com/zh-tw/library/dn494956(v=sql.120).aspx</a>.aspx)</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://mspoweruser.com/wp-content/uploads/2016/05/Microsoft-SQL-Server-2016.jpg&quot;&gt;
&lt;p&gt;自從SQL 2014開始，有了&lt;code&gt;In Memory Table&lt;/code&gt;感
    
    </summary>
    
    
      <category term="T-SQL" scheme="http://edwardkuo.imas.tw/tags/T-SQL/"/>
    
  </entry>
  
  <entry>
    <title>VSTS佈署Xamarin.iOS到Hockeyapp，自動更新版號和切換BundleIdentifier</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/03/15/Devops/VSTSHockyApp/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/03/15/Devops/VSTSHockyApp/</id>
    <published>2017-03-14T16:00:00.000Z</published>
    <updated>2017-05-28T15:46:30.780Z</updated>
    
    <content type="html"><![CDATA[<img src="https://static01.nyt.com/images/2016/09/09/well/mind/well_MIRL_stoplight/well_MIRL_stoplight-superJumbo-v2.gif">
<p>在VSTS上面，可以建置Xamarin並將App發佈到HockeyApp上面進行，就可以讓用戶透過HockeyApp下載App，且HockeyApp本身可以讓APP有更新上架後，讓用戶開啟App之後，自動跳出更新App的訊息，這樣好處就可以減少開發人員再去做版本更新的通知功能。HockeyApp其背後的通知更新的機制在於<code>Build</code>版號要更新，才會通知有下載用戶說有新版本上架，換句話說如果只是單純上架新版的<code>ipa</code>是沒有用的<br><img src="/blogimage/HockeyApp/1.jpg" width="600"></p>
<p>要做到版本更新，手動方式就是在<code>Hockapp</code>介面去調整<code>build number</code>，不過，這樣似乎有一點麻煩，期望可以這部分自動化，讓<code>ipa</code>檔上傳後就自動更新版號。因此，必須在VSTS做一些設定即可</p>
<h3 id="自動更新版號"><a href="#自動更新版號" class="headerlink" title="自動更新版號"></a>自動更新版號</h3><hr>
<p>要做到自動更新版號，主要需了解HockeyApp版號的控制，由下圖可以知道，版號的取得是來自於<code>plist</code>檔案中的<code>CFBundleVersion</code>數值<br><img src="/blogimage/HockeyApp/2.jpg" width="600"></p>
<p>只要知道它取得資訊地方，基本上在VSTS內要做到修改版號這件事情就簡單多。只要我們在<code>Build</code>的時候，去修改<code>CFBundleVersion</code>數值，不就可以了嗎?基於此想法，所以，後續動作就是修改<code>plist</code>檔案。</p>
<p>預設在VSTS裡面並沒有像MAC有方便更新<code>plist</code>的工具，所以，需安裝一個套件來幫我們簡化這個步驟，套件名稱為<code>Colin&#39;s ALM Corner Build &amp; Release Tools</code></p>
<img src="/blogimage/HockeyApp/3.jpg" width="600">
<p>這工具可以修改東西有這些:</p>
<ul>
<li>Version Assemblies</li>
<li>Replace Tokens</li>
<li>DacPac Change Report Task</li>
<li>Tokenizer</li>
<li>Coverage Gate</li>
</ul>
<p>主要是透過<code>Version Assemblies</code>方式去修改<code>plist</code>檔案，原本Build Xamarin流程</p>
<img src="/blogimage/HockeyApp/4.jpg" width="400">
<p>我們加上一個<code>Version Assemblies</code> Task，輔助我們修改<code>plist</code>檔案</p>
<img src="/blogimage/HockeyApp/5.jpg" width="500">
<p>在這Task幾個項目要設定</p>
<ul>
<li>Source Path : 要取得<code>plist</code>檔案目錄</li>
<li>File Pattern : 這邊當然是指定plist檔案囉，<code>/Info.plist</code></li>
<li>Version Source : 設定版本號的來源，可以使用Build Number或自訂變數，如果你要有自己的版本號設定，就選用自訂變數，不過，這邊的自訂變數，必須切記要符合Apple版本的編碼格式:<code>1.0.0</code></li>
<li>Variable to use : 要使用的自訂變數，這邊一般可以使用<code>Build.BuildNumber</code>，原本因該是<code>$Build.BuildNumber</code>，但是這邊不可以加上<code>$</code></li>
<li>Version Extract Pattern : 原本版本的型態格式，這邊使用<code>Custom Regex</code>，由我們來定義，符合<code>plist</code>內的CFBundleVersion格式</li>
<li>Custom Regex Find Pattern : Regex的表達式:<code>(?:\d+\.\d+\.)(\d+)</code>，就直接抄這個，不需要變更</li>
</ul>
<p>這運作機制，其實就是幫忙找到<code>plist</code>檔案，有設定<code>CFBundleVersion</code>版本的地方，用<code>$Build.BuildNumber</code>去Replace原本設定值，另外，在Advanced的<code>Replace Pattern</code>設定為<code>1.0.0</code>，且一個重點就是<code>Build Regex Group Index</code>必須視為0</p>
<img src="/blogimage/HockeyApp/6.jpg" width="500">
<p>因此，當每次build完後，就可以增量增加版號，這時候再把build好的ipa檔，傳到HockeyApp就可以</p>
<h3 id="切換bundle-identifier"><a href="#切換bundle-identifier" class="headerlink" title="切換bundle identifier"></a>切換bundle identifier</h3><hr>
<p>我們都知道在iOS中BundleIdentifier名稱是唯一的，且每個名稱都會帶入一個憑證。一般我們在開發階段可以使用apple <code>develop</code>的憑證，做開發與發佈。不過，如果要正式發布給用戶安裝，就不能使用開發的憑證，必須到正式發布的憑證，憑證的改變還算簡單，這要在<code>Build Xamarin.iOS</code>的Task中，去更換<code>P12 Certificate File</code>,<code>P12 Password</code> &amp; <code>Provisioning Profile File</code>對應的資訊就可以</p>
<img src="/blogimage/HockeyApp/7.jpg" width="500">
<p>但是，困難的是修改bundle identifier，畢竟在開發階段是不會設定bundle identifier為正式發布的名稱，而是當我們要Release時候，才會進行變更。要做這方面原本以為很困難，不過，發現這資訊也是被綁在<code>plist</code>檔案內，這時候發現一道曙光。就是如上面更新版號一樣作法去修改<code>plist</code>檔案</p>
<p>不過，這邊操作起來就簡單許多，因為我們只要Replace開發用的<code>BundleIdentifier</code>名稱，換成正式發布的名稱就可以，這樣上面會動到的地方有:</p>
<ul>
<li>Variable to use : 用變數指定正式發布名稱</li>
<li>Version Extract Pattern : 一樣用Custom Regex</li>
<li>Custom Regex Find Pattern : 設定測試的<code>BundleIdentifier</code>的名字，後面可以直接Replace這個名字<br>另外，在Advanced設定</li>
<li>Custom Regex Replace Pattern : 設定測試的<code>BundleIdentifier</code>的名字</li>
<li>Replace Pattern : 設定Custom Regex</li>
<li>Build Regex Group Index : 設定為0</li>
</ul>
<p>這樣就可以變更名稱了，以上這些步驟都要在build之前，這樣才會把資訊跟ipa檔一起打包</p>
<p>所以，後續只要透過Branch去拆分開發與正式版本就可以，也就可以達到自動化佈署與切換的功能</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://static01.nyt.com/images/2016/09/09/well/mind/well_MIRL_stoplight/well_MIRL_stoplight-superJumbo-v2.gif&quot;&gt;
&lt;p&gt;在VSTS上面，可以建置Xa
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>無法刪除Docker資料夾中的windowsfilter目錄</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/03/10/Docker/Deletewindowsfilter/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/03/10/Docker/Deletewindowsfilter/</id>
    <published>2017-03-09T16:00:00.000Z</published>
    <updated>2017-05-28T15:42:13.874Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.docker.com/sites/default/files/Docker_Survey_%232_v04.0-01.png">
<p>因為安裝了Docker for Windows，並透過<code>Docker</code>指令去抓取Docker Store中的image後發現，在Docker預設是把image放在<code>C:\ProgramData\Dock</code>路徑下，這樣我C槽如果要放很多種image，有可能就不夠大了，於是想要把Image放到其他地方。這時候可以透過Docker for Windows中的Setting去修改預設路徑</p>
<img src="/blogimage/Docker/110.jpg" width="700">
<p>這邊只要加入<code>&quot;graph&quot;: &quot;d:\\Docker&quot;</code>就可以</p>
<p>不過，當我可以把後續相關image檔案下載到新的路徑，但是原生舊的檔案，還是必須要移除掉，不然怎釋放空間呢?這時候，不管我用甚麼指令去移除<code>C:\ProgramData\Dock</code>內的<code>windowsfilter</code>目錄，始終顯示我沒有存取權限，因此，就無法移除這個資料夾，剛好這資料夾又放特別多大的檔案，其他檔案大小其實不大，對於釋放空間幫助有限。</p>
<p>我猜這是<code>Docker</code>指令中的一個bug，要能移除這個資料夾，必須使用<code>docker-ci-zap.exe</code>指令去刪除此資料，此檔案下載位置</p>
<ul>
<li><a href="https://github.com/jhowardmsft/docker-ci-zap" target="_blank" rel="external">https://github.com/jhowardmsft/docker-ci-zap</a></li>
</ul>
<p>下載後，只要去執行這個執行檔，指令很簡單<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker-ci-zap.exe -folder 資料夾路徑</div><div class="line">範例</div><div class="line">docker-ci-zap.exe -folder &quot;C:\ProgramData\Docker&quot;</div></pre></td></tr></table></figure></p>
<p>這樣就可以徹底把<code>windowsfilter目錄</code>給刪除掉了，另外，再刪除前，記得要關掉dock for windows，如果還是無法刪除，就重新開機後，再次執行就可以了。如果刪除完畢後會顯示<code>INFO: Zapped successfully</code>，這樣就完成囉</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://www.docker.com/sites/default/files/Docker_Survey_%232_v04.0-01.png&quot;&gt;
&lt;p&gt;因為安裝了Docker for Windows，並透過&lt;code&gt;Docker&lt;/code&gt;指令去抓
    
    </summary>
    
    
      <category term="Docker" scheme="http://edwardkuo.imas.tw/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Powershell刪除檔案和更改檔名</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/03/01/PowerShell/PowershellFile/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/03/01/PowerShell/PowershellFile/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2017-05-29T10:48:18.038Z</updated>
    
    <content type="html"><![CDATA[<img src="http://static.wixstatic.com/media/94e66f_cc6315f5bf1e43aca75ca1810f880907~mv2.gif/v1/fill/w_1600,h_900,al_c,q_90/file.jpg">
<p>之前在研討會曾提過，要把自動化程序搞好，善用<code>PowerShell</code>是不可少的，尤其在企業內部的管理面上，不使用<code>PowerShell</code>感覺還是卡卡的。在這邊分享如何用<code>PowerShell</code>去更改檔案名稱以及把過期檔案給刪除</p>
<h3 id="更改檔案名稱"><a href="#更改檔案名稱" class="headerlink" title="更改檔案名稱"></a>更改檔案名稱</h3><hr>
<p>抓取某個資料夾中指定的副檔名，並修改成自己想要的副檔名。透過<code>Get-ChildItem</code>把該資料夾內的檔案列表抓出來。其中，為了讓整個<code>.ps</code>更靈活，所以，這邊採用<code>$args[0]</code>讓外部可以輸入參數進來</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$file</span>=<span class="built_in">Get-ChildItem</span> -Path <span class="variable">$args</span>[<span class="number">0</span>] -File</div></pre></td></tr></table></figure>
<p>這邊主要抓取該資料夾中副檔名為<code>.dll</code>的檔案，如果是<code>.dll</code>就把副檔名變更成<code>.XXX</code>，其中，使用<code>BaseName</code>抓取檔名，用<code>Extension</code>取得副檔名</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ForEach</span>  (<span class="variable">$item</span> <span class="keyword">in</span> <span class="variable">$file</span>)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="variable">$item</span>.Extension <span class="nomarkup">-eq</span> <span class="string">'.dll'</span>)</div><div class="line">  &#123;</div><div class="line">      <span class="variable">$newFileName</span>= <span class="variable">$item</span>.BaseName+<span class="string">'.XXX'</span></div><div class="line">      <span class="built_in">Rename-Item</span>   <span class="variable">$item</span>.FullName <span class="variable">$newFileName</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>Rename-Item</code>修改檔案名稱，其語法如下，<code>FullName</code>是取得檔名+副檔名</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Rename-Item</span> 原始檔名 新黨案名稱</div></pre></td></tr></table></figure>
<p>這樣就可以修改檔案名稱</p>
<h3 id="刪除備份檔案"><a href="#刪除備份檔案" class="headerlink" title="刪除備份檔案"></a>刪除備份檔案</h3><hr>
<p>刪除備份檔案，主要動作就是透過<code>PowerShell</code>刪除檔案，其做法跟前面修改檔名方式相同，也是必須透過<code>Get-ChildItem</code>取得該資料夾檔案列表，因為，要判對檔案的最後修改日期是否有過期，所以，必須抓取今日時間，語法如下<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$Currentlytime</span>=<span class="built_in">Get-Date</span></div></pre></td></tr></table></figure></p>
<p>有了現在時間後，就是判斷檔案最後修改時間，藉由<code>LastWriteTime</code>抓取檔案最後修改時間，利用<code>AddDays</code>可以對<code>$Currentlytime</code>做時間的運算<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="variable">$item</span>.LastWriteTime -ile <span class="variable">$Currentlytime</span>.AddDays(<span class="variable">$args</span>[<span class="number">1</span>])) &#123;</div><div class="line">    <span class="built_in">Remove-Item</span> <span class="variable">$item</span>.FullName | <span class="built_in">out-null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>若是要刪除30天前的檔案，外部輸入就設定<code>-30</code>，這樣就可以把<code>-30</code>值帶入時間運算。然後，再用<code>Remove-Item</code>把檔案給刪除，這裡需要使用<code>fullName</code>才可以，完整範例<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ForEach</span>  (<span class="variable">$item</span> <span class="keyword">in</span> <span class="variable">$file</span>) &#123;</div><div class="line">    <span class="keyword">if</span>( <span class="variable">$item</span>.LastWriteTime -ile <span class="variable">$Currentlytime</span>.AddDays(<span class="variable">$args</span>[<span class="number">1</span>])) &#123;</div><div class="line">        <span class="built_in">Remove-Item</span> <span class="variable">$item</span>.FullName | <span class="built_in">out-null</span></div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://static.wixstatic.com/media/94e66f_cc6315f5bf1e43aca75ca1810f880907~mv2.gif/v1/fill/w_1600,h_900,al_c,q_90/file.jpg&quot;&gt;
&lt;p&gt;之前在
    
    </summary>
    
    
      <category term="PowerShell" scheme="http://edwardkuo.imas.tw/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>善用VSTS的Library功能管理參數</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/02/14/Devops/VSTSLibrary/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/02/14/Devops/VSTSLibrary/</id>
    <published>2017-02-13T16:00:00.000Z</published>
    <updated>2017-05-28T15:45:51.425Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.slate.com/content/dam/slate/articles/technology/seven_wonders/2014/11/141209_7Wonders_WaterHero.gif.CROP.original-original.gif">
<p>大部專案都透過VSTS來進行佈署，雖然專案多，但是其實很多時候要設定的參數往往都相同，或是要佈署的路徑可能有80%是一樣，就必須每次都設定一次，或是說要用到一些Command的指令，在不同專案可能要寫一樣，若是，當中有需要變換指令寫法，就必須記住那些專案有用到，然後去改他，這樣非常不方便。再者，有些設定參數可能是具有安全性，不適合寫在<code>Task</code>中。</p>
<p>基於上面一些理由，就可以透過VSTS的Library來做管理，目前可以在<code>Release</code>的Definitions引入Library設定的變數群組，<code>Build</code>的Deginition目前還無法使用變數群組功能<br><img src="/blogimage/VSTS/3.jpg" width="600"></p>
<p>另外，變數群組是依附<code>Project</code>，無法跨<code>Project</code>共用</p>
<h3 id="設定Library"><a href="#設定Library" class="headerlink" title="設定Library"></a>設定Library</h3><hr>
<p>進入Library後，就可以替每個參數設定想要的群組，另外，在<strong>安全性</strong>部分，可以設定甚麼人可以進來編輯群組資訊<br><img src="/blogimage/VSTS/4.jpg" width="600"></p>
<p>在主要Library上的安全性，是控管可以進入使用Libray的成員。<br><img src="/blogimage/VSTS/6.jpg" width="600"></p>
<p>然後，使用<code>新增群組</code>，就可以增加變數群組，可以把相關屬性的變數歸納一起，設定變數方式很簡單，就只是<strong>Key</strong> &amp; <strong>Value</strong>方式<br><img src="/blogimage/VSTS/5.jpg" width="600"></p>
<p>這時候，我們可以看見，設定安全性的地方，在這邊可以針對這個群組去設定使用人員的角色，做進一步群組安全性的管控<br><img src="/blogimage/VSTS/7.jpg" width="400"></p>
<ul>
<li>Reader : 只能看到Item，但不能使用裡面的參數</li>
<li>User : 可以使用參數，但是不能管理Item</li>
<li>Administrator : 可以管理Item</li>
</ul>
<h3 id="使用Libray變數群組"><a href="#使用Libray變數群組" class="headerlink" title="使用Libray變數群組"></a>使用Libray變數群組</h3><hr>
<p>設定完變數群組後，再來就是到Release Definitions中去引用它。<br><img src="/blogimage/VSTS/8.jpg" width="500"></p>
<p>選擇<code>Variable Group</code>，就可以搜尋在Libray類設定群組。只要把想要納入的變數組加入，就可以看到群組相關設定變數的值<br><img src="/blogimage/VSTS/9.jpg" width="500"></p>
<p>在變數的<code>value</code>中，是以字串形式呈現，可以讓你設定任何資訊。只要把<code>Variable Group</code>引入到這個Definitions中，在任何的Task就可以使用它。使用變數語法是<code>$(變數名稱)</code><br><img src="/blogimage/VSTS/10.jpg" width="500"></p>
<p>藉由這方式進行管理，就會非常方便，當之後有變數要變動時候，就可以集中修改，不忘記有那些沒有變更到</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://www.slate.com/content/dam/slate/articles/technology/seven_wonders/2014/11/141209_7Wonders_WaterHero.gif.CROP.original-origi
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>快速刪除VSTS Package某一個元件所有的版本</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/02/09/Devops/DeletePackageVSTS/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/02/09/Devops/DeletePackageVSTS/</id>
    <published>2017-02-08T16:00:00.000Z</published>
    <updated>2017-05-28T15:44:22.278Z</updated>
    
    <content type="html"><![CDATA[<img src="http://mohamedradwan.com/wp-content/uploads/2016/07/0-Release-Management-Overview-for-TFS-and-VSTS.jpg">
<p>VSTS Packages可以讓我們自訂團隊的Nuget Service，我們可以把自訂元件放到VSTS內，並分享給團隊人使用，一般來說這樣應用問題不太大，不過，用一段時間發現一個問題，就是當要把這個元件從Package Feed移掉時候，並沒有想像中簡單。雖然，介面上有提供<strong>Unlist</strong> &amp; <strong>Delete Package</strong>，前者是讓這個版本不顯示在Feed上面，後者則是把這版本元件給刪除，當然同時也不會顯示在Feed上面。</p>
<img src="/blogimage/VSTS/1.jpg" width="700">
<p>又或者不想透過介面去刪除，也可以透過Nuget指令刪掉。不過，這樣都只能一個一個手動處理，似乎不太方便，介面也不能多選後刪除，在管理上，想讓這個元件完全消失在團隊的Feed列表，就必須刪除這個元件所有版本才可以，這樣可能會按到手痠，因此，這一段就必須自己寫一點點小程式讓它自動刪除所有版本。</p>
<h3 id="第一步，下載Nuget-exe"><a href="#第一步，下載Nuget-exe" class="headerlink" title="第一步，下載Nuget.exe"></a>第一步，下載Nuget.exe</h3><hr>
<p>下載VSTS上面的<strong>Download NuGet + VSTS Credential Provider</strong>工具，這壓縮檔裡面會有<code>Nuget.exe</code>執行檔，曾經試過用nuget.org下載的<code>Nuget.exe</code>，即使輸入VSTS帳號密碼，依舊會再跟你要一次帳號密碼，呈現無窮迴圈狀態，所以，還是建議使用從這邊下載的<code>Nuget.exe</code>來用<br><img src="/blogimage/VSTS/2.jpg" width="600"></p>
<p>在執行有發生彈跳一個輸入VSTS彈跳視窗，這邊只要輸入登入VSTS帳號密碼後，就可以了，後面就不需要再輸入</p>
<h3 id="第二步，撰寫小程式"><a href="#第二步，撰寫小程式" class="headerlink" title="第二步，撰寫小程式"></a>第二步，撰寫小程式</h3><hr>
<p>這邊使用<code>PowerShell</code>指令來撰寫，一般來說要控制VSTS Package上面可使用<code>nuget</code>和<code>PowerShell</code>指令，只是後者必須在Visual Studio中的套件管理去下指令。但是，針對刪除套件這件事來說，目前就只能透過<code>Nuget.exe</code>執行了，而Nuget的刪除指令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nuget delete &lt;packageID&gt; &lt;packageVersion&gt; [options]</div></pre></td></tr></table></figure></p>
<ul>
<li>首先必須取得該套件所有版本列表，這邊加入<code>-prerelease</code>，主要是找出beta的版本，因為預設只會找Release版本，</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.\NuGet.exe list &#123;元件名稱&#125; -Source &#123;VSTS Feed URL&#125; -allversions -prerelease</div></pre></td></tr></table></figure>
<ul>
<li>再來就是執行Nuget的刪除指令</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.\NuGet.exe delete &#123;元件名稱&#125; &#123;版本號&#125;  -Source &#123;VSTS Feed URL&#125; -ApiKey &#123;apikey&#125;</div></pre></td></tr></table></figure>
<p>因此，把這兩個指令組合起來，用<code>Foreach</code>讀取所有版本號，放入刪除功能中<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$AllVersion</span>= .\NuGet.exe list XXXXX -Source <span class="string">"https://AAAAA.pkgs.visualstudio.com/_packaging/Feed/nuget/v3/index.json"</span> -prerelease -allversions</div><div class="line"></div><div class="line"><span class="keyword">Foreach</span> (<span class="variable">$data</span> <span class="keyword">in</span>   <span class="variable">$AllVersion</span>)</div><div class="line">&#123;</div><div class="line">   <span class="variable">$version</span>=<span class="variable">$data</span>.Split(<span class="string">' '</span>)[<span class="number">1</span>]</div><div class="line">   <span class="string">"Delete "</span>+<span class="variable">$version</span></div><div class="line">    echo 是|.\NuGet.exe delete XXXXX <span class="variable">$version</span> -Source <span class="string">"https://AAAAA.pkgs.visualstudio.com/_packaging/Feed/nuget/v3/index.json"</span> -ApiKey XXX</div><div class="line">   <span class="string">"Delete OK"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在這邊有加入一個<code>echo 是</code>，這主要是當你刪除時候，會跳出詢問框，問你是否真的要刪除，為了達到自動化目的，所以加入這個指令，如果今天你的OS是英文版，要把<code>是</code>改成<code>Yes</code>，後續再加工一下，把XXXXX這個元件名稱當作外部參數輸入，就可以讓<code>ps</code>檔能自動化執行了。就可以省下很多人工要去刪除套件版本的時間</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://mohamedradwan.com/wp-content/uploads/2016/07/0-Release-Management-Overview-for-TFS-and-VSTS.jpg&quot;&gt;
&lt;p&gt;VSTS Packages可以讓我們自訂團隊
    
    </summary>
    
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
      <category term="PowerShell" scheme="http://edwardkuo.imas.tw/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>用Powershell執行遠端VM內的Powershell Script</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/02/07/PowerShell/RemotePowershell/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/02/07/PowerShell/RemotePowershell/</id>
    <published>2017-02-06T16:00:00.000Z</published>
    <updated>2017-10-02T00:56:40.115Z</updated>
    
    <content type="html"><![CDATA[<img src="https://img.wonderhowto.com/img/97/81/63528493233379/0/hack-like-pro-scripting-for-aspiring-hacker-part-3-windows-powershell.1280x600.jpg">
<p>遇到VSTS佈署到遠端VM後，必須執行一些遠端VM中的<code>Powershell</code>的情境，執行佈署的Server和遠端VM並不在同一個網域內，所以，無法透過網域的方式去執行遠端VM中的<code>PowerShell</code>指令。因此，為了要達到這個目的，就必須在遠端VM中安裝WinRM( Windows remote management)，這樣才有辦法在Clinet端呼叫遠端VM中的Powersehll</p>
<h3 id="設定WINRM"><a href="#設定WINRM" class="headerlink" title="設定WINRM"></a>設定WINRM</h3><hr>
<p>首先，必須在遠端VM安裝<strong>Winrm</strong>元件，我們才可以透過WinRM和遠端的PowerShell溝通。安裝完畢後，執行啟動PSRemote功能<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Enable-PSRemoting</span></div></pre></td></tr></table></figure></p>
<p>為了確保WINRM有啟動，可以再執行下面指令確認<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">winrm quickconfig</div></pre></td></tr></table></figure></p>
<p>若有出現詢問視窗，基本上都選擇<strong>Y</strong>，完畢後會出現下面資訊</p>
<blockquote>
<p>WinRM service is already running on this machine.<br>WinRM is already set up for remote management on this computer.</p>
</blockquote>
<p>遠端VM設定好之後，還要設定呼叫端的<code>TrustedHosts</code>，不然，會出現連線驗證的問題，所以，可以在呼叫端先查詢TrustedHosts設定，一般來說預設並沒有設定任何Trusted的Hosts</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">get-item</span> wsman:\localhost\Client\TrustedHosts</div></pre></td></tr></table></figure>
<p>要設定TrustedHosts其指令如下，其中<strong>*</strong>，代表任何位置都可以，如果要特定的位置，就把星號改成IP或是HostName<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set-item</span> wsman:\localhost\Client\TrustedHosts -value *</div></pre></td></tr></table></figure></p>
<p>這樣基本雙方環境就設定的差不多，接下來就可以開始撰寫Powershell的Script，這邊把要呼叫遠端VM的Powershell的指令，也寫成一個Script</p>
<h3 id="執行Remote-PowerShell"><a href="#執行Remote-PowerShell" class="headerlink" title="執行Remote PowerShell"></a>執行Remote PowerShell</h3><hr>
<p>在呼叫遠端的Powershell指令前，我們需要幾個參數</p>
<ul>
<li>$machineaddress : 遠端VM的IP</li>
<li>$machineName : 登入VM的帳號</li>
<li>$machinePwd : 登入VM的密碼</li>
</ul>
<p>因為，後續要把這個Powershell Script放到VSTS做自動化佈署用，所以，必須讓密碼能直接被使用，而不是彈跳出輸入密碼的對話框<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pw</span> = <span class="built_in">convertto-securestring</span> -AsPlainText -Force -String <span class="variable">$machinePwd</span></div></pre></td></tr></table></figure></p>
<p>建立登入VM的憑證<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cred</span> = <span class="built_in">new-object</span> -typename System.Management.Automation.PSCredential -argumentlist <span class="variable">$machineName</span>,<span class="variable">$pw</span></div></pre></td></tr></table></figure></p>
<p>設定Clinet連線到遠端VM的Session，並且要Keep這個Session，讓後續指令可以使用<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$s</span> = <span class="built_in">New-PSSession</span> -ComputerName <span class="variable">$machineaddress</span> -Credential <span class="variable">$cred</span></div></pre></td></tr></table></figure></p>
<p>取得遠端VM要被執行的Powershell檔案的路徑<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$filepath</span>=<span class="string">'C:\test\test.ps1'</span></div></pre></td></tr></table></figure></p>
<p>使用<code>Invoke-Command</code>來執行呼叫<code>test.ps1</code>的動作，基本寫法可以這樣<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Invoke-Command</span> -Session <span class="variable">$s</span> -scriptblock &#123;&amp; <span class="string">'C:\test\test.ps1'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>另一種寫法就是把<code>-scriptblock {}</code>中的值作為一個Local變數來處理，後面再用帶參數的方式填入<code>$filepath</code>，所以，寫法可以改成下面這樣，這樣寫法的彈性個人覺得會比較好<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Invoke-Command</span> -Session <span class="variable">$s</span> -scriptblock &#123;&amp; <span class="variable">$args</span>[<span class="number">0</span>]&#125; -ArgumentList <span class="variable">$filepath</span></div></pre></td></tr></table></figure></p>
<p>今日，如果要被執行的Powershell Script，本身有需要外部帶入參數時候，就可以擴充如下，等同執行<code>C:\test\test.ps1 Hello world</code>意思是相同的<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Invoke-Command</span> -Session <span class="variable">$s</span> -scriptblock &#123;&amp; <span class="variable">$args</span>[<span class="number">0</span>] <span class="variable">$args</span>[<span class="number">1</span>] <span class="variable">$args</span>[<span class="number">2</span>]&#125; -ArgumentList <span class="variable">$filepath</span>,<span class="string">'Hello'</span>,<span class="string">'world'</span></div></pre></td></tr></table></figure></p>
<p>所以，完整的程式碼如下<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$machineaddress</span>=<span class="variable">$args</span>[<span class="number">0</span>]</div><div class="line"><span class="variable">$machineName</span>=<span class="variable">$args</span>[<span class="number">1</span>]</div><div class="line"><span class="variable">$machinePwd</span>=<span class="variable">$args</span>[<span class="number">2</span>]</div><div class="line"><span class="variable">$pw</span> = <span class="built_in">convertto-securestring</span> -AsPlainText -Force -String <span class="variable">$machinePwd</span></div><div class="line"><span class="variable">$cred</span> = <span class="built_in">new-object</span> -typename System.Management.Automation.PSCredential -argumentlist <span class="variable">$machineName</span>,<span class="variable">$pw</span></div><div class="line"><span class="variable">$s</span> = <span class="built_in">New-PSSession</span> -ComputerName <span class="variable">$machineaddress</span> -Credential <span class="variable">$cred</span></div><div class="line"></div><div class="line"><span class="variable">$filepath</span>=<span class="string">'C:\test\test.ps1'</span></div><div class="line"><span class="built_in">Invoke-Command</span> -Session <span class="variable">$s</span> -scriptblock &#123;&amp; <span class="variable">$args</span>[<span class="number">0</span>] <span class="variable">$args</span>[<span class="number">1</span>] <span class="variable">$args</span>[<span class="number">2</span>]&#125; -ArgumentList <span class="variable">$filepath</span>,<span class="string">'Hello'</span>,<span class="string">'world'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://img.wonderhowto.com/img/97/81/63528493233379/0/hack-like-pro-scripting-for-aspiring-hacker-part-3-windows-powershell.1280x
    
    </summary>
    
    
      <category term="PowerShell" scheme="http://edwardkuo.imas.tw/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Teams 結合Azure Application Insights Alert</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/02/01/Devops/MicrosoftTeamsAI/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/02/01/Devops/MicrosoftTeamsAI/</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-05-28T15:43:54.074Z</updated>
    
    <content type="html"><![CDATA[<img src="https://blog.tradeshift.com/wp-content/uploads/2015/10/collaboration-illustration.jpg">
<p>之前還很高興的把Application Insights與Slack串接起來，可參考<strong><a href="http://edwardkuo.imas.tw/paper/2016/09/26/Azure/2016-09-26/">Azure Application Insights發Alert訊息到Slack 
</a></strong>，但沒多久Microsoft又出了一個Microsoft Teams的協同工具，再加上部分工作已經轉移到Teams，為了整合各項資訊到同一平台上，所以，打算把原本發送到Slack的轉移到到Teams上面，再加上Slack免費版只有10000則訊息上限，Teams這方面則沒有上限，當然就二話不說轉過來囉。</p>
<p>基本上是沒有辦法直接在Application Insights的<code>webhooks</code>直接與Teams連結，這之間依舊必須透過<code>logic app</code>和Teams的<code>連接器</code>做橋接</p>
<h3 id="建立Teams-連接器"><a href="#建立Teams-連接器" class="headerlink" title="建立Teams 連接器"></a>建立Teams 連接器</h3><hr>
<p>首先在Teams內建立連接器，把連接器產生的<code>URL</code>放到<code>logic App</code>內</p>
<ol>
<li>選擇<strong>連接器</strong><img src="/blogimage/MicrosoftTeamsFile/1.jpg" width="500">
</li>
</ol>
<p>2.選擇<strong>傳入Webhook</strong><br><img src="/blogimage/MicrosoftTeamsFile/2.jpg" width="500"></p>
<p>3.給這webhook取個名字，按下確定後，就會產生<code>URL</code>，把這<code>URL</code>保留下來，等下開發<code>logic app</code>會需要用到<br><img src="/blogimage/MicrosoftTeamsFile/3.jpg" width="500"></p>
<p>這樣在Teams上面設定就算完成了</p>
<h3 id="開發Logic-App"><a href="#開發Logic-App" class="headerlink" title="開發Logic App"></a>開發Logic App</h3><hr>
<p>關於開發Logic App部分，方法跟之前與Slack方式類似，只是這次不需要在Azure上建立連接器，可以先參考這兩篇</p>
<ul>
<li><a href="http://edwardkuo.imas.tw/paper/2016/09/26/Azure/2016-09-26/">Azure Application Insights發Alert訊息到Slack 
</a></li>
<li><a href="http://edwardkuo.imas.tw/paper/2016/11/05/Azure/2016-11-04/">Visual Studio開發Azure Logic App 
</a></li>
</ul>
<p>這邊會用到<code>Logic App</code>原因主要是要把Application Insights送出來的Alert格式轉換成O365 Connect可接受的格式，Application Insights送出的格式如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "status": "Activated",</div><div class="line">    "context": &#123;</div><div class="line">        "id": "XXXXX",</div><div class="line">        "name": Server exception",</div><div class="line">        "description": "",</div><div class="line">        "conditionType": "Metric",</div><div class="line">        "condition": &#123; "metricName": "basicExceptionServer.count", "metricUnit": "", "metricValue": "1", "threshold": "1", "timeAggregation": "Average", "operator": "GreaterThanOrEqual", "windowSize": "5" &#125;,</div><div class="line">        "subscriptionId": "XXXXXX",</div><div class="line">        "resourceGroupName": "XXXXXX",</div><div class="line">        "timestamp": "11/24/2016 15:35:03",</div><div class="line">        "resourceName": "XXXXXX",</div><div class="line">        "resourceType": "components",</div><div class="line">        "resourceId": "XXXXX",</div><div class="line">        "resourceRegion": "East US",</div><div class="line">        "portalLink": "https://XXXXXX"</div><div class="line">    &#125;,</div><div class="line">    "properties": &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而Microsoft Teams是透過Office 365 API Connectors做串聯，所以，必須將上面資訊對應到Office 365 API Connectors訊息格式內，關於這格式說明，可以參考下面這篇</p>
<ul>
<li><a href="http://edwardkuo.imas.tw/paper/2016/11/28/Azure/O365API/">如何使用Office 365 API Connectors 
</a></li>
</ul>
<p>所以，在Logic App部分只需要用到<code>HTTP</code>就可以，這樣就簡單多<br><img src="/blogimage/MicrosoftTeamsFile/4.jpg" width="500"></p>
<p>在這Task內的設定如下，其中的<code>URI</code>就放入連接器的URL，而在<code>body</code>部分，就串出符合O365訊息格式資訊就可以<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">"HTTP": &#123;</div><div class="line">         "type": "Http",</div><div class="line">         "inputs": &#123;</div><div class="line">           "method": "POST",</div><div class="line">           "uri": "XXXXX",</div><div class="line">           "headers": &#123;</div><div class="line">             "Content-Type": "application/json"</div><div class="line">           &#125;,</div><div class="line">           "body": &#123;</div><div class="line">             "sections": [</div><div class="line">               &#123;</div><div class="line">                 "activityText": "[Look Problem](@&#123;triggerBody()['context']['portalLink']&#125;)",</div><div class="line">                 "activityTitle": "Type : @&#123;triggerBody()['context']['resourceName']&#125;"</div><div class="line">               &#125;,</div><div class="line">               &#123;</div><div class="line">                 "facts": [</div><div class="line">                   &#123;</div><div class="line">                     "name": "Detail Information",</div><div class="line">                     "value": "@&#123;triggerBody()&#125;"</div><div class="line">                   &#125;</div><div class="line">                 ],</div><div class="line">                 "title": "Details"</div><div class="line">               &#125;</div><div class="line">             ],</div><div class="line">             "summary": "Application Insights Alert",</div><div class="line">             "title": "@&#123;triggerBody()['context']['name']&#125;"</div><div class="line">           &#125;</div><div class="line">         &#125;,</div><div class="line">         "runAfter": &#123;&#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>開發完成後，只要把<code>Logic App</code>的URL放入Application Insights Alert的<code>webhooks</code>裡面就可以，這樣只要有發生錯誤或是相關警示訊息，就會拋到<code>Teams</code>裡面了，個人覺得這部分開發相對比<code>Slack</code>簡單一點 </p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://blog.tradeshift.com/wp-content/uploads/2015/10/collaboration-illustration.jpg&quot;&gt;
&lt;p&gt;之前還很高興的把Application Insights與Slack串接起來，
    
    </summary>
    
      <category term="Microsoft Teams" scheme="http://edwardkuo.imas.tw/categories/Microsoft-Teams/"/>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Teams結合VSTS</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/01/22/Devops/MSTeamsandVSTS/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/01/22/Devops/MSTeamsandVSTS/</id>
    <published>2017-01-21T16:00:00.000Z</published>
    <updated>2017-05-28T15:43:16.547Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.imagination-station.org/wp-content/uploads/2015/07/pyro-power-328870.jpg">
<p>Teams除了一般協同工具之用外，針對開發人員來說又多一個好玩的東西，就是可以整合VSTS了，在整合部分目前可以整合就是VSTS發送通知，讓團隊在不管是在Build或是Release時候，都可以即時獲得訊息，尤其是當Release需要被Approve時候，也可以透過通知方式，通知要Approve人來處理</p>
<h3 id="整合VSTS訊息"><a href="#整合VSTS訊息" class="headerlink" title="整合VSTS訊息"></a>整合VSTS訊息</h3><hr>
<p>在還沒有Teams以前，我是用Slack去整合VSTS資訊，在Slack應用面上，主要是在Slack的Channel取得Webhook URL放入到VSTS的Service Hooks<br><img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.35.36.png" width="500"><br>現在，在Teams則是透過連接器方式與VSTS的<code>Service Hooks</code>整合，其方式如下：</p>
<ul>
<li>選擇連接器，找到<code>Visual Studio Team Services</code></li>
</ul>
<img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.40.18.png" width="600">
<ul>
<li>選擇『新增』</li>
</ul>
<p>不知道是否還為Release緣故，需要等待一下子才會跳出設定視窗，如果你的VSTS與Office 365帳號是綁定的，就會自動帶出Visual Studio Team Services帳戶，不然你就要自行用Office 365建立建立VSTS，這邊可以設定的Event Type如下</p>
<img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.42.35.png" width="400">
<p>說真的，可以設定還針對，如果全都要設定也滿累人，而不同的Even Type下面可以調整的選項也會有所不同<br><img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.47.53.png" width="400"></p>
<p>設定完成後，儲存起來就可以，然後，再到VSTS的<code>Service Hooks</code>查看<br><img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.50.27.png" width="700"></p>
<p>都會自動幫你建立好相關Link，不需要再手動過來進行設定</p>
<h3 id="整合VSTS看版"><a href="#整合VSTS看版" class="headerlink" title="整合VSTS看版"></a>整合VSTS看版</h3><hr>
<p>為了達到統一資訊平台目的，在Teams目前也可以把VSTS的Story Board整併進來，不過，這部分感覺非常地弱，其實，就像把Board網頁嵌入到Teams，而做法其實就在是Teams增加一個<code>Tab</code>概念</p>
<ul>
<li>選擇『新增分頁』</li>
</ul>
<img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.54.35.png" width="600">
<p>在裡面就會看到有VSTS，選擇它就對</p>
<ul>
<li>選擇VSTS Account，而這邊感覺上又不需要VSTS與Office 365帳號綁定，只要你輸入VSTS上面所有帳號就可以</li>
</ul>
<img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.55.32.png" width="500">
<ul>
<li>設定相關屬性，選擇你想要整併進來的專案還有團隊，以及Backlog Level</li>
</ul>
<img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.57.51.png" width="500">
<ul>
<li>Backlog Level，這邊有三種可以選擇</li>
</ul>
<img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8810.58.09.png" width="500">
<p>設定完成後，就可以把Backlog變成Teams其中一個頁籤了，如果要針對這些資訊做討論，可以直接選擇上方的交談按鈕就可以邊看邊交談<br><img src="/blogimage/EK%202016-11-22%20%E4%B8%8B%E5%8D%8811.00.33.png" width="500"></p>
<p>個人覺得這一個地方整合互動性並不是很高，純粹就像看黑板資訊討論感覺，雖然，你還是可以直接在上面拖拉Story，但是交談時又不能tag該Story，是有點可惜</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://www.imagination-station.org/wp-content/uploads/2015/07/pyro-power-328870.jpg&quot;&gt;
&lt;p&gt;Teams除了一般協同工具之用外，針對開發人員來說又多一個好玩的東西，就是可以整合
    
    </summary>
    
      <category term="Microsoft Teams" scheme="http://edwardkuo.imas.tw/categories/Microsoft-Teams/"/>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>VSTS 能夾帶附檔的Send Mail套件</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/01/20/Devops/VSTSSendMail/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/01/20/Devops/VSTSSendMail/</id>
    <published>2017-01-19T16:00:00.000Z</published>
    <updated>2017-05-28T15:42:52.165Z</updated>
    
    <content type="html"><![CDATA[<img src="http://valuebound.com/sites/default/files/2016-03/send-emai-programatically-in-drupal-8.jpg">
<p>在前面的<a href="http://edwardkuo.imas.tw/paper/2016/08/16/Devops/2016-08-17/">[自動化建立Database版本差異化Script]</a>提到，我們可以透過SQL Compare方式去產生這次要佈署的SQL檔案，不過，在實務上來說，會習慣把產出檔案直接寄送給相關人員去佈署。又或是如果今天是撰寫元件的團隊，要把改版或是修正版的<code>dll</code>傳送給人員做更新。現在可以當你自動Buil &amp; Release後直接寄送檔案給指定人員</p>
<h3 id="安裝Send-Mail套件"><a href="#安裝Send-Mail套件" class="headerlink" title="安裝Send Mail套件"></a>安裝Send Mail套件</h3><hr>
<p>首先到VSTS的Marketplace找到<code>SendMail</code>這個套件安裝<br><img src="/blogimage/SendMail/1.jpg" width="700"></p>
<p>這個套件可以支援多個收件者，同時，也可以夾帶附檔寄出<br><img src="/blogimage/SendMail/2.jpg" width="700"></p>
<p>套件基本上操作非常簡單，只需簡單幾個設定步驟就可以</p>
<h3 id="設定SendMail"><a href="#設定SendMail" class="headerlink" title="設定SendMail"></a>設定SendMail</h3><hr>
<p>目前情境會在當<code>build</code>後在<code>release</code>階段將檔案寄出，所以，我們在<code>release</code>部分加入了<code>SendMail</code>的Task<br><img src="/blogimage/SendMail/3.jpg" width="600"></p>
<p>這畫面設定中，主要就是設定<strong>收件者</strong>、<strong>寄件者</strong>、<strong>信件標題</strong>和<strong>信件內容</strong>，如果要有多個收件者，用<code>;</code>隔開就可以，不過，這邊有一點就是收件者和寄件者的信箱，不會與VSTS內的人員綁定，必須手動去建立相關人員的<code>Email</code><br><img src="/blogimage/SendMail/4.jpg" width="600"></p>
<p>在信件內容中，也可以用<code>html</code>語法撰寫成具有<code>html</code>格式的文件內容，不過，若是這樣，就必須開啟<code>Is HTML Body</code>的功能<br><img src="/blogimage/SendMail/5.jpg" width="600"></p>
<p>這時候，如果想要Mail能夾帶附檔，就必須勾選<code>Add Attachment</code>，並在下方填入要抓取檔案的位置，假設我希望將地端要佈署的SQL File寄出，路徑我可以這樣填寫<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D:\DataBase_dacpac\XXX_DB\Release\XXXXX.sql</div></pre></td></tr></table></figure></p>
<p>透過這樣方式，就可以自動化將所需要的檔案寄給有需要的人了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://valuebound.com/sites/default/files/2016-03/send-emai-programatically-in-drupal-8.jpg&quot;&gt;
&lt;p&gt;在前面的&lt;a href=&quot;http://edwardkuo.ima
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Teams + Office 365 ，輕鬆讓檔案雲和地的同步</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/01/15/Devops/MicrosoftTeamsFile/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/01/15/Devops/MicrosoftTeamsFile/</id>
    <published>2017-01-14T16:00:00.000Z</published>
    <updated>2017-05-28T15:43:34.766Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.petri.com/wp-content/uploads/2016/11/Teams-Cover-Hero.jpg">
<p>Microsoft Teams其實是跟Office 365人員的功能榜的相當緊密，所以，當你在Teams建立一個小組時候，同時，會在Office 365的<code>人員</code>建立起群組<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125105735.png" width="300"></p>
<p>Teams是直接和O365同步的唷<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125105935.png" width="300"></p>
<p>如果在群組中下建立自己Channel則就不會再Office 365中的群組有甚麼變化，不過，有一個地方卻是不同，就是在檔案中會區分各個Channel的資料夾出來<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125110222.png" width="400"></p>
<img src="/blogimage/MicrosoftTeamsFile/snip_20161125110315.png" width="400">
<p>這樣代表甚麼涵義呢?，也就是說當你在交談的Channel中有帶有上傳檔案的訊息，檔案自動都會被儲存到這些資料夾中，<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125223311.png" width="600"></p>
<p>看Teams的檔案裡面就有剛剛交談視窗中上傳的檔案<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125223440.png" width="600"></p>
<p>Office 365上也同步了<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125223535.png" width="600"></p>
<p>換句話說就不需要擔心聊天過程中，因為訊息太多找不到之前同事傳給你的檔案在哪邊了，只要到這與Channel名稱相同的資料夾就可以找到所有歷史上傳的檔案，至於空間大小，就取決自己O365上面的給予的空間大小了</p>
<p>如果有這樣功能，我們就可以做到讓檔案上傳，不僅可以直接儲存在雲端，也可以同步到地端自己的電腦，當然，也是可以在自己電腦放入檔案，自然也會同步到Office 365且Microsoft Teams的Files裡面也可以看到唷，這樣就能做到隨處都可以辦公的狀態(不知道這樣是好是壞Orz)</p>
<p>另外，如果在檔案資料夾不僅可以有原先的Channel資料夾外，還可以自行建立資料夾，就可以輕易地做分類</p>
<h3 id="設定群組檔案與本機同步"><a href="#設定群組檔案與本機同步" class="headerlink" title="設定群組檔案與本機同步"></a>設定群組檔案與本機同步</h3><hr>
<p>如上面提到Microsoft Teams的檔案可以和O365群組檔案同步，所以，透過這樣模式再把群組檔案與本地端同步，就可以讓檔案的協同合作更方便</p>
<p>1.選擇<strong>檔案</strong><br>到O365的該群組中選擇<strong>檔案</strong><br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125203303.png" width="400"></p>
<p>2.選擇<strong>同步處裡</strong><br>這邊會出現比較奇異現象，會要求你安裝Ondrive for Bussiness，但是，實際又是用Sharepoint方式進行同步，之後只要選擇你打算把檔案同步到本機哪一個位置就可以<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125221747.png" width="400"></p>
<p>等你同步後，會在本機資料夾看到Sharepoint的標誌<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125222235.png" width="200"></p>
<p>利用這簡單方式，就可以做到跨平台的檔案分享，你只要在本地端有標示<code>Sharepoint</code>的資料夾存入檔案，就會自動同步到Office 365且Microsoft Teams裡面也可以看到</p>
<h3 id="這樣檔案安全性呢"><a href="#這樣檔案安全性呢" class="headerlink" title="這樣檔案安全性呢?"></a>這樣檔案安全性呢?</h3><hr>
<p>這時候，想必就會考慮到檔案安全性問題，畢竟，企業很多檔案是具有機密性，雖然這樣檔案分享很方便，但是，方便和安全往往是一體兩面，要解決這問題可以透過兩種方式處理<br>1.透過Azure RMS在檔案上傳前進行版權控管<br>2.如果覺得這樣麻煩，就開啟IRM功能</p>
<p>因為Teams的檔案既然是存在O365上面，且群組的檔案管理，它的背後其實也是Office 365的Sharepoint，所以，可以到Office 365將檔案開啟IRM功能</p>
<ul>
<li>一樣先進入檔案後，選擇上面設定中的<strong>文件庫</strong><img src="/blogimage/MicrosoftTeamsFile/snip_20161125224559.png" width="300">
</li>
</ul>
<p>-開啟<strong>資訊版權管理</strong><br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125224741.png" width="300"></p>
<p>-啟動IRM<br><img src="/blogimage/MicrosoftTeamsFile/snip_20161125225020.png" width="500"></p>
<p>這樣就可以做到檔案的安全性控管了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://www.petri.com/wp-content/uploads/2016/11/Teams-Cover-Hero.jpg&quot;&gt;
&lt;p&gt;Microsoft Teams其實是跟Office 365人員的功能榜的相當緊密，所以，當你在Teams建立一
    
    </summary>
    
      <category term="Microsoft Teams" scheme="http://edwardkuo.imas.tw/categories/Microsoft-Teams/"/>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>使用Memory Table前須先建立資料庫的Memory最佳化檔案群組群組</title>
    <link href="http://edwardkuo.imas.tw/paper/2017/01/07/SQL/MemoryFileGroup/"/>
    <id>http://edwardkuo.imas.tw/paper/2017/01/07/SQL/MemoryFileGroup/</id>
    <published>2017-01-06T16:00:00.000Z</published>
    <updated>2017-05-29T15:44:28.626Z</updated>
    
    <content type="html"><![CDATA[<img src="http://blog.cloud66.com/content/images/2016/07/Getting-the-Most-Out-of-your-Database-with-Ruby-on-Rails.jpg">
<p>在<code>SQL 2014</code>之後，有了<code>Memory Table</code>這功能後，在處理大量資料上的效能相對於以往加快不少，不過，在使用這項功能前必須先建立好該資料庫的<code>Memory Optimize</code>檔案群組，這個在預設是不會產生的，每次都會忘記要先做這一個步驟，導致建立Memory Table都會發生錯誤</p>
<p>記憶體最佳化檔案群組被建立後，會有幾點限制，須事前要先注意</p>
<ul>
<li>無法進行刪除動作，除非是卸載該資料庫，才能讓它被刪除</li>
<li>不能指定大小群組檔案大小為<code>Maxsize</code></li>
<li>若該檔案群組非空的，也不能被卸載</li>
</ul>
<h2 id="建立Memory-最佳化檔案群組"><a href="#建立Memory-最佳化檔案群組" class="headerlink" title="建立Memory 最佳化檔案群組"></a>建立Memory 最佳化檔案群組</h2><hr>
<p>每個資料庫只能有一個Memory最佳化檔案群組，而該群組必須是被設定為<code>Memory Optimiz</code>，其中<strong>XXXX</strong>表示為該資料庫名稱<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> XXXX <span class="keyword">ADD</span> FILEGROUP XXXX_mod CONTAINS MEMORY_OPTIMIZED_DATA</div></pre></td></tr></table></figure></p>
<p>建立好群組後，就是加入檔案到這個群組中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> XXXX <span class="keyword">ADD</span> <span class="keyword">FILE</span> (<span class="keyword">name</span>=<span class="string">'XXXX_mod1'</span>, filename=<span class="string">'d:\database\XXXX_mod1'</span>) <span class="keyword">TO</span> FILEGROUP XXXX_mod</div></pre></td></tr></table></figure></p>
<p>透過以上兩行指令就可以完成建立了。這樣才可以開始使用Memory Table的功能</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://blog.cloud66.com/content/images/2016/07/Getting-the-Most-Out-of-your-Database-with-Ruby-on-Rails.jpg&quot;&gt;
&lt;p&gt;在&lt;code&gt;SQL 2014&lt;/
    
    </summary>
    
    
      <category term="T-SQL" scheme="http://edwardkuo.imas.tw/tags/T-SQL/"/>
    
  </entry>
  
  <entry>
    <title>VSTS也可以在Process Template Layout加入客製化欄位</title>
    <link href="http://edwardkuo.imas.tw/paper/2016/12/25/Devops/VSTSCustomer/"/>
    <id>http://edwardkuo.imas.tw/paper/2016/12/25/Devops/VSTSCustomer/</id>
    <published>2016-12-24T16:00:00.000Z</published>
    <updated>2017-05-28T15:47:03.063Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.microsoftinsider.es/wp-content/uploads/2015/07/Visual-Studio-2015.jpg">
<p>在VSTS提供三種預設樣板，分別為Agile、CMMI和Scrum，這三種比較屬於標準型的流程，但是，在許多實務上並非這三種內所包含的欄位或是要觀看的指標是符合現狀，如果，覺得這預設值表可以符合現狀，其實也滿怪的，以Scrum為例，雖然，Scrum有提到一些所謂的”標準”流程或是方式，但是，如果只是一昧認為開發流程要去符合上面Scrum所定義的才算是Scrum，感覺就是倒果為因，反倒是因該讓兩者相輔相成，這時候就可能必須額外增加一些客製化欄位以及在管理者層面所有需要的一些指標。因此，就必須變動原本Process上面的Layout了</p>
<h3 id="增加客製化的Process"><a href="#增加客製化的Process" class="headerlink" title="增加客製化的Process"></a>增加客製化的Process</h3><hr>
<p>在TFS中，如果要針對現有的Process去變動Layout，則必須透過Visual Studio建立好相關Layout後，再佈署到TFS上面進行變更Template，不過，在VSTS中則可以不需要這樣麻煩，直接到到VSTS的管理介面中，可以看到基本的三種類型<br><img src="/blogimage/25.jpg"></p>
<p>這三種類型是無法直接進行修改的，我們想要自訂客製化的Layout，必須先建立自己得Template，而建立時候，也必須決定你要繼承哪一個Process，以下圖來說，我要建立一個以Scrum為基礎的Process<br><img src="/blogimage/26.jpg" width="500"></p>
<p>輸入我想要的template Name<br><img src="/blogimage/27.jpg" width="500"></p>
<p>建立好後，會呈現如下圖<br><img src="/blogimage/28.jpg" width="500"></p>
<p>一旦建立好之後，就可以在自訂的Template中的每個流程內如backlog、Task…等的Layout內加入自己想要的欄位<br><img src="/blogimage/29.jpg" width="700"></p>
<h3 id="增加額外欄位"><a href="#增加額外欄位" class="headerlink" title="增加額外欄位"></a>增加額外欄位</h3><hr>
<p>在每個流程內點擊開來，會有<code>Overview</code>,<code>Layout</code>,<code>Fields</code>,<code>Stauts</code>和<code>Backlogs</code>，這五種Stage提供我們去做修改或是設定，<br><img src="/blogimage/30.jpg" width="300"></p>
<p>其中，在Status部分，原本預設不會有測試這個流程，如果基於團隊流程，需要額外訂定一個測試流程，在<code>Stauts</code>這邊也可以加入額外的狀態來符合企業需求<br><img src="/blogimage/31.jpg" width="500"></p>
<p>多了<code>test</code>的流程<br><img src="/blogimage/32.jpg" width="400"></p>
<p>專案的狀態中也有<code>test</code>的狀態了<br><img src="/blogimage/33.jpg" width="700"></p>
<p>另外，如果在原本的Layout中有資訊不足，則到你想要的修改的那個項目中的<code>Layout</code>去修改就可以，不過，有一點就是原本繼承下來的欄位資訊是不可以被刪掉的，但是，如果是自己額外增加，則是可以做刪除<br><img src="/blogimage/34.jpg" width="700"></p>
<p>以<code>Task</code>為例，我們可以在Detail的Group中加入，我們想要的資訊，而要加入的欄位可以是原本系統預設或是額外產生的<br><img src="/blogimage/35.jpg" width="500"></p>
<p>如果是採用預設有的欄位，是無法變動其欄位的格式，只有新增欄位才可以選取該欄位的格式，在新增欄位中有三個屬性可以被設定</p>
<ul>
<li>Definition : 主要是增加一個欄位</li>
<li>Options : 設定此欄位是否為必填選項</li>
<li>Layout : 新欄位的配置，配置部分主要是要讓欄位放在哪一個Group資訊內</li>
</ul>
<p>這邊所謂的Group是這樣呈現的，紅色框就表示是一個Group，而<code>Details</code>就是這個Group Name<br><img src="/blogimage/36.jpg" width="700"></p>
<p>因此，我們就可以自己新增一個欄位並設定該欄位為必填<br><img src="/blogimage/38.jpg" width="500"></p>
<p>然後再到實際的<code>Task</code>觀看，就會發現多一個剛剛加入的欄位名稱，同時，會提示你說該欄位還沒有被加入值，必須填值後才可以儲存<br><img src="/blogimage/39.jpg" width="700"></p>
<hr>
<p>雖然，客製化原本的Process是複雜，但是，操作上其實並不困難，直接在UI就可以達到我們想要的樣板，甚至，連Visual Studio都不需要開啟，而透過能客製化修改，就可以讓開發流程更貼近團隊或是企業現狀，而不會讓工具與管理是無法整合，這樣就失去用工具去節省時間的美意。一個好的工具就是該讓工作行為是能貼近流程與團隊或是組織的實際運作，而不是讓團隊或是組織去為配合所謂”合理正確”的流程或是工具做一些不符合現狀的改變，這樣不僅無法讓原本開發更敏捷，反而會帶來更多災難。</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://www.microsoftinsider.es/wp-content/uploads/2015/07/Visual-Studio-2015.jpg&quot;&gt;
&lt;p&gt;在VSTS提供三種預設樣板，分別為Agile、CMMI和Scrum，這三種比較屬於標準型
    
    </summary>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
      <category term="VSTS" scheme="http://edwardkuo.imas.tw/tags/VSTS/"/>
    
  </entry>
  
  <entry>
    <title>前端也可以享受Application Insights功能</title>
    <link href="http://edwardkuo.imas.tw/paper/2016/12/20/Azure/jsApplicationInsights/"/>
    <id>http://edwardkuo.imas.tw/paper/2016/12/20/Azure/jsApplicationInsights/</id>
    <published>2016-12-19T16:00:00.000Z</published>
    <updated>2017-05-29T13:02:32.519Z</updated>
    
    <content type="html"><![CDATA[<img src="https://sec.ch9.ms/ch9/8550/3fe67778-a249-40de-966a-3fd7f6be8550/ApplicationInsightsAnimatedIntroduction_960.jpg">
<p>在先前談到使用Application Insights時候，大都是講Backend如何去加入Application Insights功能，不過，現在很多架構上，<strong>Backend</strong>被用於Web API，操作介面則大部分是以<strong>FrontEnd</strong>技術為主，這樣就無法使用到Application Insights功能?其實不然，使用前端技術時，同時也可以享用Applciation Insights，且使用起來還相當簡單</p>
<h2 id="取得Javascript-files"><a href="#取得Javascript-files" class="headerlink" title="取得Javascript files"></a>取得Javascript files</h2><hr>
<p>前端主要的Application Insights主要是透過javascript去監控我們網頁，利用這方式可以追蹤每個網頁被點擊時間，同時，也可以追蹤網頁的Loading時間，當然，若有發生相關Javascript錯誤，基本上都可以被抓出來，要取得這段程式碼片段，可以進入<code>Azure</code>你的Application Insights裡面<br><img src="/blogimage/22.jpg" width="700"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="keyword">var</span> appInsights=<span class="built_in">window</span>.appInsights||<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">config</span>)</span>&#123;t[config]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> i=<span class="built_in">arguments</span>;t.queue.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;t[config].apply(t,i)&#125;)&#125;&#125;<span class="keyword">var</span> t=&#123;<span class="attr">config</span>:config&#125;,u=<span class="built_in">document</span>,e=<span class="built_in">window</span>,o=<span class="string">"script"</span>,s=<span class="string">"AuthenticatedUserContext"</span>,h=<span class="string">"start"</span>,c=<span class="string">"stop"</span>,l=<span class="string">"Track"</span>,a=l+<span class="string">"Event"</span>,v=l+<span class="string">"Page"</span>,y=u.createElement(o),r,f;y.src=config.url||<span class="string">"https://az416426.vo.msecnd.net/scripts/a/ai.0.js"</span>;u.getElementsByTagName(o)[<span class="number">0</span>].parentNode.appendChild(y);<span class="keyword">try</span>&#123;t.cookie=u.cookie&#125;<span class="keyword">catch</span>(p)&#123;&#125;<span class="keyword">for</span>(t.queue=[],t.version=<span class="string">"1.0"</span>,r=[<span class="string">"Event"</span>,<span class="string">"Exception"</span>,<span class="string">"Metric"</span>,<span class="string">"PageView"</span>,<span class="string">"Trace"</span>,<span class="string">"Dependency"</span>];r.length;)i(<span class="string">"track"</span>+r.pop());<span class="keyword">return</span> i(<span class="string">"set"</span>+s),i(<span class="string">"clear"</span>+s),i(h+a),i(c+a),i(h+v),i(c+v),i(<span class="string">"flush"</span>),config.disableExceptionTracking||(r=<span class="string">"onerror"</span>,i(<span class="string">"_"</span>+r),f=e[r],e[r]=<span class="function"><span class="keyword">function</span>(<span class="params">config,i,u,e,o</span>)</span>&#123;<span class="keyword">var</span> s=f&amp;&amp;f(config,i,u,e,o);<span class="keyword">return</span> s!==!<span class="number">0</span>&amp;&amp;t[<span class="string">"_"</span>+r](config,i,u,e,o),s&#125;),t</div><div class="line">    &#125;(&#123;</div><div class="line">        <span class="attr">instrumentationKey</span>:<span class="string">"xxxxxxx"</span></div><div class="line">    &#125;);</div><div class="line">       </div><div class="line">    <span class="built_in">window</span>.appInsights=appInsights;</div><div class="line">    appInsights.trackPageView();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>把這個程式碼片段放入<code>&lt;/head&gt;</code>之前，並在<code>instrumentationKey</code>填入屬於你自己的Application Insights的Key就可以，基本上這樣就可以開始監控你的前端程式了，像是在C#中，我們可以去增加Application Insights的客製化屬性，或是初始化telemetry，在前端是否可以呢?這當然是沒問題，我們可以透過<code>addTelemetryInitializer</code>，增加<code>properties</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">appInsights.queue.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   appInsights.context.addTelemetryInitializer(<span class="function"><span class="keyword">function</span> (<span class="params">envelope</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> telemetryItem = envelope.data.baseData;</div><div class="line">        telemetryItem.properties = telemetryItem.properties || &#123;&#125;;</div><div class="line">        telemetryItem.properties[<span class="string">"ApplicationName"</span>] = <span class="string">"TEST"</span>;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>完整寫法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> appInsights=<span class="built_in">window</span>.appInsights||<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">config</span>)</span>&#123;t[config]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> i=<span class="built_in">arguments</span>;t.queue.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;t[config].apply(t,i)&#125;)&#125;&#125;<span class="keyword">var</span> t=&#123;<span class="attr">config</span>:config&#125;,u=<span class="built_in">document</span>,e=<span class="built_in">window</span>,o=<span class="string">"script"</span>,s=<span class="string">"AuthenticatedUserContext"</span>,h=<span class="string">"start"</span>,c=<span class="string">"stop"</span>,l=<span class="string">"Track"</span>,a=l+<span class="string">"Event"</span>,v=l+<span class="string">"Page"</span>,y=u.createElement(o),r,f;y.src=config.url||<span class="string">"https://az416426.vo.msecnd.net/scripts/a/ai.0.js"</span>;u.getElementsByTagName(o)[<span class="number">0</span>].parentNode.appendChild(y);<span class="keyword">try</span>&#123;t.cookie=u.cookie&#125;<span class="keyword">catch</span>(p)&#123;&#125;<span class="keyword">for</span>(t.queue=[],t.version=<span class="string">"1.0"</span>,r=[<span class="string">"Event"</span>,<span class="string">"Exception"</span>,<span class="string">"Metric"</span>,<span class="string">"PageView"</span>,<span class="string">"Trace"</span>,<span class="string">"Dependency"</span>];r.length;)i(<span class="string">"track"</span>+r.pop());<span class="keyword">return</span> i(<span class="string">"set"</span>+s),i(<span class="string">"clear"</span>+s),i(h+a),i(c+a),i(h+v),i(c+v),i(<span class="string">"flush"</span>),config.disableExceptionTracking||(r=<span class="string">"onerror"</span>,i(<span class="string">"_"</span>+r),f=e[r],e[r]=<span class="function"><span class="keyword">function</span>(<span class="params">config,i,u,e,o</span>)</span>&#123;<span class="keyword">var</span> s=f&amp;&amp;f(config,i,u,e,o);<span class="keyword">return</span> s!==!<span class="number">0</span>&amp;&amp;t[<span class="string">"_"</span>+r](config,i,u,e,o),s&#125;),t</div><div class="line">    &#125;(&#123;</div><div class="line">        <span class="attr">instrumentationKey</span>:<span class="string">"KEY"</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.appInsights = appInsights;</div><div class="line"></div><div class="line">    appInsights.queue.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        appInsights.context.addTelemetryInitializer(<span class="function"><span class="keyword">function</span> (<span class="params">envelope</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> telemetryItem = envelope.data.baseData;</div><div class="line">            telemetryItem.properties = telemetryItem.properties || &#123;&#125;;</div><div class="line">            telemetryItem.properties[<span class="string">"ApplicationName"</span>] = <span class="string">"TEST"</span>;&#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"> appInsights.trackPageView();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><hr>
<p>不敢保證所有前端問題Application Insights都一定可以抓到，但是，目前所有網頁行為與錯誤是都可以抓到，這時候就要擔心使用量是否足夠我們使用<br><img src="/blogimage/23.jpg" width="500"></p>
<img src="/blogimage/24.jpg" width="500">
<p>如果想要找出網頁的相關性，也是可以用這方式去做，就可以幫忙蒐集到資料了，這算是非常簡單且又不會影響到程式的方式之一呢</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://sec.ch9.ms/ch9/8550/3fe67778-a249-40de-966a-3fd7f6be8550/ApplicationInsightsAnimatedIntroduction_960.jpg&quot;&gt;
&lt;p&gt;在先前談到使用Appli
    
    </summary>
    
      <category term="Azure Application Insights" scheme="http://edwardkuo.imas.tw/categories/Azure-Application-Insights/"/>
    
    
      <category term="Azure" scheme="http://edwardkuo.imas.tw/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>在vmware內的Macos也可以連上實體IPhone</title>
    <link href="http://edwardkuo.imas.tw/paper/2016/12/13/Other/VMware/"/>
    <id>http://edwardkuo.imas.tw/paper/2016/12/13/Other/VMware/</id>
    <published>2016-12-12T16:00:00.000Z</published>
    <updated>2017-05-28T15:39:52.503Z</updated>
    
    <content type="html"><![CDATA[<img src="http://tr1.cbsistatic.com/hub/i/2015/11/03/99eb6ab9-50a2-477c-9841-50b32a9b817f/vmwarevcloudair.jpg">
<p>因開發Xamarin關係，每次在Build iOS App時，必須透過MAC OS才有辦法達成，如果，平常在辦公室或許還可以透過Remote到MAC電腦，但是，就行動開發者來說，怎可能隨身再攜帶一台電腦?所以，就想辦法在Windows環境中安裝MAC OS，這樣就可以不需要Remote到MAC電腦中，雖然，這樣解決了Build App的困境以及產iOS模擬器的問題，但是，衍伸另一個問題就是，今天要做Notification功能時候，在模擬器上無法呈現這樣功能，必須把App佈署到實體手機才可以，所以，就必須讓VM中的MAC OS能連上手機</p>
<h3 id="作業環境"><a href="#作業環境" class="headerlink" title="作業環境"></a>作業環境</h3><hr>
<ul>
<li>VMWare :　VMware Workstation 12 Player</li>
<li>Windows :　Windows 10</li>
<li>MAC OS : 10.12.1</li>
<li>NoteBook : Surface book</li>
<li>Mobile Phone : iPhone 6</li>
</ul>
<h3 id="設定VMware"><a href="#設定VMware" class="headerlink" title="設定VMware"></a>設定VMware</h3><hr>
<p>在沒有特別設定下，當你把手機與電腦連接起來後，VM中的OS基本上是抓不到你手機的，首先，你必須在VMware的USB設定部分做更改<br><img src="/blogimage/17.jpg" width="600"></p>
<p>如果你電腦的USB是支援3.0，預設會是設定<code>3.0</code>，這邊必須調降為<code>2.0</code>，另外，如果沒有安裝<code>VMWare Tool</code>也必須安裝<br><img src="/blogimage/18.jpg" width="600"></p>
<p>當你插上手機時候，在VMWare會出現如下圖，多出手機圖示<br><img src="/blogimage/19.jpg" width="500"></p>
<p>啟動連接<br><img src="/blogimage/20.jpg" width="400"></p>
<p>然後，去iTunes就會看到手機圖示。這樣就表示連接成功囉，當然，啟動<code>xCode</code>也可以連接到手機，用Visual Studio也可以直接將Xamarin App直接佈署到手機上<br><img src="/blogimage/21.jpg" width="400"></p>
<p>這樣就方便多囉</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://tr1.cbsistatic.com/hub/i/2015/11/03/99eb6ab9-50a2-477c-9841-50b32a9b817f/vmwarevcloudair.jpg&quot;&gt;
&lt;p&gt;因開發Xamarin關係，每次在Build iOS
    
    </summary>
    
    
      <category term="Other" scheme="http://edwardkuo.imas.tw/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Teams使用整理</title>
    <link href="http://edwardkuo.imas.tw/paper/2016/12/09/Devops/ThinkMicrosoftTeams/"/>
    <id>http://edwardkuo.imas.tw/paper/2016/12/09/Devops/ThinkMicrosoftTeams/</id>
    <published>2016-12-08T16:00:00.000Z</published>
    <updated>2017-05-28T15:44:52.281Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1u88jj3r4db2x4txp44yqfj1.wpengine.netdna-cdn.com/wp-content/uploads/2016/11/IMG_1151-930x523.png">
<p>用了一陣子<code>Microsoft Teams</code>後，把手邊之前跟<code>Slakc</code>整合的服務，陸續轉移到Teams，因為，Teams目前還在Preview版本，所以，建議使用的人務必將Teams的語系改成英文版，不然會出現一些莫名的問題，例如:建立Meeting時間會永遠出現前後時間錯誤或是無法設定問題<br><img src="/blogimage/MicrosoftTeamsFile/5.jpg" width="500"></p>
<p>目前比較完整的功能只有在PC版，手機版本雖然可以跨三個平台使用，不過，功能跟PC版本就差異很大，手機版本現有功能只有在<strong>交談</strong>和<strong>檔案</strong>分享，也不能做視訊聊天，只能有語音聊天，不過，我認為這些問題之後都可以被解決，畢竟在Skype for business都能做到，這技術上因該問題就不大，後面針對PC版Teams來做分享</p>
<h3 id="設定部分"><a href="#設定部分" class="headerlink" title="設定部分"></a>設定部分</h3><hr>
<p>說真的設定真的是簡單到不行，基本也沒甚麼可以設定的<br><img src="/blogimage/MicrosoftTeamsFile/6.jpg" width="300"></p>
<ul>
<li>Themes : 設定整個Teams顏色風格，目前只有<code>Default</code> , <code>Dark</code> &amp; <code>Hight Contract</code>三種</li>
<li>Notifications : 設定收到通知要如何顯示<img src="/blogimage/MicrosoftTeamsFile/7.jpg" width="300"></li>
<li>Keyboard shortcuts : 設定鍵盤快速鍵</li>
</ul>
<p>其餘就是宣告資訊，及更新Teams功能</p>
<h3 id="檔案功能"><a href="#檔案功能" class="headerlink" title="檔案功能"></a>檔案功能</h3><hr>
<img src="/blogimage/MicrosoftTeamsFile/8.jpg" width="300">
<p>檔案功能，主要是列出你在Office 365的<code>OneDrive</code>跟<code>Teams</code>中所儲存的檔案</p>
<h3 id="會議功能"><a href="#會議功能" class="headerlink" title="會議功能"></a>會議功能</h3><hr>
<img src="/blogimage/MicrosoftTeamsFile/9.jpg" width="300">
<p>小組成員可以發起會議通知，一旦發起該小組會議通知，就會自動發訊息到該小組的Channel，等到時間到時候，也會再發一次訊息通知，看到該訊息通知，被邀請人只需要點擊訊息中的<code>加入</code>即可參加會議，當然會議中可以用語音或是視訊</p>
<h3 id="通知功能"><a href="#通知功能" class="headerlink" title="通知功能"></a>通知功能</h3><hr>
<img src="/blogimage/MicrosoftTeamsFile/10.jpg" width="300">
<p>通知功能分為</p>
<ul>
<li>Notifications : 只要是聊天或是在群組中被<code>tag</code>的訊息都會顯示在這</li>
<li>Recent : 這邊顯示你收在聊天或是群組中收到訊息的列表</li>
</ul>
<h3 id="聊天功能"><a href="#聊天功能" class="headerlink" title="聊天功能"></a>聊天功能</h3><hr>
<img src="/blogimage/MicrosoftTeamsFile/11.jpg" width="700">
<p>聊天功能和小組功能的差異，我認為一個只是非工作上的需求，一個是工作上的需求差別。由圖中可以看到在聊天功能中，不僅僅只是雙方對話，你還可以加入其他人做群聊，當然也可以用<code>視訊</code>和<code>語音</code>進行溝通，另外，<code>tab</code>上分別是:</p>
<ul>
<li>Conversation : 就是雙方聊天訊息</li>
<li>File : 雙方檔案共享</li>
<li>Note : 線上OneNote筆記本</li>
</ul>
<p>到這邊，跟小組功能是差不多的，當然你也可以自己增加<code>Tab</code>，不過，在聊天中的<code>Tab</code>是只能增加微軟提供的功能，並不能自己客製化。而目前只有提供<code>Power BI</code>的功能，另外，現在有一個缺點就是聊天群是不能被刪除，也就是凡事走過必留下痕跡的概念</p>
<ul>
<li>Organization : 顯示該成員在組織中的部門或是相關資訊，若是沒設定這部分，則不會顯示資訊</li>
<li>Activity :　這個功能很神奇，只要該人員小組中發訊息，且你有在該訊息下有做回覆，在這地方就會把所有你和他的互動資訊全部都列出來</li>
</ul>
<p>在聊天中，如果是多人聊天，需要用<code>@</code>去Tag某位人員，這樣對方才會出現提醒，包含手機也才會收到Push Message，如果沒有加入<code>@</code>，這樣對方就不會有任何提示訊息</p>
<h3 id="小組功能"><a href="#小組功能" class="headerlink" title="小組功能"></a>小組功能</h3><hr>
<img src="/blogimage/MicrosoftTeamsFile/12.jpg" width="700">
<p>小組就是<code>Teams</code>最主要的核心功能，這邊小組協同合作方式跟<code>slack</code>有一點不同，在<code>slack</code>中，Host Name就是代表小組的意思，每個Channel類似要合作專案項目，所以，在小組裡成員可以看到Channel列表，但是你沒有被受邀到該Channel，你是無法知道該Channel裡面討論的訊息。</p>
<p><code>Teams</code>則是先用小組做區分，只要你有被邀請到這小組裡面，該小組的所有Channel你都可以參與討論，但是，你沒有被受邀的小組，你是無法看到該小組的存在，在小組的<code>tab</code>中可以與Office 365多項服務給綁定，如果不夠，還可以自行客製化Tab<br><img src="/blogimage/MicrosoftTeamsFile/13.jpg" width="500"></p>
<p>另外，在小組內聊天中有傳遞過任何檔案，都會自動被儲存在Office 365內，可以到<code>File</code>內找到，如果是不同Channel則會分成不同資料夾，這樣好處在於當後續要回過頭找檔案時候，不會找不到</p>
<p>在聊天時候，有提到要使用<code>@</code>去提醒對方，在小組聊天也是這樣，不過，如果有重大訊息要一次提請全部人，每個人都要逐一加上<code>@</code>是很笨的，所以，這邊簡單作法就是<code>@小組名稱</code>，例如:@MS Teams Test，就可以一次提醒整個小組了<br><img src="/blogimage/MicrosoftTeamsFile/17.jpg" width="500"></p>
<h3 id="多種Connectors"><a href="#多種Connectors" class="headerlink" title="多種Connectors"></a>多種Connectors</h3><hr>
<p>本身每個Channel有提供多種連接器可以與其他雲端服務做串接，當然也可以與<code>VSTS</code>整合唷，就看自己需要哪些服務，目前這種作法不管在<code>office 365</code>,<code>Flow</code>…等微軟出的產品中，用法都大同小異了<br><img src="/blogimage/MicrosoftTeamsFile/14.jpg" width="500"></p>
<h3 id="開發人員"><a href="#開發人員" class="headerlink" title="開發人員"></a>開發人員</h3><hr>
<p>對於開發人員來說，就是希望整合相關開發流程或是將相關資訊也放入Teams，做法可以參考下面幾個</p>
<ul>
<li><a href="http://edwardkuo.imas.tw/paper/2016/11/22/Devops/2016-11-22/">Microsoft Teams結合VSTS </a></li>
<li><a href="http://edwardkuo.imas.tw/paper/2016/11/29/Devops/MicrosoftTeamsAI/">Microsoft Teams 結合Azure Application Insights Alert </a></li>
</ul>
<p>本身也提供不少客製化開發模式，很適合讓開發人員惡搞，且又可以把<code>bot framework</code>整合進來，就可以做出<code>Service Desk</code>的服務</p>
<h3 id="多種好玩的表情圖示"><a href="#多種好玩的表情圖示" class="headerlink" title="多種好玩的表情圖示"></a>多種好玩的表情圖示</h3><hr>
<p>用Teams另一個好玩的地方，就是聊天用的表情圖示，發現內建的圖示還滿多，不過，目前只有支援PC版本才有，手機版本目前沒有唷<br><img src="/blogimage/MicrosoftTeamsFile/15.jpg" width="500"></p>
<p>如果只是發發表情圖案有甚麼稀奇，稀奇是竟然可以改動表情內的對話文字，這樣就很特別了<br><img src="/blogimage/MicrosoftTeamsFile/16.jpg" width="500"></p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><hr>
<p>目前Teams還是有很多問題需要被修復，尤其在行動裝置的APP功能明顯不足，Teams往往會被跟Slack比，基本上我認為這兩者產品區隔還是有所不同，一個重點在整合，一個是種輕巧，企業內使用Teams會比Slack適合多，畢竟，在整合企業環境是微軟強項，但是，如果是一般團隊或是新創公司用Slack就已經在協同合作上就足夠，不過，從另一個角度考量，那還需要用SharePoint嗎?早期SharePoint也是在協同合作有其效益，不過，現在都講求小團隊，用SharePoint似乎就有點殺雞用刀。個人覺得如果能在Teams無論在操作或是功能擴充能再加強，未嘗不是一套可以成為企業級的協同工具</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1u88jj3r4db2x4txp44yqfj1.wpengine.netdna-cdn.com/wp-content/uploads/2016/11/IMG_1151-930x523.png&quot;&gt;
&lt;p&gt;用了一陣子&lt;code&gt;Microsoft 
    
    </summary>
    
      <category term="Microsoft Teams" scheme="http://edwardkuo.imas.tw/categories/Microsoft-Teams/"/>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Office 365 API Connectors</title>
    <link href="http://edwardkuo.imas.tw/paper/2016/11/28/Azure/O365API/"/>
    <id>http://edwardkuo.imas.tw/paper/2016/11/28/Azure/O365API/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2017-05-29T15:42:44.853Z</updated>
    
    <content type="html"><![CDATA[<img src="https://valenciacollege.zendesk.com/hc/en-us/article_attachments/206571617/office-logo_v3.jpg">
<p>在Office 365提供了<code>webhooks</code>的功能，讓外部系統可以與Office 365進行溝通，因此，只要能開發相容或是本身有相容<code>webhooks</code>定義，就可以讓外部系統把訊息傳遞到Office 365，因此，了解Office 365 <code>webhook</code>可接受的傳遞的格式就很重要。由於本身<code>webhooks</code>是透過<code>Http</code>協定，所以，在哪一種平台上去開發，就部會是障礙，而格式內容是使用<code>json</code>方式，這樣操作起來就更容易，在訊息<code>Header</code>要加上<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"Content-Type" : "application/json"</div></pre></td></tr></table></figure></p>
<p>我們發送一個簡單文字格式，例如:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"text"</span>:<span class="string">"Hello world"</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這樣就可以把訊息傳到O365中，不過，只是單純這樣的訊息似乎也太寒酸，所以，在整個O365的<code>json</code>訊息中，又可以分為幾大塊模組，讓我們組出想要的訊息內容，只是每個欄位名稱必須符合O365定義，大概可以分成下面主要的幾大塊</p>
<ul>
<li>title</li>
<li>Actions</li>
<li>Sections</li>
</ul>
<p>利用這些區塊就可以組出我們想要的資訊內容</p>
<h2 id="title-amp-text"><a href="#title-amp-text" class="headerlink" title="title &amp; text"></a>title &amp; text</h2><hr>
<p>title算是整個訊息的標題，不過，在不同服務內呈現樣貌會有一點不同，如果只有輸入下面這樣指令是不會Work的，若只想單純文字，只要用<code>text</code>就可以<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"title"</span>:<span class="string">"我是Title"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>還必須加上內容才可以，內容用<code>text</code>加入，不然是發送不出去<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"title"</span>:<span class="string">"我是Title"</span>,</div><div class="line">     <span class="attr">"text"</span>:<span class="string">"第一個訊息"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/blogimage/Office365api/snip_20161127111419.png" width="400">
<p>若是要在文字中加入超連結，這是可以，其寫法就跟寫<code>Markdown</code>的超連結語法相同，用<code>[]()</code>組合，像是<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"title"</span>:<span class="string">"我是Title"</span>,</div><div class="line">     <span class="attr">"text"</span>:<span class="string">"第一個訊息[Link](http://www.google.com)"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/blogimage/Office365api/snip_20161127223357.png" width="400">
<p>就可以做到具有超連結的文字</p>
<h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><hr>
<p>Actions的概念就像是在訊息中間帶入一個<code>button</code>，可以讓人去點擊，不過，實作上在某些開發編輯器或是服務上會認為這樣語法是有錯誤，主要是因為有用到<code>@context</code>和<code>@type</code>這兩個屬性會被視為錯誤的<code>json</code>格式，導致無法發送，這裡<code>@type</code>中可以用的選項，可以參考<a href="http://schema.org/ViewAction" target="_blank" rel="external">http://schema.org/ViewAction</a>了解有那些可以用<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"text"</span>:<span class="string">"第一個訊息[Link](http://www.google.com)"</span>,</div><div class="line">      <span class="attr">"potentialAction"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"@context"</span>: <span class="string">"http://schema.org"</span>,</div><div class="line">      <span class="attr">"@type"</span>: <span class="string">"ViewAction"</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"拜訪Google"</span>,</div><div class="line">      <span class="attr">"target"</span>: [<span class="string">"https://www.google.com"</span>]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/blogimage/Office365api/snip_20161127224342.png" width="400">
<h2 id="Sections"><a href="#Sections" class="headerlink" title="Sections"></a>Sections</h2><hr>
<p>前面使用<code>text</code>用來描述相關資訊，感覺似乎有一點點少，畢竟，某些時候這樣的資訊是不夠我們使用，因此，便會想要我擴充資訊內容，這時候就可以用<code>Sections</code>加上<code>Fact</code>的搭配，<code>Sections</code>內則使用<code>activityTitle</code> ,<code>activitySubtitle</code>,和<code>activityText</code>做摘要性的描述，詳細描述則透過<code>Fact</code>方式的<code>Key &amp; Value</code>概念去放入必要的資訊，另外，在使用<code>Sections</code>時候，必須要先有<code>title</code>和<code>text</code>，只有單純<code>sections</code>是會發生錯誤<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"title"</span>:<span class="string">"我是Title"</span>,</div><div class="line">  <span class="attr">"text"</span>:<span class="string">"第一個訊息[Link](http://www.google.com)"</span>,</div><div class="line">  <span class="attr">"sections"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"activityTitle"</span>: <span class="string">"Office 365 API"</span>,</div><div class="line">      <span class="attr">"activitySubtitle"</span>: <span class="string">"如何使用"</span>,</div><div class="line">      <span class="attr">"activityText"</span>: <span class="string">"透過API傳遞資訊"</span></div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/blogimage/Office365api/snip_20161127225602.png" width="400">
<p>這時候，再配上<code>Fact</code>則可以填入更多的訊息，而<code>Fact</code>內是搭配<code>name</code>和<code>value</code>方式把資訊填入，且可以有多組的<code>Fact</code>，如果資訊過長，還會自動幫你摺疊訊息<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"title"</span>:<span class="string">"我是Title"</span>,</div><div class="line">     <span class="attr">"text"</span>:<span class="string">"第一個訊息[Link](http://www.google.com)"</span>,</div><div class="line">  <span class="attr">"sections"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"activityTitle"</span>: <span class="string">"Office 365 API"</span>,</div><div class="line">      <span class="attr">"activitySubtitle"</span>: <span class="string">"如何使用"</span>,</div><div class="line">      <span class="attr">"activityText"</span>: <span class="string">"透過API傳遞資訊"</span></div><div class="line">  &#125;</div><div class="line">  ,&#123;</div><div class="line">      <span class="attr">"title"</span>: <span class="string">"人員1"</span>,</div><div class="line">      <span class="attr">"facts"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"姓名"</span>,</div><div class="line">          <span class="attr">"value"</span>: <span class="string">"王大明"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"電話"</span>,</div><div class="line">          <span class="attr">"value"</span>: <span class="string">"1000000"</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"title"</span>: <span class="string">"人員2"</span>,</div><div class="line">      <span class="attr">"facts"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"姓名"</span>,</div><div class="line">          <span class="attr">"value"</span>: <span class="string">"王大明"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"電話"</span>,</div><div class="line">          <span class="attr">"value"</span>: <span class="string">"1000000"</span></div><div class="line">        &#125;  </div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/blogimage/Office365api/snip_20161127230023.png" width="400">
<p>利用<code>webhook</code>方式再搭配<code>json</code>資訊格式，看來要與Office 365做整合也就不是那樣困難了</p>
<h3 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h3><hr>
<p>1.<a href="https://dev.outlook.com/connectors/reference" target="_blank" rel="external">https://dev.outlook.com/connectors/reference</a><br>2.<a href="http://schema.org/ViewAction" target="_blank" rel="external">http://schema.org/ViewAction</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://valenciacollege.zendesk.com/hc/en-us/article_attachments/206571617/office-logo_v3.jpg&quot;&gt;
&lt;p&gt;在Office 365提供了&lt;code&gt;webhooks&lt;/c
    
    </summary>
    
    
      <category term="Office 365" scheme="http://edwardkuo.imas.tw/tags/Office-365/"/>
    
  </entry>
  
  <entry>
    <title>解決SQL Project中Script遇到跨DB參照問題</title>
    <link href="http://edwardkuo.imas.tw/paper/2016/11/16/Devops/2016-11-16/"/>
    <id>http://edwardkuo.imas.tw/paper/2016/11/16/Devops/2016-11-16/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2017-05-28T08:11:19.088Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.discountasp.net/images/logo-sql-connect.png">
<p>做單一系統資料庫專案，透過SQL Project方式開發，基本上並無太大問題，但是，如果在企業內部時候，會遇到一個實務上問題是，當要把某一個系統的資料庫轉換變成SQL Project時候，裡面如果Script有參照到其他資料庫，或是你在A資料庫下寫<code>View</code>或是<code>Store Procedure</code>時必須參照到同一台Server不同DB抓資料（如果是Link Server可以參考這解決[<a href="&#39;http://edwardkuo.imas.tw/paper/2016/06/15/SQL/2016-06-16/&#39;">點我</a>]，這時候在A資料庫專案終究會有問題出現，會發現你的Script出現紅色警告，甚至無法編譯成功。範例是當你在A DB的View用到B DB的Table<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> A.dbo.XXX <span class="keyword">AS</span> a <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></div><div class="line">B.dbo.MMM <span class="keyword">AS</span> b <span class="keyword">ON</span> a.ID = b.ID</div></pre></td></tr></table></figure></p>
<p>最簡單解決方式，當然也是把另一個DB也變成SQL Project，然後做Database Reference，但是，實務上要執行會是有相當難度</p>
<ul>
<li>第一：你可能只用到一個資料表，卻要把整個DB變成你的專案</li>
<li>第二：DB Owner並不是你</li>
</ul>
<p>所以，必須要有變相的做法來解決這問題，不然，在A資料庫的SQL Project將會無法編譯成功，又或是需要大費周章把有參照到資料庫都變成SQL Project</p>
<h2 id="建立一個被參照DB的殼"><a href="#建立一個被參照DB的殼" class="headerlink" title="建立一個被參照DB的殼"></a>建立一個被參照DB的殼</h2><hr>
<p>在自己專案內，建立一個要參照B資料庫的專案檔，在專案檔下面建立要對應的<code>Table</code><br><img src="/blogimage/EK%202016-11-16%20%E4%B8%8B%E5%8D%8812.49.30.png" width="200"></p>
<p>然後，在<code>Table</code>的欄位中，只要放入你所有需要的欄位就可以</p>
<h2 id="設定SQL-Project參照"><a href="#設定SQL-Project參照" class="headerlink" title="設定SQL Project參照"></a>設定SQL Project參照</h2><hr>
<p>建立好要被參照SQL Project後，就在原來SQL Project去參照它<br><img src="/blogimage/EK%202016-11-16%20%E4%B8%8B%E5%8D%8812.54.37.png" width="300"></p>
<p>然後就會跳出相關設定的屬性<br><img src="/blogimage/EK%202016-11-16%20%E4%B8%8B%E5%8D%8812.55.43.png"></p>
<ul>
<li>紅色框，就選擇剛剛要被參照的SQL Project名稱</li>
<li>藍色框，則是透過變數方式去設定在A SQL Project要替代的變數，其中，<code>Database Name</code>如果SQL Project專案名稱與實際DB Name不同，這邊要換成實際DB Name，這樣在後續部署上才不會出問題，至於變數名稱就看自己喜好訂定</li>
</ul>
<p>設定完成後，會多出一個Reference，這跟寫C#一樣，是參照不同Assemably的概念<br><img src="/blogimage/EK%202016-11-16%20%E4%B8%8B%E5%8D%8812.56.47.png" width="300"></p>
<p>透過變數方式，只要在後面有用到這個DB時候，都可以透過變數取代<br><img src="/blogimage/EK%202016-11-16%20%E4%B8%8B%E5%8D%881.03.25.png" width="400"></p>
<p>所以，就可以把剛剛上面語法變成下面這樣，用<code>[$(RefHR)]</code>去代替<code>B</code>，就可以解決無法參照問題<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">FROM</span> A.dbo.XXX <span class="keyword">AS</span> a <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></div><div class="line">[$(RefHR)].dbo.MMM <span class="keyword">AS</span> b <span class="keyword">ON</span> a.ID = b.ID</div></pre></td></tr></table></figure></p>
<p>但是，這種做法透過<code>New Schema Comparison</code>去部署，也是可以的唷<br><img src="/blogimage/EK%202016-11-16%20%E4%B8%8B%E5%8D%881.07.37.png"></p>
<p>因為，Visual Studio在幫你部署SQL Statement時候，自動把<code>[$(RefHR)]</code>變數至換成實際的值，所以，透過這樣做法也還是可以能用SQL Project做版控的，只是切記別真的把被參照的DB也部署到Server就好</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://www.discountasp.net/images/logo-sql-connect.png&quot;&gt;
&lt;p&gt;做單一系統資料庫專案，透過SQL Project方式開發，基本上並無太大問題，但是，如果在企業內部時候，會遇到一個實務上問題是，當要把某一個
    
    </summary>
    
      <category term="資料庫程式版控" scheme="http://edwardkuo.imas.tw/categories/%E8%B3%87%E6%96%99%E5%BA%AB%E7%A8%8B%E5%BC%8F%E7%89%88%E6%8E%A7/"/>
    
    
      <category term="DevOps" scheme="http://edwardkuo.imas.tw/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>找DataBase資料表的Miss Index並建立</title>
    <link href="http://edwardkuo.imas.tw/paper/2016/11/15/SQL/2016-11-15/"/>
    <id>http://edwardkuo.imas.tw/paper/2016/11/15/SQL/2016-11-15/</id>
    <published>2016-11-14T16:00:00.000Z</published>
    <updated>2016-11-22T15:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<img src="http://blog.sqreamtech.com/wp-content/uploads/2015/05/SQL2.png">
<p>一般開發系統人員常常遇到當自己系統跑一段時間後，就會被使用者抱怨說系統怎越跑越慢，當然，系統越跑越慢的因素很多，其中一項就是Table該要有的Index卻沒有建立，在系統初期設計上，不是很容易訂定有效的，不過，當系統越來越大時候，透過SQL Server的統計資訊分析後，去找出較為精準的Index反而會簡單一點，且Index不是建立越多越好，不好的Index反而會讓系統效能變低。</p>
<p>因此，在有一次聽過百敬老師的DB效能調教課程後，原來，可以透過T-SQL去找出目前DB中有哪些資料表是缺乏Index的然後，先針對這些Miss Index資訊建立Index，可算是一個比較安全建立Index方式，其語法如下:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span>  DB_NAME(database_id) <span class="keyword">AS</span> DB_NAME ,</div><div class="line">        OBJECT_NAME(object_id, database_id) <span class="keyword">AS</span> Table_Name ,</div><div class="line">        MisDetail.equality_columns [相等欄位] ,</div><div class="line">        MisDetail.inequality_columns [不等欄位] ,</div><div class="line">        MisDetail.included_columns [覆蓋欄位] ,</div><div class="line">        ( user_seeks + user_scans ) * avg_total_user_cost * ( avg_user_impact</div><div class="line">                                                              * <span class="number">0.01</span> ) [建索引可降低的成本] ,</div><div class="line">        MisStatus.unique_compiles [可用此索引的已編譯執行計畫之數量] ,</div><div class="line">        MisStatus.user_seeks [使用者搜尋次數] ,</div><div class="line">        MisStatus.user_scans [使用者掃描次數] ,</div><div class="line">        MisStatus.avg_total_user_cost [平均使用者可以降低的成本] ,</div><div class="line">        MisStatus.avg_user_impact [使用後成本佔原成本的百分率] ,</div><div class="line">        <span class="string">'use '</span> + DB_NAME(database_id) + <span class="string">' create index idx'</span></div><div class="line">        + OBJECT_NAME(object_id, database_id) + <span class="string">'_missing_'</span></div><div class="line">        + <span class="keyword">CONVERT</span>(<span class="built_in">VARCHAR</span>(<span class="number">10</span>), MisDetail.index_handle) + <span class="string">' on ['</span></div><div class="line">        + OBJECT_NAME(object_id, database_id) + <span class="string">']('</span></div><div class="line">        + <span class="keyword">ISNULL</span>(MisDetail.equality_columns, <span class="string">''</span>)</div><div class="line">        + <span class="keyword">CASE</span> <span class="keyword">WHEN</span> MisDetail.equality_columns <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">                    <span class="keyword">AND</span> MisDetail.inequality_columns <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">','</span></div><div class="line">               <span class="keyword">ELSE</span> <span class="string">''</span></div><div class="line">          <span class="keyword">END</span> + <span class="keyword">ISNULL</span>(MisDetail.inequality_columns, <span class="string">''</span>) + <span class="string">')</span></div><div class="line">' + <span class="keyword">ISNULL</span>(<span class="string">'include ('</span> + included_columns + <span class="string">')</span></div><div class="line">', <span class="string">''</span>) <span class="keyword">AS</span> SQL_Statment</div><div class="line"><span class="keyword">FROM</span>    sys.dm_db_missing_index_group_stats MisStatus <span class="keyword">WITH</span> ( NOLOCK )</div><div class="line">        <span class="keyword">JOIN</span> sys.dm_db_missing_index_groups MisGroup <span class="keyword">WITH</span> ( NOLOCK ) <span class="keyword">ON</span> MisStatus.group_handle = MisGroup.index_group_handle</div><div class="line">        <span class="keyword">JOIN</span> sys.dm_db_missing_index_details MisDetail <span class="keyword">WITH</span> ( NOLOCK ) <span class="keyword">ON</span> MisGroup.index_handle = MisDetail.index_handle</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span> ,</div><div class="line">        <span class="number">2</span> <span class="keyword">ASC</span></div></pre></td></tr></table></figure>
<p>在SQL_Statment欄位中，是顯示要建立Index語法，只要把內容Copy出來就可以建立Index了，省去還要去撰寫建立Index的SQL語法。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> msdb</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idxsysjobhistory_missing_97620 <span class="keyword">ON</span> [sysjobhistory]([job_id])</div><div class="line"><span class="keyword">INCLUDE</span> ([instance_id], [step_id], [step_name], [message], [run_status], [run_date], [run_time], [run_duration], [operator_id_emailed], [operator_id_netsent], [operator_id_paged])</div></pre></td></tr></table></figure></p>
<p>個人認為因該先從使用者搜尋次數高的優先找尋要建立Index的資訊，畢竟使用者次數少的，可能只是IT人員自行下條件搜尋，並非是系統再使用的，因此，建立Index後可能效益也不大。然後再找建索引可降低的成本最高和平均使用者可以降低的成本最高的為優先考量，透過這樣簡單分析，去建立比較可靠的Index，比胡亂建立Index有效益多了</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://blog.sqreamtech.com/wp-content/uploads/2015/05/SQL2.png&quot;&gt;
&lt;p&gt;一般開發系統人員常常遇到當自己系統跑一段時間後，就會被使用者抱怨說系統怎越跑越慢，當然，系統越跑越慢的因素很多，其中一項就是
    
    </summary>
    
    
      <category term="T-SQL" scheme="http://edwardkuo.imas.tw/tags/T-SQL/"/>
    
  </entry>
  
</feed>
